package com.example.dataprovider3.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dataprovider3.entity.CallForPaymentArrearsFeesDetailBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALL_FOR_PAYMENT_ARREARS_FEES_DETAIL_BEAN".
*/
public class CallForPaymentArrearsFeesDetailBeanDao extends AbstractDao<CallForPaymentArrearsFeesDetailBean, Long> {

    public static final String TABLENAME = "CALL_FOR_PAYMENT_ARREARS_FEES_DETAIL_BEAN";

    /**
     * Properties of entity CallForPaymentArrearsFeesDetailBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property S_CID = new Property(1, String.class, "S_CID", false, "S__CID");
        public final static Property S_RENWUID = new Property(2, String.class, "S_RENWUID", false, "S__RENWUID");
        public final static Property I_ZHANGWUNY = new Property(3, String.class, "I_ZHANGWUNY", false, "I__ZHANGWUNY");
        public final static Property N_SHUIFEI = new Property(4, String.class, "N_SHUIFEI", false, "N__SHUIFEI");
        public final static Property N_PAISHUIF = new Property(5, String.class, "N_PAISHUIF", false, "N__PAISHUIF");
        public final static Property N_JE = new Property(6, String.class, "N_JE", false, "N__JE");
        public final static Property N_WEIYUEJ = new Property(7, String.class, "N_WEIYUEJ", false, "N__WEIYUEJ");
        public final static Property D_KAIZHANG = new Property(8, String.class, "D_KAIZHANG", false, "D__KAIZHANG");
    }


    public CallForPaymentArrearsFeesDetailBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CallForPaymentArrearsFeesDetailBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALL_FOR_PAYMENT_ARREARS_FEES_DETAIL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"S__CID\" TEXT," + // 1: S_CID
                "\"S__RENWUID\" TEXT," + // 2: S_RENWUID
                "\"I__ZHANGWUNY\" TEXT," + // 3: I_ZHANGWUNY
                "\"N__SHUIFEI\" TEXT," + // 4: N_SHUIFEI
                "\"N__PAISHUIF\" TEXT," + // 5: N_PAISHUIF
                "\"N__JE\" TEXT," + // 6: N_JE
                "\"N__WEIYUEJ\" TEXT," + // 7: N_WEIYUEJ
                "\"D__KAIZHANG\" TEXT);"); // 8: D_KAIZHANG
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALL_FOR_PAYMENT_ARREARS_FEES_DETAIL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CallForPaymentArrearsFeesDetailBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String S_CID = entity.getS_CID();
        if (S_CID != null) {
            stmt.bindString(2, S_CID);
        }
 
        String S_RENWUID = entity.getS_RENWUID();
        if (S_RENWUID != null) {
            stmt.bindString(3, S_RENWUID);
        }
 
        String I_ZHANGWUNY = entity.getI_ZHANGWUNY();
        if (I_ZHANGWUNY != null) {
            stmt.bindString(4, I_ZHANGWUNY);
        }
 
        String N_SHUIFEI = entity.getN_SHUIFEI();
        if (N_SHUIFEI != null) {
            stmt.bindString(5, N_SHUIFEI);
        }
 
        String N_PAISHUIF = entity.getN_PAISHUIF();
        if (N_PAISHUIF != null) {
            stmt.bindString(6, N_PAISHUIF);
        }
 
        String N_JE = entity.getN_JE();
        if (N_JE != null) {
            stmt.bindString(7, N_JE);
        }
 
        String N_WEIYUEJ = entity.getN_WEIYUEJ();
        if (N_WEIYUEJ != null) {
            stmt.bindString(8, N_WEIYUEJ);
        }
 
        String D_KAIZHANG = entity.getD_KAIZHANG();
        if (D_KAIZHANG != null) {
            stmt.bindString(9, D_KAIZHANG);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CallForPaymentArrearsFeesDetailBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String S_CID = entity.getS_CID();
        if (S_CID != null) {
            stmt.bindString(2, S_CID);
        }
 
        String S_RENWUID = entity.getS_RENWUID();
        if (S_RENWUID != null) {
            stmt.bindString(3, S_RENWUID);
        }
 
        String I_ZHANGWUNY = entity.getI_ZHANGWUNY();
        if (I_ZHANGWUNY != null) {
            stmt.bindString(4, I_ZHANGWUNY);
        }
 
        String N_SHUIFEI = entity.getN_SHUIFEI();
        if (N_SHUIFEI != null) {
            stmt.bindString(5, N_SHUIFEI);
        }
 
        String N_PAISHUIF = entity.getN_PAISHUIF();
        if (N_PAISHUIF != null) {
            stmt.bindString(6, N_PAISHUIF);
        }
 
        String N_JE = entity.getN_JE();
        if (N_JE != null) {
            stmt.bindString(7, N_JE);
        }
 
        String N_WEIYUEJ = entity.getN_WEIYUEJ();
        if (N_WEIYUEJ != null) {
            stmt.bindString(8, N_WEIYUEJ);
        }
 
        String D_KAIZHANG = entity.getD_KAIZHANG();
        if (D_KAIZHANG != null) {
            stmt.bindString(9, D_KAIZHANG);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CallForPaymentArrearsFeesDetailBean readEntity(Cursor cursor, int offset) {
        CallForPaymentArrearsFeesDetailBean entity = new CallForPaymentArrearsFeesDetailBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_CID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_RENWUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // I_ZHANGWUNY
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // N_SHUIFEI
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // N_PAISHUIF
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // N_JE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // N_WEIYUEJ
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // D_KAIZHANG
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CallForPaymentArrearsFeesDetailBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setS_CID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setS_RENWUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setI_ZHANGWUNY(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setN_SHUIFEI(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setN_PAISHUIF(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setN_JE(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setN_WEIYUEJ(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setD_KAIZHANG(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CallForPaymentArrearsFeesDetailBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CallForPaymentArrearsFeesDetailBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CallForPaymentArrearsFeesDetailBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
