package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.Users;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PDA_USERS.
*/
public class UsersDao extends AbstractDao<Users, Void> {

    public static final String TABLENAME = "PDA_USERS";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property S_ACCOUNT = new Property(0, String.class, "S_ACCOUNT", false, "S_ACCOUNT");
        public final static Property S_USERNAME = new Property(1, String.class, "S_USERNAME", false, "S_USERNAME");
        public final static Property S_ST = new Property(2, String.class, "S_ST", false, "S_ST");
        public final static Property I_TYPE = new Property(3, Integer.class, "I_TYPE", false, "I_TYPE");
    };


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PDA_USERS' (" + //
                "'S_ACCOUNT' TEXT," + // 0: S_ACCOUNT
                "'S_USERNAME' TEXT," + // 1: S_USERNAME
                "'S_ST' TEXT," + // 2: S_ST
                "'I_TYPE' INTEGER);"); // 3: I_TYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PDA_USERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        String S_ACCOUNT = entity.getS_ACCOUNT();
        if (S_ACCOUNT != null) {
            stmt.bindString(1, S_ACCOUNT);
        }
 
        String S_USERNAME = entity.getS_USERNAME();
        if (S_USERNAME != null) {
            stmt.bindString(2, S_USERNAME);
        }
 
        String S_ST = entity.getS_ST();
        if (S_ST != null) {
            stmt.bindString(3, S_ST);
        }
 
        Integer I_TYPE = entity.getI_TYPE();
        if (I_TYPE != null) {
            stmt.bindLong(4, I_TYPE);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // S_ACCOUNT
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_USERNAME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_ST
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // I_TYPE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setS_ACCOUNT(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setS_USERNAME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setS_ST(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setI_TYPE(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Users entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Users entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 插入抄表值班人员
     *
     * @param user
     */
    public void insertUsers(Users user) {
        if (user == null)
            return;
        this.insertOrReplace(user);
    }

    /**
     * 获取账号，站点对应的值班人员数据
     *
     * @param account
     *            操作员
     * @param station
     *            站点
     * @return List<Users>
     */
    public List<Users> getUserList(String account, String station, int type) {
        QueryBuilder<Users> qb = this.queryBuilder();
        qb.where(Properties.S_ACCOUNT.eq(account),Properties.S_ST.eq(station),Properties.I_TYPE.eq(type));
        List<Users> list = qb.list();
        return list;
    }

    /**
     * 删除对应操作员，类型的用户信息
     *
     * @param account
     *            操作员
     * @param type
     *            类型
     */
    public void deleteUsers(String account, int type) {
        QueryBuilder<Users> qb = this.queryBuilder();
        DeleteQuery<Users> bd = qb.where(Properties.S_ACCOUNT.eq(account),Properties.I_TYPE.eq(type)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

}
