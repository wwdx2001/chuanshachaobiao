package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.dataprovider.greendaoEntity.RushPayRW;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MR_RushPayRW.
 */
public class RushPayRWDao extends AbstractDao<RushPayRW, Long> {

    public static final String TABLENAME = "MR_RushPayRW";

    /**
     * 查找未完成任务
     */
    public static final int NOWORK = 0;
    /**
     * 查找已抄任务未上传
     */
    public static final int FINISH_WORK_NOT_UPLOAD = 1;

    /**
     * 查找所有
     */
    public static final int ALL = 2;

    /**
     * Properties of entity RushPayRW.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", true, "ID");
        public final static Property I_TaskId = new Property(1, int.class, "I_TaskId", false, "I_TASKID");
        public final static Property S_CardId = new Property(2, String.class, "S_CardId", false, "S_CardId");
        public final static Property S_CardName = new Property(3, String.class, "S_CardName", false, "S_CARDNAME");
        public final static Property S_CardAddress = new Property(4, String.class, "S_CardAddress", false, "S_CARDADDRESS");
        public final static Property S_SubComCode = new Property(5, String.class, "S_SubComCode", false, "S_SUBCOMCODE");
        public final static Property D_QfMonths = new Property(6, Double.class, "D_QfMonths", false, "D_QFMONTHS");
        public final static Property D_QfMoney = new Property(7, Double.class, "D_QfMoney", false, "D_QFMONEY");
        public final static Property I_IsFinish = new Property(8, int.class, "I_IsFinish", false, "I_ISFINISH");
        public final static Property S_MeterReader = new Property(9, String.class, "S_MeterReader", false, "S_METERREADER");
        public final static Property S_ReceiptRemark = new Property(10, String.class, "S_ReceiptRemark", false, "S_RECEIPTREMARK");
        public final static Property L_ReceiptTime = new Property(11, long.class, "L_ReceiptTime", false, "L_RECEIPTTIME");
        public final static Property S_ReviewPerson = new Property(12, String.class, "S_ReviewPerson", false, "S_REVIEWPERSON");
        public final static Property L_UploadTime = new Property(13, long.class, "L_UploadTime", false, "L_UPLOADTIME");
        public final static Property I_IsUpload = new Property(14, int.class, "I_IsUpload", false, "I_ISUPLOAD");
        public final static Property I_ISComplete = new Property(15, int.class, "I_ISComplete", false, "I_ISCOMPLETE");
    }

    ;


    public RushPayRWDao(DaoConfig config) {
        super(config);
    }

    public RushPayRWDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MR_RushPayRW' (" + //
                "'ID' int PRIMARY KEY NOT NULL," + // 0: ID
                "'I_TASKID' int," + // 1: I_TaskId
                "'S_CardId' TEXT," + // 2: S_CardId
                "'S_CARDNAME' TEXT," + // 3: S_CardName
                "'S_CARDADDRESS' TEXT," + // 4: S_CardAddress
                "'S_SUBCOMCODE' TEXT," + // 5: S_SubComCode
                "'D_QFMONTHS' REAL," + // 6: D_QfMonths
                "'D_QFMONEY' REAL," + // 7: D_QfMoney
                "'I_ISFINISH' int," + // 8: I_IsFinish
                "'S_METERREADER' TEXT," + // 9: S_MeterReader
                "'S_RECEIPTREMARK' TEXT," + // 10: S_ReceiptRemark
                "'L_RECEIPTTIME' int," + // 11: L_ReceiptTime
                "'S_REVIEWPERSON' TEXT," + // 12: S_ReviewPerson
                "'L_UPLOADTIME' int," + // 13: L_UploadTime
                "'I_ISUPLOAD' int," + // 14: I_IsUpload
                "'I_ISCOMPLETE' int);"); // 15: I_ISComplete
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MR_RushPayRW'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, RushPayRW entity) {
        stmt.clearBindings();
        if (entity.getID() != -1) {
            stmt.bindLong(1, entity.getID());
        }
        stmt.bindLong(2, entity.getI_TaskId());

        String S_CardId = entity.getS_CardId();
        if (S_CardId != null) {
            stmt.bindString(3, entity.getS_CardId());
        }

        String S_CardName = entity.getS_CardName();
        if (S_CardName != null) {
            stmt.bindString(4, S_CardName);
        }

        String S_CardAddress = entity.getS_CardAddress();
        if (S_CardAddress != null) {
            stmt.bindString(5, S_CardAddress);
        }

        String S_SubComCode = entity.getS_SubComCode();
        if (S_SubComCode != null) {
            stmt.bindString(6, S_SubComCode);
        }

        stmt.bindDouble(7, entity.getD_QfMonths());

        stmt.bindDouble(8, entity.getD_QfMoney());

        stmt.bindLong(9, entity.getI_IsFinish());

        String S_MeterReader = entity.getS_MeterReader();
        if (S_MeterReader != null) {
            stmt.bindString(10, S_MeterReader);
        }

        String S_ReceiptRemark = entity.getS_ReceiptRemark();
        if (S_ReceiptRemark != null) {
            stmt.bindString(11, S_ReceiptRemark);
        }

        stmt.bindLong(12, entity.getL_ReceiptTime());

        String S_ReviewPerson = entity.getS_ReviewPerson();
        if (S_ReviewPerson != null) {
            stmt.bindString(13, S_ReviewPerson);
        }

        stmt.bindLong(14, entity.getL_UploadTime());

        stmt.bindLong(15, entity.getI_IsUpload());

        stmt.bindLong(16, entity.getI_ISComplete());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public RushPayRW readEntity(Cursor cursor, int offset) {
        RushPayRW entity = new RushPayRW( //
                cursor.getLong(offset + 0), // ID
                cursor.isNull(offset + 1) ? 0 : cursor.getInt(offset + 1), // I_TaskId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_CardId
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_CardName
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // S_CardAddress
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // S_SubComCode
                cursor.isNull(offset + 6) ? 0 : cursor.getDouble(offset + 6), // D_QfMonths
                cursor.isNull(offset + 7) ? 0 : cursor.getDouble(offset + 7), // D_QfMoney
                cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8), // I_IsFinish
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // S_MeterReader
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // S_ReceiptRemark
                cursor.isNull(offset + 11) ? 0 : cursor.getLong(offset + 11), // L_ReceiptTime
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // S_ReviewPerson
                cursor.isNull(offset + 13) ? 0 : cursor.getLong(offset + 13), // L_UploadTime
                cursor.isNull(offset + 14) ? 0 : cursor.getInt(offset + 14), // I_IsUpload
                cursor.isNull(offset + 15) ? 0 : cursor.getInt(offset + 15) // I_ISComplete
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, RushPayRW entity, int offset) {
        entity.setID(cursor.getLong(offset + 0));
        entity.setI_TaskId(cursor.isNull(offset + 1) ? 0 : cursor.getInt(offset + 1));
        entity.setS_CardId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_CardName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setS_CardAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_SubComCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setD_QfMonths(cursor.isNull(offset + 6) ? 0 : cursor.getDouble(offset + 6));
        entity.setD_QfMoney(cursor.isNull(offset + 7) ? 0 : cursor.getDouble(offset + 7));
        entity.setI_IsFinish(cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8));
        entity.setS_MeterReader(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setS_ReceiptRemark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setL_ReceiptTime(cursor.isNull(offset + 11) ? 0 : cursor.getLong(offset + 11));
        entity.setS_ReviewPerson(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setL_UploadTime(cursor.isNull(offset + 13) ? 0 : cursor.getLong(offset + 13));
        entity.setI_IsUpload(cursor.isNull(offset + 14) ? 0 : cursor.getInt(offset + 14));
        entity.setI_ISComplete(cursor.isNull(offset + 15) ? 0 : cursor.getInt(offset + 15));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(RushPayRW entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(RushPayRW entity) {
        if (entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    public List<RushPayRW> getRushPayRWList(String account, int type) {
        QueryBuilder qb = this.queryBuilder();
        switch (type) {
            case FINISH_WORK_NOT_UPLOAD:
                qb.where(Properties.S_MeterReader.eq(account),
                        Properties.I_IsUpload.eq(0),
                        Properties.I_ISComplete.eq(1));
                qb.orderAsc(Properties.I_TaskId);
                break;
            case ALL:
                qb.where(Properties.S_MeterReader.eq(account));
                qb.orderAsc(Properties.I_TaskId);
                break;

        }
        return qb.list() == null ? null : qb.list();
    }

    /**
     * 添加催缴任务
     */
    public boolean insertRushPayRW(RushPayRW rushPayRW) {
        if (rushPayRW == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_MeterReader.eq(rushPayRW.getS_MeterReader()),
                Properties.I_TaskId.eq(rushPayRW.getI_TaskId())
        );
        List<RushPayRW> rushPayRWs = qb.list();
        if ((rushPayRWs != null) && (rushPayRWs.size() > 0)) {//再次从服务器下载任务时，更新已存在任务的总数、已抄数
            RushPayRW rushPayRWData = rushPayRWs.get(0);
            rushPayRW.setID(rushPayRWData.getID());
            update(rushPayRW);
            return false;
        }
        rushPayRW.setID(-1);
        if (this.insert(rushPayRW) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public void updateRushPayList(List<RushPayRW> rushPayRWs) {
        if (rushPayRWs == null) {
            return;
        }

        updateInTx(rushPayRWs);
    }

    public List<RushPayRW> getRemovedRushPayRW(String account, List<String> renWuBHList) {
        if (account == null || renWuBHList == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_MeterReader.eq(account),
                Properties.I_TaskId.notIn(renWuBHList));
        return qb.list();
    }

    public boolean deleteRushPayRW(String account, int taskId) {
        if (account == null) {
            return false;
        }

        QueryBuilder<RushPayRW> qb = this.queryBuilder();
        DeleteQuery<RushPayRW> dq = qb.where(Properties.S_MeterReader.eq(account),
                Properties.I_TaskId.eq(taskId)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
        return true;
    }

    public List<RushPayRW> getAllRushPayTask(String account) {
        if (account == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_MeterReader.eq(account));
        qb.orderAsc(Properties.I_TaskId);
        return qb.list();
    }

    public RushPayRW getNextRushPayTask(String account, int taskId) {
        if (account == null) {
            return null;
        }

        List<RushPayRW> rushPayRWList = getAllRushPayTask(account);
        int index = -1;
        for (int i = 0; i < rushPayRWList.size(); i++) {
            if (rushPayRWList.get(i).getI_TaskId() == taskId) {
                index = i;
                break;
            }
        }
        if (index == rushPayRWList.size() - 1) {
            return null;
        } else {
            return rushPayRWList.get(index + 1);
        }
    }

    public RushPayRW getPreviousRushPayTask(String account, int taskId) {
        if (account == null) {
            return null;
        }

        List<RushPayRW> rushPayRWList = getAllRushPayTask(account);
        int index = -1;
        for (int i = 0; i < rushPayRWList.size(); i++) {
            if (rushPayRWList.get(i).getI_TaskId() == taskId) {
                index = i;
                break;
            }
        }
        if (index == 0) {
            return null;
        } else {
            return rushPayRWList.get(index - 1);
        }
    }

    public RushPayRW getRushPayRW(String account , int taskId) {
        if (account == null || taskId <= 0) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_MeterReader.eq(account), Properties.I_TaskId.eq(taskId));
        List<RushPayRW> rushPayRWList = qb.list();
        if ((rushPayRWList == null) || (rushPayRWList.size() <= 0)) {
            return null;
        }
        return rushPayRWList.get(0);
    }


    public void updateRushPayTaskList(List<RushPayRW> rushPayRWList) {
        if (rushPayRWList == null) {
            return;
        }

        for (RushPayRW rushPayRW : rushPayRWList) {
            QueryBuilder qb = this.queryBuilder();
            qb.where(Properties.I_TaskId.eq(rushPayRW.getI_TaskId()));
            List<RushPayRW> rushPayRWs = qb.list();
            if (rushPayRWs != null && rushPayRWs.size() == 1) {
                RushPayRW rushPayRW1 = rushPayRWs.get(0);
                rushPayRW1.setL_ReceiptTime(rushPayRW.getL_ReceiptTime());
                rushPayRW1.setS_ReceiptRemark(rushPayRW.getS_ReceiptRemark());
                rushPayRW1.setI_ISComplete(rushPayRW.getI_ISComplete());
                rushPayRW1.setI_IsUpload(rushPayRW.getI_IsUpload());
                update(rushPayRW1);
            }
        }
    }

}
