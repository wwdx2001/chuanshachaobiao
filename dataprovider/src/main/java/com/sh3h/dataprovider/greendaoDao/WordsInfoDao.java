package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.WordsInfo;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HOT_WordsInfo.
*/
public class WordsInfoDao extends AbstractDao<WordsInfo, Void> {

    public static final String TABLENAME = "HOT_WordsInfo";

    /**
     * Properties of entity WordsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Wordscode = new Property(1, String.class, "wordscode", false, "WORDSCODE");
        public final static Property Belongcode = new Property(2, String.class, "belongcode", false, "BELONGCODE");
        public final static Property Rootcode = new Property(3, String.class, "rootcode", false, "ROOTCODE");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Wordsid = new Property(5, Integer.class, "wordsid", false, "WORDSID");
        public final static Property Wordname = new Property(6, String.class, "wordname", false, "WORDNAME");
    };


    public WordsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WordsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HOT_WordsInfo' (" + //
                "'ID' INTEGER NOT NULL ," + // 0: id
                "'WORDSCODE' TEXT," + // 1: wordscode
                "'BELONGCODE' TEXT," + // 2: belongcode
                "'ROOTCODE' TEXT," + // 3: rootcode
                "'STATUS' INTEGER," + // 4: status
                "'WORDSID' INTEGER," + // 5: wordsid
                "'WORDNAME' TEXT);"); // 6: wordname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HOT_WordsInfo'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WordsInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String wordscode = entity.getWordscode();
        if (wordscode != null) {
            stmt.bindString(2, wordscode);
        }
 
        String belongcode = entity.getBelongcode();
        if (belongcode != null) {
            stmt.bindString(3, belongcode);
        }
 
        String rootcode = entity.getRootcode();
        if (rootcode != null) {
            stmt.bindString(4, rootcode);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        Integer wordsid = entity.getWordsid();
        if (wordsid != null) {
            stmt.bindLong(6, wordsid);
        }
 
        String wordname = entity.getWordname();
        if (wordname != null) {
            stmt.bindString(7, wordname);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public WordsInfo readEntity(Cursor cursor, int offset) {
        WordsInfo entity = new WordsInfo( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wordscode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // belongcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rootcode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // wordsid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // wordname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WordsInfo entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setWordscode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBelongcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRootcode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setWordsid(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setWordname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WordsInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(WordsInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    public List<WordsInfo> getWordsInfoList() {

        return this.loadAll();

    }
    
}
