package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sh3h.dataprovider.greendaoEntity.NeiFuBZ;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CB_NEIFUBZ.
*/
public class NeiFuBZDao extends AbstractDao<NeiFuBZ, Void> {

    public static final String TABLENAME = "CB_NEIFUBZ";

    /**
     * Properties of entity NeiFuBZ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LX = new Property(0, Integer.class, "LX", false, "LX");
        public final static Property BZ = new Property(1, String.class, "BZ", false, "BZ");
        public final static Property CL = new Property(2, String.class, "CL", false, "CL");
        public final static Property ID = new Property(3, Integer.class, "ID", false, "ID");
        public final static Property DL = new Property(4, String.class, "DL", false, "DL");
    };


    public NeiFuBZDao(DaoConfig config) {
        super(config);
    }
    
    public NeiFuBZDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_NEIFUBZ' (" + //
                "'LX' INTEGER," + // 0: LX
                "'BZ' TEXT," + // 1: BZ
                "'CL' TEXT," + // 2: CL
                "'ID' INTEGER," + // 3: ID
                "'DL' TEXT);"); // 4: DL
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_NEIFUBZ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NeiFuBZ entity) {
        stmt.clearBindings();
 
        Integer LX = entity.getLX();
        if (LX != null) {
            stmt.bindLong(1, LX);
        }
 
        String BZ = entity.getBZ();
        if (BZ != null) {
            stmt.bindString(2, BZ);
        }
 
        String CL = entity.getCL();
        if (CL != null) {
            stmt.bindString(3, CL);
        }
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(4, ID);
        }
 
        String DL = entity.getDL();
        if (DL != null) {
            stmt.bindString(5, DL);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public NeiFuBZ readEntity(Cursor cursor, int offset) {
        NeiFuBZ entity = new NeiFuBZ( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // LX
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BZ
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CL
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // DL
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NeiFuBZ entity, int offset) {
        entity.setLX(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setBZ(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(NeiFuBZ entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(NeiFuBZ entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
