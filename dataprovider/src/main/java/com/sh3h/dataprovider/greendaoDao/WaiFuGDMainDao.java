package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.WaiFuGDDetail;
import com.sh3h.dataprovider.greendaoEntity.WaiFuGDMain;
import com.sh3h.dataprovider.schema.Tables;
import com.sh3h.dataprovider.schema.WaiFuGDMainColumns;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table PDA_WaiFuGDMain.
 */
public class WaiFuGDMainDao extends AbstractDao<WaiFuGDMain, Void> {

    public static final String TABLENAME = "PDA_WaiFuGDMain";

    /**
     * Properties of entity WaiFuGDMain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property I_RENWUBH = new Property(0, int.class, "I_RENWUBH", false, "I_RENWUBH");
        public final static Property I_TYPE = new Property(1, Integer.class, "I_TYPE", false, "I_TYPE");
        public final static Property S_CID = new Property(2, String.class, "S_CID", false, "S_CID");
        public final static Property S_CH = new Property(3, String.class, "S_CH", false, "S_CH");
        public final static Property S_HM = new Property(4, String.class, "S_HM", false, "S_HM");
        public final static Property S_DZ = new Property(5, String.class, "S_DZ", false, "S_DZ");
        public final static Property S_DIANHUAHM = new Property(6, String.class, "S_DIANHUAHM", false, "S_DIANHUAHM");
        public final static Property S_JH_OLD = new Property(7, String.class, "S_JH_OLD", false, "S_JHOLD");
        public final static Property S_JH_NEW = new Property(8, String.class, "S_JH_NEW", false, "S_JHNEW");
        public final static Property D_TIJIAORQ = new Property(9, Integer.class, "D_TIJIAORQ", false, "D_TIJIAORQ");
        public final static Property S_SHENQINGR = new Property(10, String.class, "S_SHENQINGR", false, "S_SHENQINGR");
        public final static Property S_SHENQINGYY = new Property(11, String.class, "S_SHENQINGYY", false, "S_SHENQINGYY");
        public final static Property I_RENKOUS = new Property(12, Integer.class, "I_RENKOUS", false, "I_RENKOUS");
        public final static Property I_YOUHUISL = new Property(13, Integer.class, "I_YOUHUISL", false, "I_YOUHUISL");
        public final static Property I_DUNWEIS = new Property(14, Integer.class, "I_DUNWEIS", false, "I_DUNWEIS");
        public final static Property B_QUANER = new Property(15, Integer.class, "B_QUANER", false, "B_QUANER");
        public final static Property I_SHANGCHUANBZ = new Property(16, Integer.class, "I_SHANGCHUANBZ", false, "I_SHANGCHUANBZ");
        public final static Property I_LAIYUANBH = new Property(17, Integer.class, "I_LAIYUANBH", false, "I_LAIYUANBH");
        public final static Property S_CAOZUOR = new Property(18, String.class, "S_CAOZUOR", false, "S_CAOZUOR");
        public final static Property I_WANCHENGBZ = new Property(19, Integer.class, "I_WANCHENGBZ", false, "I_WANCHENGBZ");
        public final static Property I_HESHIRKS = new Property(20, Integer.class, "I_HESHIRKS", false, "I_HESHIRKS");
        public final static Property I_HESHIDWS = new Property(21, Integer.class, "I_HESHIDWS", false, "I_HESHIDWS");
        public final static Property D_SHIGONGRQ = new Property(22, Integer.class, "D_SHIGONGRQ", false, "D_SHIGONGRQ");
        public final static Property S_HECHAQK = new Property(23, String.class, "S_HECHAQK", false, "S_HECHAQK");
        public final static Property S_SHENHEYJ = new Property(24, String.class, "S_SHENHEYJ", false, "S_SHENHEYJ");
        public final static Property I_SHENPIJG = new Property(25, Integer.class, "I_SHENPIJG", false, "I_SHENPIJG");
        public final static Property S_FUHEYJYY = new Property(26, String.class, "S_FUHEYJYY", false, "S_FUHEYJYY");
        public final static Property S_BEIZHU = new Property(27, String.class, "S_BEIZHU", false, "S_BEIZHU");
        public final static Property S_TIAOXINGM = new Property(28, String.class, "S_TIAOXINGM", false, "S_TIAOXINGM");
        public final static Property S_KEHUQM = new Property(29, String.class, "S_KEHUQM", false, "S_KEHUQM");
        public final static Property S_ZHAOPIANMC = new Property(30, String.class, "S_ZHAOPIANMC", false, "S_ZHAOPIANMC");
        public final static Property S_X1 = new Property(31, String.class, "S_X1", false, "S_X1");
        public final static Property S_Y1 = new Property(32, String.class, "S_Y1", false, "S_Y1");
    };


    public WaiFuGDMainDao(DaoConfig config) {
        super(config);
    }

    public WaiFuGDMainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PDA_WaiFuGDMain' (" + //
                "'I_RENWUBH' INTEGER NOT NULL ," + // 0: I_RENWUBH
                "'I_TYPE' INTEGER," + // 1: I_TYPE
                "'S_CID' TEXT NOT NULL ," + // 2: S_CID
                "'S_CH' TEXT NOT NULL ," + // 3: S_CH
                "'S_HM' TEXT," + // 4: S_HM
                "'S_DZ' TEXT," + // 5: S_DZ
                "'S_DIANHUAHM' TEXT," + // 6: S_DIANHUAHM
                "'S_JHOLD' TEXT," + // 7: S_JH_OLD
                "'S_JHNEW' TEXT," + // 8: S_JH_NEW
                "'D_TIJIAORQ' INTEGER," + // 9: D_TIJIAORQ
                "'S_SHENQINGR' TEXT," + // 10: S_SHENQINGR
                "'S_SHENQINGYY' TEXT," + // 11: S_SHENQINGYY
                "'I_RENKOUS' INTEGER," + // 12: I_RENKOUS
                "'I_YOUHUISL' INTEGER," + // 13: I_YOUHUISL
                "'I_DUNWEIS' INTEGER," + // 14: I_DUNWEIS
                "'B_QUANER' INTEGER," + // 15: B_QUANER
                "'I_SHANGCHUANBZ' INTEGER," + // 16: I_SHANGCHUANBZ
                "'I_LAIYUANBH' INTEGER," + // 17: I_LAIYUANBH
                "'S_CAOZUOR' TEXT," + // 18: S_CAOZUOR
                "'I_WANCHENGBZ' INTEGER," + // 19: I_WANCHENGBZ
                "'I_HESHIRKS' INTEGER," + // 20: I_HESHIRKS
                "'I_HESHIDWS' INTEGER," + // 21: I_HESHIDWS
                "'D_SHIGONGRQ' INTEGER," + // 22: D_SHIGONGRQ
                "'S_HECHAQK' TEXT," + // 23: S_HECHAQK
                "'S_SHENHEYJ' TEXT," + // 24: S_SHENHEYJ
                "'I_SHENPIJG' INTEGER," + // 25: I_SHENPIJG
                "'S_FUHEYJYY' TEXT," + // 26: S_FUHEYJYY
                "'S_BEIZHU' TEXT," + // 27: S_BEIZHU
                "'S_TIAOXINGM' TEXT," + // 28: S_TIAOXINGM
                "'S_KEHUQM' TEXT," + // 29: S_KEHUQM
                "'S_ZHAOPIANMC' TEXT," + // 30: S_ZHAOPIANMC
                "'S_X1' TEXT," + // 31: S_X1
                "'S_Y1' TEXT);"); // 32: S_Y1
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PDA_WaiFuGDMain'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WaiFuGDMain entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getI_RENWUBH());

        Integer I_TYPE = entity.getI_TYPE();
        if (I_TYPE != null) {
            stmt.bindLong(2, I_TYPE);
        }
        stmt.bindString(3, entity.getS_CID());
        stmt.bindString(4, entity.getS_CH());

        String S_HM = entity.getS_HM();
        if (S_HM != null) {
            stmt.bindString(5, S_HM);
        }

        String S_DZ = entity.getS_DZ();
        if (S_DZ != null) {
            stmt.bindString(6, S_DZ);
        }

        String S_DIANHUAHM = entity.getS_DIANHUAHM();
        if (S_DIANHUAHM != null) {
            stmt.bindString(7, S_DIANHUAHM);
        }

        String S_JH_OLD = entity.getS_JH_OLD();
        if (S_JH_OLD != null) {
            stmt.bindString(8, S_JH_OLD);
        }

        String S_JH_NEW = entity.getS_JH_NEW();
        if (S_JH_NEW != null) {
            stmt.bindString(9, S_JH_NEW);
        }

        Integer D_TIJIAORQ = entity.getD_TIJIAORQ();
        if (D_TIJIAORQ != null) {
            stmt.bindLong(10, D_TIJIAORQ);
        }

        String S_SHENQINGR = entity.getS_SHENQINGR();
        if (S_SHENQINGR != null) {
            stmt.bindString(11, S_SHENQINGR);
        }

        String S_SHENQINGYY = entity.getS_SHENQINGYY();
        if (S_SHENQINGYY != null) {
            stmt.bindString(12, S_SHENQINGYY);
        }

        Integer I_RENKOUS = entity.getI_RENKOUS();
        if (I_RENKOUS != null) {
            stmt.bindLong(13, I_RENKOUS);
        }

        Integer I_YOUHUISL = entity.getI_YOUHUISL();
        if (I_YOUHUISL != null) {
            stmt.bindLong(14, I_YOUHUISL);
        }

        Integer I_DUNWEIS = entity.getI_DUNWEIS();
        if (I_DUNWEIS != null) {
            stmt.bindLong(15, I_DUNWEIS);
        }

        Integer B_QUANER = entity.getB_QUANER();
        if (B_QUANER != null) {
            stmt.bindLong(16, B_QUANER);
        }

        Integer I_SHANGCHUANBZ = entity.getI_SHANGCHUANBZ();
        if (I_SHANGCHUANBZ != null) {
            stmt.bindLong(17, I_SHANGCHUANBZ);
        }

        Integer I_LAIYUANBH = entity.getI_LAIYUANBH();
        if (I_LAIYUANBH != null) {
            stmt.bindLong(18, I_LAIYUANBH);
        }

        String S_CAOZUOR = entity.getS_CAOZUOR();
        if (S_CAOZUOR != null) {
            stmt.bindString(19, S_CAOZUOR);
        }

        Integer I_WANCHENGBZ = entity.getI_WANCHENGBZ();
        if (I_WANCHENGBZ != null) {
            stmt.bindLong(20, I_WANCHENGBZ);
        }

        Integer I_HESHIRKS = entity.getI_HESHIRKS();
        if (I_HESHIRKS != null) {
            stmt.bindLong(21, I_HESHIRKS);
        }

        Integer I_HESHIDWS = entity.getI_HESHIDWS();
        if (I_HESHIDWS != null) {
            stmt.bindLong(22, I_HESHIDWS);
        }

        Integer D_SHIGONGRQ = entity.getD_SHIGONGRQ();
        if (D_SHIGONGRQ != null) {
            stmt.bindLong(23, D_SHIGONGRQ);
        }

        String S_HECHAQK = entity.getS_HECHAQK();
        if (S_HECHAQK != null) {
            stmt.bindString(24, S_HECHAQK);
        }

        String S_SHENHEYJ = entity.getS_SHENHEYJ();
        if (S_SHENHEYJ != null) {
            stmt.bindString(25, S_SHENHEYJ);
        }

        Integer I_SHENPIJG = entity.getI_SHENPIJG();
        if (I_SHENPIJG != null) {
            stmt.bindLong(26, I_SHENPIJG);
        }

        String S_FUHEYJYY = entity.getS_FUHEYJYY();
        if (S_FUHEYJYY != null) {
            stmt.bindString(27, S_FUHEYJYY);
        }

        String S_BEIZHU = entity.getS_BEIZHU();
        if (S_BEIZHU != null) {
            stmt.bindString(28, S_BEIZHU);
        }

        String S_TIAOXINGM = entity.getS_TIAOXINGM();
        if (S_TIAOXINGM != null) {
            stmt.bindString(29, S_TIAOXINGM);
        }

        String S_KEHUQM = entity.getS_KEHUQM();
        if (S_KEHUQM != null) {
            stmt.bindString(30, S_KEHUQM);
        }

        String S_ZHAOPIANMC = entity.getS_ZHAOPIANMC();
        if (S_ZHAOPIANMC != null) {
            stmt.bindString(31, S_ZHAOPIANMC);
        }

        String S_X1 = entity.getS_X1();
        if (S_X1 != null) {
            stmt.bindString(32, S_X1);
        }

        String S_Y1 = entity.getS_Y1();
        if (S_Y1 != null) {
            stmt.bindString(33, S_Y1);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public WaiFuGDMain readEntity(Cursor cursor, int offset) {
        WaiFuGDMain entity = new WaiFuGDMain( //
                cursor.getInt(offset + 0), // I_RENWUBH
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // I_TYPE
                cursor.getString(offset + 2), // S_CID
                cursor.getString(offset + 3), // S_CH
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // S_HM
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // S_DZ
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // S_DIANHUAHM
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // S_JH_OLD
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // S_JH_NEW
                cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // D_TIJIAORQ
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // S_SHENQINGR
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // S_SHENQINGYY
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // I_RENKOUS
                cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // I_YOUHUISL
                cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // I_DUNWEIS
                cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // B_QUANER
                cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // I_SHANGCHUANBZ
                cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // I_LAIYUANBH
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // S_CAOZUOR
                cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // I_WANCHENGBZ
                cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // I_HESHIRKS
                cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // I_HESHIDWS
                cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // D_SHIGONGRQ
                cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // S_HECHAQK
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // S_SHENHEYJ
                cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // I_SHENPIJG
                cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // S_FUHEYJYY
                cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // S_BEIZHU
                cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // S_TIAOXINGM
                cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // S_KEHUQM
                cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // S_ZHAOPIANMC
                cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // S_X1
                cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32) // S_Y1
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WaiFuGDMain entity, int offset) {
        entity.setI_RENWUBH(cursor.getInt(offset + 0));
        entity.setI_TYPE(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setS_CID(cursor.getString(offset + 2));
        entity.setS_CH(cursor.getString(offset + 3));
        entity.setS_HM(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_DZ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setS_DIANHUAHM(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setS_JH_OLD(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setS_JH_NEW(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setD_TIJIAORQ(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setS_SHENQINGR(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setS_SHENQINGYY(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setI_RENKOUS(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setI_YOUHUISL(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setI_DUNWEIS(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setB_QUANER(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setI_SHANGCHUANBZ(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setI_LAIYUANBH(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setS_CAOZUOR(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setI_WANCHENGBZ(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setI_HESHIRKS(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setI_HESHIDWS(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setD_SHIGONGRQ(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setS_HECHAQK(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setS_SHENHEYJ(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setI_SHENPIJG(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setS_FUHEYJYY(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setS_BEIZHU(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setS_TIAOXINGM(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setS_KEHUQM(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setS_ZHAOPIANMC(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setS_X1(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setS_Y1(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WaiFuGDMain entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(WaiFuGDMain entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 插入数据
     */
    public boolean insertData(WaiFuGDMain waiFuGDMain) {
        if (this.insertOrReplace(waiFuGDMain) == 0) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 修改外复工单主表
     */
    public boolean updateWaiFuGDMain(int renWuBH, WaiFuGDMain waiFuGDMain,
                                     int type) {
        QueryBuilder qb1 = this.queryBuilder();
        qb1.where(Properties.I_RENWUBH.eq(renWuBH));
        WaiFuGDMain oldWaiFuGDMain = (WaiFuGDMain) qb1.list().get(0);

        QueryBuilder<WaiFuGDMain> qb2 = this.queryBuilder();
        DeleteQuery<WaiFuGDMain> bd = qb2.where(Properties.I_RENWUBH.eq(renWuBH)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();

        switch (type){
            /**
             * 21:用水性质修改
             */
            case WaiFuGDMainColumns.YONGSHUIXZXG:
                oldWaiFuGDMain.setI_SHENPIJG(waiFuGDMain.getI_SHENPIJG());
                oldWaiFuGDMain.setS_BEIZHU(waiFuGDMain.getS_BEIZHU());
                break;
            /**
             * 22:人口变更
             */
            case WaiFuGDMainColumns.RENKOUSHUBG:
                oldWaiFuGDMain.setI_HESHIRKS(waiFuGDMain.getI_HESHIRKS());
                oldWaiFuGDMain.setI_SHENPIJG(waiFuGDMain.getI_SHENPIJG());
                oldWaiFuGDMain.setS_BEIZHU(waiFuGDMain.getS_BEIZHU());
                break;
            /**
             * 23:公厕
             */
            case WaiFuGDMainColumns.GONGCEYHSP:
                oldWaiFuGDMain.setI_HESHIDWS(waiFuGDMain.getI_HESHIDWS());
                oldWaiFuGDMain.setI_SHENPIJG(WaiFuGDMainColumns.SHENPIJG_OK);
                break;
            /**
             * 24:用水比例调整
             */
            case WaiFuGDMainColumns.YONGSHUIBILTZ:
                oldWaiFuGDMain.setS_BEIZHU(waiFuGDMain.getS_BEIZHU());
                oldWaiFuGDMain.setI_SHENPIJG(waiFuGDMain.getI_SHENPIJG());
                break;
            /**
             * 25:核查
             */
            case WaiFuGDMainColumns.SHUIBIAOZZHC:
                oldWaiFuGDMain.setS_HECHAQK(waiFuGDMain.getS_HECHAQK());
                oldWaiFuGDMain.setS_SHENHEYJ(waiFuGDMain.getS_SHENHEYJ());
                oldWaiFuGDMain.setI_SHENPIJG(WaiFuGDMainColumns.SHENPIJG_OK);
                break;
            /**
             * 26:远传表自传
             */
            case WaiFuGDMainColumns.YUANCHUANBZZ:
                oldWaiFuGDMain.setI_SHENPIJG(WaiFuGDMainColumns.SHENPIJG_OK);
                break;
            /**
             * 27:调减水量
             */
            case WaiFuGDMainColumns.TIAOJIANSL:
                oldWaiFuGDMain.setI_SHENPIJG(waiFuGDMain.getI_SHENPIJG());
                oldWaiFuGDMain.setS_FUHEYJYY(waiFuGDMain.getS_FUHEYJYY());
                break;
            default:
                break;
        }

        if (this.insertOrReplace(oldWaiFuGDMain) == 0) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 插入客户签名路径
     *
     * @param renWuBH
     *            任务编号
     * @param signaturePath
     *            图片路径
     */
    public void updateSignaturePathToWaiFuMain(int renWuBH, String signaturePath) {
        QueryBuilder qb1 = this.queryBuilder();
        qb1.where(Properties.I_RENWUBH.eq(renWuBH));
        WaiFuGDMain oldWaiFuGDMain = (WaiFuGDMain) qb1.list().get(0);

        QueryBuilder<WaiFuGDMain> qb2 = this.queryBuilder();
        DeleteQuery<WaiFuGDMain> bd = qb2.where(Properties.I_RENWUBH.eq(renWuBH)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();

        oldWaiFuGDMain.setS_KEHUQM(signaturePath);
        this.insertOrReplace(oldWaiFuGDMain);
    }

    /**
     * 保存照片名称
     *
     * @param renWuBH
     *            任务编号
     * @param imgPath
     *            图片名称
     */
    public void updateImgPathToWaiFuMain(int renWuBH, String imgPath) {
        QueryBuilder qb1 = this.queryBuilder();
        qb1.where(Properties.I_RENWUBH.eq(renWuBH));
        List<WaiFuGDMain> list =  qb1.list();
        String fileName = "";
        if (list != null){
            for (int i = 0;i<list.size();i++){
                fileName = list.get(i).getS_ZHAOPIANMC();
            }
        }
        StringBuilder stu = new StringBuilder();
        if (fileName != null && !fileName.equals("")) {
            stu.append(fileName);
            stu.append(",");
        }
        stu.append(imgPath);

        WaiFuGDMain waiFuGDMain = list.get(0);
        waiFuGDMain.setS_ZHAOPIANMC(stu.toString());

        QueryBuilder<WaiFuGDMain> qb2 = this.queryBuilder();
        DeleteQuery<WaiFuGDMain> bd = qb2.where(Properties.I_RENWUBH.eq(renWuBH)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();

        this.insertOrReplace(waiFuGDMain);

    }

    /**
     * 获取照片名称
     *
     * @param renWuBH
     *            任务编号
     * @return String 如“path,path”；
     */
    public String getWaiFuMainImgName(int renWuBH) {
        QueryBuilder qb1 = this.queryBuilder();
        qb1.where(Properties.I_RENWUBH.eq(renWuBH));
        List<WaiFuGDMain> list =  qb1.list();
        if (list == null){
            return null;
        }
        String fileName = list.get(0).getS_ZHAOPIANMC();
        return fileName;
    }

    /**
     * 修改WaiFuMain上传标志
     */
    public void updateWaiFuMainShangChuanZT(String account, WaiFuGDMain wfm) {
        QueryBuilder qb1 = this.queryBuilder();
        qb1.where(Properties.S_CAOZUOR.eq(account),Properties.I_RENWUBH.eq(wfm.getI_RENWUBH()));
        List<WaiFuGDMain> list =  qb1.list();

        QueryBuilder<WaiFuGDMain> qb2 = this.queryBuilder();
        DeleteQuery<WaiFuGDMain> bd = qb2.where(Properties.S_CAOZUOR.eq(account),Properties.I_RENWUBH.eq(wfm.getI_RENWUBH())).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();

        WaiFuGDMain waiFuGDMain = list.get(0);
        waiFuGDMain.setI_SHANGCHUANBZ(WaiFuGDMainColumns.SHANGCHUAN_OK);

        this.insertOrReplace(waiFuGDMain);
    }

    /**
     * 获取操作人对应的的所有外复工单任务
     *
     * @param account
     *            操作人
     */
    public List<WaiFuGDMain> getWaiFuGDMainList(String account) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CAOZUOR.eq(account));
        qb.orderAsc(Properties.I_RENWUBH);
        List<WaiFuGDMain> list =  qb.list();

        return list;
    }

    /**
     * 获取操作人对应的的未完成的外复工单任务
     *
     * @param account
     *            操作人
     */
    public List<WaiFuGDMain> getWaiFuGDMainWeiWanChengList(String account) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CAOZUOR.eq(account),Properties.I_WANCHENGBZ.eq(0));
        qb.orderAsc(Properties.I_RENWUBH);
        List<WaiFuGDMain> list =  qb.list();

        return list;
    }

    /**
     * 获取操作人对应的的所有已完成，未上传的外复工单任务
     *
     * @param account
     *            操作人
     */
    public List<WaiFuGDMain> getWeiShangChuanWaiFuGDMainList(String account) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CAOZUOR.eq(account),Properties.I_WANCHENGBZ.eq(1),Properties.I_SHANGCHUANBZ.eq(0));
        qb.orderAsc(Properties.I_RENWUBH);
        List<WaiFuGDMain> list =  qb.list();
        return list;
    }

    /**
     * 根据任务编号查找renWuBHAll不存在本地的任务
     *
     * @param account
     *            抄表员
     * @return String
     */
    public String selectNonentityWaiFuGDBH(String account, String renWuBHAll) {
        if (renWuBHAll == null)
            return null;
        String[] renWuBH = renWuBHAll.split(",");
        StringBuilder nonentityRenWuBH = new StringBuilder();
        QueryBuilder qb = this.queryBuilder();
        for (int i = 0; i < renWuBH.length; i++){
            qb.where(Properties.S_CAOZUOR.eq(account),Properties.I_RENWUBH.eq(renWuBH[i]));
            if (qb.count()==0){
                nonentityRenWuBH.append(renWuBH[i] + ",");
            }
        }
        return nonentityRenWuBH.length() == 0 ? nonentityRenWuBH.toString()
                : nonentityRenWuBH.substring(0, nonentityRenWuBH.length() - 1)
                .toString();
    }

    /**
     * 删除本地不需要的任务编号下所有的外复工单信息
     *
     * @param account
     *            操作员
     * @param AllRenWuBH
     *            所有需要的任务编号
     */
    public void deleteNotExistWaiFuGD(String account, String AllRenWuBH) {
        QueryBuilder<WaiFuGDMain> qb = this.queryBuilder();
        DeleteQuery<WaiFuGDMain> bd;
        if (AllRenWuBH == null) {
            return;
        }
        else if (AllRenWuBH.equals("")) {
            bd = qb.where(Properties.S_CAOZUOR.eq(account)).buildDelete();
            bd.executeDeleteWithoutDetachingEntities();
            return;
        }
        bd = qb.where(Properties.I_RENWUBH.notIn(AllRenWuBH),Properties.S_CAOZUOR.eq(account)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 获取操作人对应的的所有外复工单任务
     *
     * @param renWuBH
     *            任务编号
     */
    public WaiFuGDMain getWaiFuGDMain(int renWuBH) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RENWUBH.eq(renWuBH));
        if (qb.list() == null){
            return null;
        }
        WaiFuGDMain waiFuGDMain = (WaiFuGDMain) qb.list().get(0);
        return waiFuGDMain;
    }

    /**
     * 判断是否存在已存在的外复工单数据，不存在则插入，存在则更改
     *
     * @param gd
     *            表务工单实体类
     */
    public void insertAndUpdateWaiFuMainGD(WaiFuGDMain gd) {
        int renWuBH = gd.getI_RENWUBH();
        boolean flag = isExistwaiFuMainGD(renWuBH);
        if (flag) {
            updateWaiFuMainGD(gd);
        } else {
            insertData(gd);
        }
    }

    /**
     * 更改本地外复工单数据
     *
     * @param gd
     *            表务工单实体
     */
    private void updateWaiFuMainGD(WaiFuGDMain gd) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RENWUBH.eq(gd.getI_RENWUBH()));
        if (qb.count()== 0){
            QueryBuilder<WaiFuGDMain> qb2 = this.queryBuilder();
            DeleteQuery<WaiFuGDMain> bd = qb2.where(Properties.I_RENWUBH.eq(gd.getI_RENWUBH())).buildDelete();
            bd.executeDeleteWithoutDetachingEntities();
        }
        this.insertOrReplace(gd);
    }

    /**
     * 判断本地是否存在对应的任务编号外复工单数据
     *
     * @param renWuBH
     *            任务编号
     * @return boolean
     */
    private boolean isExistwaiFuMainGD(int renWuBH) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RENWUBH.eq(renWuBH));
        boolean flag = false;
        if (qb.count() > 0){
            flag = true;
        }
        return flag;
    }

    /**
     * 获取未抄的外复工单数据总条数
     *
     * @param account
     *            操作员
     * @return int
     */
    public int getWeiWanChengWFGDCount(String account) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CAOZUOR.eq(account),Properties.I_WANCHENGBZ.eq(0));
        return (int) qb.count();
    }

    /**
     * 获取已抄未上传的外复工单总条数
     *
     * @param account
     *            操作员
     * @return int
     */
    public int getWeiShangChuanWaiFuGDCount(String account) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CAOZUOR.eq(account),Properties.I_SHANGCHUANBZ.eq(0),Properties.I_SHANGCHUANBZ.eq(1));
        return (int) qb.count();
    }

    /**
     * 删除外复工单工单
     */
    public void deleteWaiFuGDMainByBH(int renwubh) {
        QueryBuilder<WaiFuGDMain> qb = this.queryBuilder();
        DeleteQuery<WaiFuGDMain> bd = qb.where(Properties.I_RENWUBH.eq(renwubh)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }



}
