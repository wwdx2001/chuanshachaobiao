package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.RenwuXX;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PDA_RENWUXX.
*/
public class RenwuXXDao extends AbstractDao<RenwuXX, Void> {

    public static final String TABLENAME = "PDA_RENWUXX";

    /**
     * Properties of entity RenwuXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property I_RENWUBH = new Property(1, Integer.class, "I_RENWUBH", false, "I_RENWUBH");
        public final static Property I_TYPE = new Property(2, Integer.class, "I_TYPE", false, "I_TYPE");
        public final static Property D_CREATESJ = new Property(3, Integer.class, "D_CREATESJ", false, "D_CREATESJ");
        public final static Property D_PAIFASJ = new Property(4, Integer.class, "D_PAIFASJ", false, "D_PAIFASJ");
        public final static Property D_HUITIANSJ = new Property(5, Integer.class, "D_HUITIANSJ", false, "D_HUITIANSJ");
        public final static Property I_STAIE = new Property(6, Integer.class, "I_STAIE", false, "I_STAIE");
        public final static Property S_ACCOUNT = new Property(7, String.class, "S_ACCOUNT", false, "S_ACCOUNT");
        public final static Property I_SUBTYPE = new Property(8, Integer.class, "I_SUBTYPE", false, "I_SUBTYPE");
    };


    public RenwuXXDao(DaoConfig config) {
        super(config);
    }
    
    public RenwuXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PDA_RENWUXX' (" + //
                "'ID' INTEGER," + // 0: ID
                "'I_RENWUBH' INTEGER," + // 1: I_RENWUBH
                "'I_TYPE' INTEGER," + // 2: I_TYPE
                "'D_CREATESJ' INTEGER," + // 3: D_CREATESJ
                "'D_PAIFASJ' INTEGER," + // 4: D_PAIFASJ
                "'D_HUITIANSJ' INTEGER," + // 5: D_HUITIANSJ
                "'I_STAIE' INTEGER," + // 6: I_STAIE
                "'S_ACCOUNT' TEXT," + // 7: S_ACCOUNT
                "'I_SUBTYPE' INTEGER);"); // 8: I_SUBTYPE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PDA_RENWUXX'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RenwuXX entity) {
        stmt.clearBindings();
 
        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        Integer I_RENWUBH = entity.getI_RENWUBH();
        if (I_RENWUBH != null) {
            stmt.bindLong(2, I_RENWUBH);
        }
 
        Integer I_TYPE = entity.getI_TYPE();
        if (I_TYPE != null) {
            stmt.bindLong(3, I_TYPE);
        }
 
        Integer D_CREATESJ = entity.getD_CREATESJ();
        if (D_CREATESJ != null) {
            stmt.bindLong(4, D_CREATESJ);
        }
 
        Integer D_PAIFASJ = entity.getD_PAIFASJ();
        if (D_PAIFASJ != null) {
            stmt.bindLong(5, D_PAIFASJ);
        }
 
        Integer D_HUITIANSJ = entity.getD_HUITIANSJ();
        if (D_HUITIANSJ != null) {
            stmt.bindLong(6, D_HUITIANSJ);
        }
 
        Integer I_STAIE = entity.getI_STAIE();
        if (I_STAIE != null) {
            stmt.bindLong(7, I_STAIE);
        }
 
        String S_ACCOUNT = entity.getS_ACCOUNT();
        if (S_ACCOUNT != null) {
            stmt.bindString(8, S_ACCOUNT);
        }
 
        Integer I_SUBTYPE = entity.getI_SUBTYPE();
        if (I_SUBTYPE != null) {
            stmt.bindLong(9, I_SUBTYPE);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public RenwuXX readEntity(Cursor cursor, int offset) {
        RenwuXX entity = new RenwuXX( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // I_RENWUBH
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // I_TYPE
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // D_CREATESJ
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // D_PAIFASJ
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // D_HUITIANSJ
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // I_STAIE
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // S_ACCOUNT
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // I_SUBTYPE
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RenwuXX entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setI_RENWUBH(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setI_TYPE(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setD_CREATESJ(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setD_PAIFASJ(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setD_HUITIANSJ(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setI_STAIE(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setS_ACCOUNT(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setI_SUBTYPE(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(RenwuXX entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(RenwuXX entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    /**
     * 删除服务器存在本地不存在的任务信�?
     *
     * @param account
     *            抄表�?
     *            服务器任务编�?
     */
    public void deleteRenWuXX(String account) {
        QueryBuilder<RenwuXX> qb = this.queryBuilder();
        DeleteQuery<RenwuXX> bd = qb.where(Properties.S_ACCOUNT.eq(account)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 删除任务信息
     *
     */
    public void deleteRenWuXXByBH(int renwubh) {
        QueryBuilder<RenwuXX> qb = this.queryBuilder();
        DeleteQuery<RenwuXX> bd = qb.where(Properties.I_RENWUBH.eq(renwubh)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 插入工单任务
     *
     * @param rw
     *            工单任务
     */
    public void insertRenWuXX(RenwuXX rw) {
        this.insertOrReplace(rw);
    }

    /**
     * 获取所有表务工单任务编�?
     *
     * @return String
     */
    public String getAllRenWuXXRenWuBH(String account) {
        QueryBuilder<RenwuXX> qb = this.queryBuilder();
        qb.where(Properties.I_TYPE.eq(3),Properties.S_ACCOUNT.eq(account));
        List<RenwuXX> list = qb.list();
        StringBuilder stu = new StringBuilder();
        for (int i = 0;i<list.size();i++){
            stu.append(list.get(i).getI_RENWUBH());
            stu.append(",");
        }
        String renWuBH = stu.toString();
        if (!renWuBH.equals("")) {
            return renWuBH.substring(0, stu.length() - 1).toString();
        }
        return renWuBH;
    }

    /**
     * 获取所有延迟任务编�?
     *
     * @return String
     */
    public String getAllRenWuXXYanChiBH(String account) {
        QueryBuilder<RenwuXX> qb = this.queryBuilder();
        qb.where(Properties.I_TYPE.in(1, 2),Properties.S_ACCOUNT.eq(account));
        List<RenwuXX> list = qb.list();

        StringBuilder stu = new StringBuilder();
        for (int i = 0;i<list.size();i++){
            stu.append(list.get(i).getI_RENWUBH());
            stu.append(",");
        }
        String renWuBH = stu.toString();
        if (!renWuBH.equals("")) {
            return renWuBH.substring(0, stu.length() - 1).toString();
        }
        return renWuBH;
    }

    /**
     * 获取所有外复工单任务编�?
     *
     * @return String
     */
    public String getAllRenWuXXWaiFuGDBH(String account) {
        QueryBuilder<RenwuXX> qb = this.queryBuilder();
        qb.where(Properties.I_TYPE.eq(4),Properties.S_ACCOUNT.eq(account));
        List<RenwuXX> list = qb.list();
        StringBuilder stu = new StringBuilder();
        for (int i = 0;i<list.size();i++){
            stu.append(list.get(i).getI_RENWUBH());
            stu.append(",");
        }
        String renWuBH = stu.toString();
        if (!renWuBH.equals("")) {
            return renWuBH.substring(0, stu.length() - 1).toString();
        }
        return renWuBH;
    }
}
