package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.dataprovider.greendaoEntity.JiChaRW;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MR_JiChaRW.
 */
public class JiChaRWDao extends AbstractDao<JiChaRW, Long> {

    public static final String TABLENAME = "MR_JiChaRW";

    /**
     * Properties of entity JiChaRW.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", true, "ID");
        public final static Property I_RenWuBH = new Property(1, int.class, "I_RenWuBH", false, "I_RENWUBH");
        public final static Property S_ChaoBiaoYBH = new Property(2, String.class, "S_ChaoBiaoYBH", false, "S_CHAOBIAOYBH");
        public final static Property S_ChaoBiaoYXM = new Property(3, String.class, "S_ChaoBiaoYXM", false, "S_CHAOBIAOYXM");
        public final static Property D_PaiFaSJ = new Property(4, Long.class, "D_PaiFaSJ", false, "D_PAIFASJ");
        public final static Property I_ZhangWuNY = new Property(5, int.class, "I_ZhangWuNY", false, "I_ZHANGWUNY");
        public final static Property I_GongCi = new Property(6, int.class, "I_GongCi", false, "I_GONGCI");
        public final static Property S_ST = new Property(7, String.class, "S_ST", false, "S_ST");
        public final static Property I_ZongShu = new Property(8, int.class, "I_ZongShu", false, "I_ZONGSHU");
        public final static Property I_YiChaoShu = new Property(9, int.class, "I_YiChaoShu", false, "I_YICHAOSHU");
        public final static Property I_TongBuBZ = new Property(10, int.class, "I_TongBuBZ", false, "I_TONGBUBZ");
    }

    ;


    public JiChaRWDao(DaoConfig config) {
        super(config);
    }

    public JiChaRWDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MR_JiChaRW' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: ID
                "'I_RENWUBH' INTEGER," + // 1: I_RenWuBH
                "'S_CHAOBIAOYBH' TEXT," + // 2: S_ChaoBiaoYBH
                "'S_CHAOBIAOYXM' TEXT," + // 3: S_ChaoBiaoYXM
                "'D_PAIFASJ' INTEGER," + // 4: D_PaiFaSJ
                "'I_ZHANGWUNY' INTEGER," + // 5: I_ZhangWuNY
                "'I_GONGCI' INTEGER," + // 6: I_GongCi
                "'S_ST' TEXT," + // 7: S_ST
                "'I_ZONGSHU' INTEGER," + // 8: I_ZongShu
                "'I_YICHAOSHU' INTEGER," + // 9: I_YiChaoShu
                "'I_TONGBUBZ' INTEGER);"); // 10: I_TongBuBZ
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MR_JiChaRW'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, JiChaRW entity) {
        stmt.clearBindings();

        if (entity.getID() != -1) {
            stmt.bindLong(1, entity.getID());
        }

        int I_RenWuBH = entity.getI_RenWuBH();
        stmt.bindLong(2, I_RenWuBH);

        String S_ChaoBiaoYBH = entity.getS_ChaoBiaoYBH();
        if (S_ChaoBiaoYBH != null) {
            stmt.bindString(3, S_ChaoBiaoYBH);
        }

        String S_ChaoBiaoYXM = entity.getS_ChaoBiaoYXM();
        if (S_ChaoBiaoYXM != null) {
            stmt.bindString(4, S_ChaoBiaoYXM);
        }

        Long D_PaiFaSJ = entity.getD_PaiFaSJ();
        stmt.bindLong(5, D_PaiFaSJ);

        int I_ZhangWuNY = entity.getI_ZhangWuNY();
        stmt.bindLong(6, I_ZhangWuNY);

        int I_GongCi = entity.getI_GongCi();
        stmt.bindLong(7, I_GongCi);

        String S_ST = entity.getS_ST();
        if (S_ST != null) {
            stmt.bindString(8, S_ST);
        }

        int I_ZongShu = entity.getI_ZongShu();
        stmt.bindLong(9, I_ZongShu);

        int I_YiChaoShu = entity.getI_YiChaoShu();
        stmt.bindLong(10, I_YiChaoShu);

        int I_TongBuBZ = entity.getI_TongBuBZ();
        stmt.bindLong(11, I_TongBuBZ);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public JiChaRW readEntity(Cursor cursor, int offset) {
        JiChaRW entity = new JiChaRW( //
                cursor.getInt(offset + 0), // ID
                cursor.isNull(offset + 1) ? 0 : cursor.getInt(offset + 1), // I_RenWuBH
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_ChaoBiaoYBH
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_ChaoBiaoYXM
                cursor.isNull(offset + 4) ? 0 : cursor.getLong(offset + 4), // D_PaiFaSJ
                cursor.isNull(offset + 5) ? 0 : cursor.getInt(offset + 5), // I_ZhangWuNY
                cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6), // I_GongCi
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // S_ST
                cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8), // I_ZongShu
                cursor.isNull(offset + 9) ? 0 : cursor.getInt(offset + 9), // I_YiChaoShu
                cursor.isNull(offset + 10) ? 0 : cursor.getInt(offset + 10) // I_TongBuBZ
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, JiChaRW entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setI_RenWuBH(cursor.isNull(offset + 1) ? 0 : cursor.getInt(offset + 1));
        entity.setS_ChaoBiaoYBH(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_ChaoBiaoYXM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setD_PaiFaSJ(cursor.isNull(offset + 4) ? 0 : cursor.getLong(offset + 4));
        entity.setI_ZhangWuNY(cursor.isNull(offset + 5) ? 0 : cursor.getInt(offset + 5));
        entity.setI_GongCi(cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6));
        entity.setS_ST(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setI_ZongShu(cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8));
        entity.setI_YiChaoShu(cursor.isNull(offset + 9) ? 0 : cursor.getInt(offset + 9));
        entity.setI_TongBuBZ(cursor.isNull(offset + 10) ? 0 : cursor.getInt(offset + 10));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(JiChaRW entity, long rowId) {
//        entity.setID(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(JiChaRW entity) {
        if (entity != null) {
            return (long) entity.getID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }


    /**
     * 查询chaoBiaoRW表中任务，根据传入的since，count决定读取所需要的抄表任务
     *
     * @param chaoBiaoYBH
     * @return List<ChaoBiaoRW> 集合
     */
    public List<JiChaRW> get(String chaoBiaoYBH) {
        if (chaoBiaoYBH == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH));
        qb.orderDesc(Properties.I_ZhangWuNY);
        qb.orderAsc(Properties.I_RenWuBH);
        return qb.list();

    }

    /**
     * 添加抄表任务
     */
    public boolean insertData(JiChaRW jiChaRW) {
        if (jiChaRW == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(jiChaRW.getS_ChaoBiaoYBH()),
                Properties.I_RenWuBH.eq(jiChaRW.getI_RenWuBH())
//                Properties.S_CH.eq(jiChaRW.getS_CH())
        );
        List<JiChaRW> jiChaRWList = qb.list();
        if ((jiChaRWList != null) && (jiChaRWList.size() > 0)) {//再次从服务器下载任务时，更新已存在任务的总数、已抄数
            JiChaRW mJiChaRW = jiChaRWList.get(0);
            mJiChaRW.setI_ZongShu(jiChaRW.getI_ZongShu());
            mJiChaRW.setI_YiChaoShu(jiChaRW.getI_YiChaoShu());

            if (this.insertOrReplace(mJiChaRW) == 0) {
                return false;
            } else {
                return true;
            }
        }
        jiChaRW.setID(-1);
        if (this.insert(jiChaRW) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public boolean delectJiChaRW(String account, int taskId) {
        if (account == null) {
            return false;
        }

        QueryBuilder<JiChaRW> qb = this.queryBuilder();
        DeleteQuery<JiChaRW> dq = qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(taskId)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
        return true;
    }

    public List<JiChaRW> getRemovedJiChaRW(String account, List<String> renWuBHList) {
        if (account == null || renWuBHList == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.notIn(renWuBHList));
        return qb.list();
    }

    /**
     * 根据gongCi获取本地数据对应的单条抄表任务
     */
    public JiChaRW getJiChaRW(String account, int taskId) {
        if ((account == null) || (taskId <= 0)) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(taskId));

        List<JiChaRW> jiChaRWs = qb.list();
        if ((jiChaRWs == null) || (jiChaRWs.size() <= 0)) {
            return null;
        }

        return jiChaRWs.get(0);
    }

    public boolean updateJiChaRW(String account, int renwuBH, boolean needSync) {
        if (account == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(renwuBH));
        List<JiChaRW> jiChaRWList = qb.list();
        if ((jiChaRWList == null) || (jiChaRWList.size() != 1)) {
            return false;
        }

        JiChaRW jiChaRW = jiChaRWList.get(0);
        jiChaRW.setI_TongBuBZ(needSync ? 1 : 0);
        update(jiChaRW);
        return true;
    }

    /**
     * 修改稽查任务
     */
    public boolean updateJiChaRW(JiChaRW jiChaRW) {
        if (jiChaRW == null) {
            return false;
        }

        if (this.insertOrReplace(jiChaRW) == 0) {
            return false;
        } else {
            return true;
        }
    }

}
