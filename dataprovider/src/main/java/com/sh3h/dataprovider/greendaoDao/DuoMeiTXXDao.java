package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

import com.sh3h.dataprovider.greendaoEntity.DuoMeiTXX;
import com.sh3h.mobileutil.util.TextUtil;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CB_DuoMeiTXX.
 */
public class DuoMeiTXXDao extends AbstractDao<DuoMeiTXX, Long> {

    public static final String TABLENAME = "CB_DuoMeiTXX";


    /**
     * Properties of entity DuoMeiTXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", true, "ID");
        public final static Property S_CID = new Property(1, String.class, "S_CID", false, "S_CID");
        public final static Property I_WENJIANLX = new Property(2, int.class, "I_WENJIANLX", false, "I_WENJIANLX");
        public final static Property S_WENJIANLJ = new Property(3, String.class, "S_WENJIANLJ", false, "S_WENJIANLJ");
        public final static Property B_WENJIANNR = new Property(4, boolean.class, "B_WENJIANNR", false, "B_WENJIANNR");
        public final static Property S_WENJIANMC = new Property(5, String.class, "S_WENJIANMC", false, "S_WENJIANMC");
        public final static Property I_CHAOBIAOID = new Property(6, int.class, "I_CHAOBIAOID", false, "I_CHAOBIAOID");
        public final static Property I_X = new Property(7, int.class, "I_X", false, "I_X");
        public final static Property I_Y = new Property(8, int.class, "I_Y", false, "I_Y");
        public final static Property S_BEIZHU = new Property(9, String.class, "S_BEIZHU", false, "S_BEIZHU");
        public final static Property I_SHANGCHUANBZ = new Property(10, int.class, "I_SHANGCHUANBZ", false, "I_SHANGCHUANBZ");
        public final static Property I_TYPE = new Property(11, int.class, "I_TYPE", false, "I_TYPE");
        public final static Property S_CH = new Property(12, String.class, "S_CH", false, "S_CH");
        public final static Property S_ACCOUNT = new Property(13, String.class, "S_ACCOUNT", false, "S_ACCOUNT");
    }

    public DuoMeiTXXDao(DaoConfig config) {
        super(config);
    }

    public DuoMeiTXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_DuoMeiTXX' (" + //
                "'ID' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "'S_CID' TEXT NOT NULL ," + // 1: S_CID
                "'I_WENJIANLX' INTEGER," + // 2: I_WENJIANLX
                "'S_WENJIANLJ' TEXT," + // 3: S_WENJIANLJ
                "'B_WENJIANNR' BLOB," + // 4: B_WENJIANNR
                "'S_WENJIANMC' TEXT," + // 5: S_WENJIANMC
                "'I_CHAOBIAOID' INTEGER NOT NULL ," + // 6: I_CHAOBIAOID
                "'I_X' INTEGER," + // 7: I_X
                "'I_Y' INTEGER," + // 8: I_Y
                "'S_BEIZHU' TEXT," + // 9: S_BEIZHU
                "'I_SHANGCHUANBZ' INTEGER," + // 10: I_SHANGCHUANBZ
                "'I_TYPE' INTEGER," + // 11: I_TYPE
                "'S_CH' TEXT," + // 12: S_CH
                "'S_ACCOUNT' TEXT);"); // 13: S_ACCOUNT
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_DuoMeiTXX'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, DuoMeiTXX entity) {
        stmt.clearBindings();
        int id = entity.getID();
        if (id != -1) {
            stmt.bindLong(1, id);
        }

        stmt.bindString(2, entity.getS_CID());

        int I_WENJIANLX = entity.getI_WENJIANLX();
        //if (I_WENJIANLX != null) {
        stmt.bindLong(3, I_WENJIANLX);
        //}

        String S_WENJIANLJ = entity.getS_WENJIANLJ();
        if (S_WENJIANLJ != null) {
            stmt.bindString(4, S_WENJIANLJ);
        }

        String B_WENJIANNR = entity.getB_WENJIANNR();
        if (B_WENJIANNR != null) {
            stmt.bindBlob(5, B_WENJIANNR.getBytes());
        }

        String S_WENJIANMC = entity.getS_WENJIANMC();
        if (S_WENJIANMC != null) {
            stmt.bindString(6, S_WENJIANMC);
        }
        stmt.bindLong(7, entity.getI_CHAOBIAOID());

        int I_X = entity.getI_X();
        //if (I_X != null) {
        stmt.bindLong(8, I_X);
        //}

        int I_Y = entity.getI_Y();
        //if (I_Y != null) {
        stmt.bindLong(9, I_Y);
        //}

        String S_BEIZHU = entity.getS_BEIZHU();
        if (S_BEIZHU != null) {
            stmt.bindString(10, S_BEIZHU);
        }

        int I_SHANGCHUANBZ = entity.getI_SHANGCHUANBZ();
        //if (I_SHANGCHUANBZ != null) {
        stmt.bindLong(11, I_SHANGCHUANBZ);
        //}

        int I_TYPE = entity.getI_TYPE();
        //if (I_TYPE != null) {
        stmt.bindLong(12, I_TYPE);
        //}

        String S_CH = entity.getS_CH();
        if (S_CH != null) {
            stmt.bindString(13, S_CH);
        }

        String S_ACCOUNT = entity.getS_ACCOUNT();
        if (S_ACCOUNT != null) {
            stmt.bindString(14, S_ACCOUNT);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public DuoMeiTXX readEntity(Cursor cursor, int offset) {
        DuoMeiTXX entity = new DuoMeiTXX( //
                cursor.getInt(offset + 0), // ID
                cursor.getString(offset + 1), // S_CID
                cursor.isNull(offset + 2) ? 0 : cursor.getInt(offset + 2), // I_WENJIANLX
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_WENJIANLJ
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // B_WENJIANNR
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // S_WENJIANMC
                cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6), // I_CHAOBIAOID
                cursor.isNull(offset + 7) ? 0 : cursor.getInt(offset + 7), // I_X
                cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8), // I_Y
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // S_BEIZHU
                cursor.isNull(offset + 10) ? 0 : cursor.getInt(offset + 10), // I_SHANGCHUANBZ
                cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11), // I_TYPE
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // S_CH
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13)// S_ACCOUNT
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, DuoMeiTXX entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setS_CID(cursor.getString(offset + 1));
        entity.setI_WENJIANLX(cursor.isNull(offset + 2) ? 0 : cursor.getInt(offset + 2));
        entity.setS_WENJIANLJ(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setB_WENJIANNR(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_WENJIANMC(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setI_CHAOBIAOID(cursor.getInt(offset + 6));
        entity.setI_X(cursor.isNull(offset + 7) ? 0 : cursor.getInt(offset + 7));
        entity.setI_Y(cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8));
        entity.setS_BEIZHU(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setI_SHANGCHUANBZ(cursor.isNull(offset + 10) ? 0 : cursor.getInt(offset + 10));
        entity.setI_TYPE(cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11));
        entity.setS_CH(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setS_ACCOUNT(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(DuoMeiTXX entity, long rowId) {
        // Unsupported or missing PK type
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(DuoMeiTXX entity) {
        if (entity != null) {
            return (long) entity.getID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 保存多媒体信息
     *
     * @param duoMeiTXX
     * @return boolean
     */
    public boolean insertDuoMeiTXX(DuoMeiTXX duoMeiTXX) {
        if (duoMeiTXX == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_WENJIANMC.eq(duoMeiTXX.getS_WENJIANMC()));
        List<DuoMeiTXX> list = qb.list();
        if ((list != null) && (list.size() > 0)) {
            DuoMeiTXX dmtxx = list.get(0);
            duoMeiTXX.setID(dmtxx.getID());
        } else {
            duoMeiTXX.setID(-1);
        }

        if (this.insertOrReplace(duoMeiTXX) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public boolean updateDuoMeiTXX(DuoMeiTXX duoMeiTXX) {
        if (duoMeiTXX == null) {
            return false;
        }
//        QueryBuilder<DuoMeiTXX> qb = this.queryBuilder();
//        DeleteQuery<DuoMeiTXX> bd = qb.where(Properties.S_CID.eq(duoMeiTXX.getS_CID()),
//                Properties.I_WENJIANLX.eq(duoMeiTXX.getI_WENJIANLX())).buildDelete();
//        bd.executeDeleteWithoutDetachingEntities();
        update(duoMeiTXX);
        return true;
    }

    /**
     * 账单送达
     * @param account
     * @param renwubh
     * @param ch
     * @return
     */
    public List<DuoMeiTXX> getNotUploadedZDSDDuoMeiTXXList(String account, int renwubh, String ch) {
        if (account == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        if (renwubh <= 0) { // alll tasks
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.I_WENJIANLX.eq(0),
                    Properties.I_SHANGCHUANBZ.eq(0));
        } else if (ch != null) {

            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.S_CH.eq(ch),
                    Properties.I_WENJIANLX.eq(0),
                    Properties.I_SHANGCHUANBZ.eq(0));
            Log.e("BillServiceActivity", "size=" + qb.list().size());
        } else {
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.I_WENJIANLX.eq(0),
                    Properties.I_SHANGCHUANBZ.eq(0));
        }
        return qb.list();
    }

    /**
     * 获取对应的chaoBiaoID，cid的多媒体信息集合
     *
     * @param chaoBiaoID
     * @param cid
     * @return List<DuoMeiTXX>
     */
    public List<DuoMeiTXX> getDuoMeiTXXList(int chaoBiaoID, String cid) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_CHAOBIAOID.eq(chaoBiaoID), Properties.S_CID.eq(cid));
        List<DuoMeiTXX> list = qb.list();
        if ((list == null) || (list.size() <= 0)) {
            return null;
        } else {
            return list;
        }
    }

    public List<DuoMeiTXX> getNotUploadedDuoMeiTXXList(String account, int renwubh, String ch) {
        if (account == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        if (renwubh <= 0) { // alll tasks
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.I_SHANGCHUANBZ.eq(0));
        } else if (ch != null) {
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.S_CH.eq(ch),
                    Properties.I_SHANGCHUANBZ.eq(0));
        } else {
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.I_SHANGCHUANBZ.eq(0));
        }

        return qb.list();
    }

    public List<DuoMeiTXX> getMoreDuoMeiTXXList(String account, int taskId, String volume, int offset, int limit) {
        if ((account == null) || (offset < 0) || (limit <= 0)) {
            return new ArrayList<>();
        }

        QueryBuilder qb = this.queryBuilder();
        if ((taskId <= 0) || TextUtil.isNullOrEmpty(volume)) {
            qb.where(Properties.S_ACCOUNT.eq(account));
        } else {
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.S_CH.eq(volume));
        }
        qb.limit(limit);
        qb.offset(offset);
        List<DuoMeiTXX> list = qb.list();
        if (list == null) {
            return new ArrayList<>();
        } else {
            return list;
        }
    }

    public List<DuoMeiTXX> getMoreDuoMeiTXXWaiFuList(String account, int offset, int limit) {
        if ((account == null) || (offset < 0) || (limit <= 0)) {
            return new ArrayList<>();
        }
        QueryBuilder qb = this.queryBuilder();
            qb.where(Properties.S_ACCOUNT.eq(account),Properties.I_TYPE.eq(1));
        qb.limit(limit);
        qb.offset(offset);
        List<DuoMeiTXX> list = qb.list();
        if (list == null) {
            return new ArrayList<>();
        } else {
            return list;
        }
    }

    public List<DuoMeiTXX> getMoreDelayDuoMeiTXXList(String account, int offset, int limit) {
        if ((account == null) || (offset < 0) || (limit <= 0)) {
            return new ArrayList<>();
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ACCOUNT.eq(account),Properties.I_TYPE.eq(5));
        qb.limit(limit);
        qb.offset(offset);
        List<DuoMeiTXX> list = qb.list();
        if (list == null) {
            return new ArrayList<>();
        } else {
            return list;
        }
    }

    /**
     * 判断该用户是否有拍照
     *
     * @param cid 用户号
     * @return boolean
     */
    public boolean IsExistencePhone(String cid) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(cid));
        return qb.count() > 0;
    }

    /**
     * 获取对应的cID，cid的多媒体信息集合
     *
     * @param cid
     * @param type
     * @return List<DuoMeiTXX>
     */
    public List<DuoMeiTXX> getDuoMeiTXXList(String account, String cid, int type) {
        if ((account == null) || (cid == null)) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ACCOUNT.eq(account),
                Properties.S_CID.eq(cid),
                Properties.I_TYPE.eq(type));
        return qb.list();
    }

    public List<DuoMeiTXX> getDelayDuoMeiTXXList(List<String> cids) {
        if (cids == null){
            return null;
        }

        List<DuoMeiTXX> list = new ArrayList<>();
        if (cids.size() <= DataProviderImpl.MAX_IN_SIZE){
            list = queryBuilder().where(Properties.I_TYPE.eq(5),
                    Properties.S_CID.notIn(cids))
                    .list();
        }else {
            List<DuoMeiTXX> existMeidas = queryBuilder().list();
            for (DuoMeiTXX duoMeiTXX : existMeidas){
                if (!isExist(duoMeiTXX.getS_CID(), cids)){
                    list.add(duoMeiTXX);
                }
            }
        }

        return list;
    }

    public void deleteDelayDuoMeiTXX(List<String> cids) {
        if (cids == null){
            return;
        }

        if (cids.size() <= DataProviderImpl.MAX_IN_SIZE){
            queryBuilder().where(Properties.I_TYPE.eq(5),
                    Properties.S_CID.in(cids))
                    .buildDelete().executeDeleteWithoutDetachingEntities();
        }else {
            int number = cids.size() / DataProviderImpl.MAX_IN_SIZE + 1;
            for (int i = 0; i < number; i++){
                List<String> subList = cids.subList(i * DataProviderImpl.MAX_IN_SIZE,
                        i == number - 1 ? cids.size() : (i + 1) * DataProviderImpl.MAX_IN_SIZE);
                queryBuilder().where(Properties.I_TYPE.eq(5),
                        Properties.S_CID.in(subList))
                        .buildDelete().executeDeleteWithoutDetachingEntities();
            }
        }
    }

    public List<DuoMeiTXX> getDuoMeiTXXList(String account, String cid,String ch, int renwuBH, int type) {
        if (account == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        if (cid == null && ch == null && renwuBH == 0) {
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.I_TYPE.eq(type));
        } else if (cid == null || ch == null) {
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.I_TYPE.eq(type));
        } else {
            qb.where(Properties.S_ACCOUNT.eq(account),
                    Properties.S_CID.eq(cid),
                    Properties.S_CH.eq(ch),
                    Properties.I_TYPE.eq(type));
        }
        return qb.list();
    }


    /**
     * 删除对应的文件名的多媒体信息
     *
     * @param wenJianMC
     * @return
     */
    public boolean deleteDuoMeiTXX(String wenJianMC) {
        if (wenJianMC == null) {
            return false;
        }

        QueryBuilder<DuoMeiTXX> qb = this.queryBuilder();
        DeleteQuery<DuoMeiTXX> bd = qb.where(Properties.S_WENJIANMC.eq(wenJianMC)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
        //TODO
        //有疑问
        return true;
    }


    /**
     * 根据条件获取所有的多媒体信息
     * @param account
     * @param renwubh
     * @param ch
     * @return
     */
    public List<DuoMeiTXX> getAllDuoMeiTXXList(String account, int renwubh, String ch) {
        if(account == null || renwubh <= 0 || ch == null){
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ACCOUNT.eq(account),
                Properties.S_CH.eq(ch));
        return  qb.list();
    }

    public List<DuoMeiTXX> getUploadDuoMeiTXXList() {
        return queryBuilder().where(Properties.I_SHANGCHUANBZ.eq(2)).list();
    }

    public List<DuoMeiTXX> getAllDuoMeiTXXList(String account, int renwubh) {
        if(account == null || renwubh <= 0){
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ACCOUNT.eq(account));
        return  qb.list();
    }


    public List<DuoMeiTXX> getAllDuoMeiTXXList(String account,String taskIdsArry) {
        if(account == null || taskIdsArry == null){
            return null;
        }

//        String[] taskIds = taskIdsArry.split(",");
//
//        QueryBuilder qb = this.queryBuilder();
//        qb.where(Properties.S_ACCOUNT.eq(account),
//                Properties.I_RENWUBH.in(taskIds));
//
//        List<DuoMeiTXX> lists = qb.list();
//        if(lists == null){
//            return null;
//        }

        return  null;
    }


    public boolean deleteDuoMeiTXX(String account, List<String> mediaList) {
        if (account == null || mediaList ==null || mediaList.size() ==0) {
            return false;
        }

        QueryBuilder<DuoMeiTXX> qb = this.queryBuilder();
        DeleteQuery<DuoMeiTXX> bd = qb.where(Properties.S_ACCOUNT.eq(account)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
        //TODO
        //有疑问
        return true;
    }

    public boolean deleteDuoMeiTXX(String account, int renwubh, String ch) {
        if (account == null || ch == null) {
            return false;
        }

        QueryBuilder<DuoMeiTXX> qb = this.queryBuilder();
        DeleteQuery<DuoMeiTXX> bd = qb.where(
                Properties.S_ACCOUNT.eq(account),
                Properties.S_CH.eq(ch)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
        return true;
    }

    public boolean deleteDuoMeiTXX(String account, int renwubh) {
        if (account == null) {
            return false;
        }

        QueryBuilder<DuoMeiTXX> qb = this.queryBuilder();
        DeleteQuery<DuoMeiTXX> bd = qb.where(
                Properties.S_ACCOUNT.eq(account)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
        return true;
    }

    public boolean deleteDuoMeiTXXByTaskId(String account, String taskIdsArry) {
        //        if (account == null || taskIdsArry ==null) {
//            return false;
//        }
//
//        String[] taskIds = taskIdsArry.split(",");
//
//        QueryBuilder<DuoMeiTXX> qb = this.queryBuilder();
//        DeleteQuery<DuoMeiTXX> bd = qb.where(
//                Properties.I_RENWUBH.in(taskIds),
//                Properties.S_ACCOUNT.eq(account)).buildDelete();
//        bd.executeDeleteWithoutDetachingEntities();
        //TODO
        //有疑问
        return true;
    }

    public boolean deleteDuoMeiTXXByTaskId(String account, List<Integer> ids) {
        if (TextUtil.isNullOrEmpty(account) || ids == null || ids.size() == 0) {
            return false;
        }
        QueryBuilder<DuoMeiTXX> qb = this.queryBuilder();
        DeleteQuery<DuoMeiTXX> bd = qb.where(
                Properties.S_ACCOUNT.eq(account),
                Properties.ID.in(ids)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
        return true;
    }

    /**
     * 根据条件获取所有的多媒体信息(催缴)
     */
    public List<DuoMeiTXX> getRushPayDuoMeiTXXList(String account, int renwubh) {
        if (account == null || renwubh <= 0) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ACCOUNT.eq(account),
                Properties.I_TYPE.eq(4));
        return qb.list();
    }

    /**
     * 根据条件获取所有的多媒体信息(稽查)
     */
    public List<DuoMeiTXX> getJiChaDuoMeiTXXList(String account, int renwubh) {
        if (account == null || renwubh <= 0) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ACCOUNT.eq(account));
        return qb.list();
    }

    public boolean isUpload(String account, String ch){
        return !TextUtil.isNullOrEmpty(account)
                && !TextUtil.isNullOrEmpty(ch)
                && queryBuilder().where(Properties.S_ACCOUNT.eq(account),
                Properties.S_CH.eq(ch),
                Properties.I_SHANGCHUANBZ.eq(0))
                .count() == 0;
    }

    private boolean isExist(String cis, List<String> list){
        boolean exist =false;
        for (String cid : list){
            if (cis.equals(cid)){
                exist = true;
                break;
            }
        }

        return exist;
    }

}
