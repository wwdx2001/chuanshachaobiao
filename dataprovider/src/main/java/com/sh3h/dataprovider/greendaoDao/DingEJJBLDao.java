package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.DingEJJBL;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table JG_DingEJJBL.
 */
public class DingEJJBLDao extends AbstractDao<DingEJJBL, Void> {

    public static final String TABLENAME = "JG_DingEJJBL";

    /**
     * Properties of entity DingEJJBL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, int.class, "ID", false, "ID");
        public final static Property N_BEIL = new Property(1, double.class, "N_BEIL", false, "N_BEIL");
        public final static Property I_KAISHIFLOOR = new Property(2, int.class, "I_KAISHIFLOOR", false, "I_KAISHIFLOOR");
        public final static Property I_JIESHUFLOOR = new Property(3, int.class, "I_JIESHUFLOOR", false, "I_JIESHUFLOOR");
    }

    public DingEJJBLDao(DaoConfig config) {
        super(config);
    }

    public DingEJJBLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'JG_DingEJJBL' (" + //
                "'ID' INTEGER," + // 0: ID
                "'N_BEIL' REAL," + // 1: N_BEIL
                "'I_KAISHIFLOOR' INTEGER," + // 2: I_KAISHIFLOOR
                "'I_JIESHUFLOOR' INTEGER);"); // 3: I_JIESHUFLOOR
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JG_DingEJJBL'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, DingEJJBL entity) {
        stmt.clearBindings();

        int ID = entity.getID();
        //if (ID != null) {
            stmt.bindLong(1, ID);
        //}

        double N_BEIL = entity.getN_BEIL();
        //if (N_BEIL != null) {
            stmt.bindDouble(2, N_BEIL);
        //}

        int I_KAISHIFLOOR = entity.getI_KAISHIFLOOR();
        //if (I_KAISHIFLOOR != null) {
            stmt.bindLong(3, I_KAISHIFLOOR);
        //}

        int I_JIESHUFLOOR = entity.getI_JIESHUFLOOR();
        //if (I_JIESHUFLOOR != null) {
            stmt.bindLong(4, I_JIESHUFLOOR);
        //}
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public DingEJJBL readEntity(Cursor cursor, int offset) {
        DingEJJBL entity = new DingEJJBL( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
                cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // N_BEIL
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // I_KAISHIFLOOR
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // I_JIESHUFLOOR
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, DingEJJBL entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setN_BEIL(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setI_KAISHIFLOOR(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setI_JIESHUFLOOR(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(DingEJJBL entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(DingEJJBL entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 返回定额加价表数据
     *
     * @return
     */
    public List<DingEJJBL> getAllDingEJJBL() {

        return this.loadAll();

    }

    /**
     * 根据定额加价倍率id查询对应的数据，如果存在则返回true，不存在返回false
     *
     * @param id 状态编码
     * @return boolean
     */
    public boolean existDingEJJBL(int id) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.ID.eq(id));

        return qb.list().size() > 0 ? true : false;
    }

    /**
     * 删除数据库
     *
     */
    public void deleteDingEJJBL() {
        this.deleteAll();
        //this.queryBuilder().buildDelete().executeDeleteWithoutDetachingEntities();
    }

    /**
     * 插入数据到抄表状态数据库中
     *
     * @param dingEJJBL
     *            抄表状态数据实体
     */
    public void insertDingEJJBL(DingEJJBL dingEJJBL) {

        insertOrReplace(dingEJJBL);

    }


}
