package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Join;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;
import de.greenrobot.dao.query.WhereCondition;

//import com.sh3h.dataprovider.core.DBHelper;
import com.sh3h.dataprovider.greendaoEntity.FeiYongZC;
import com.sh3h.dataprovider.greendaoEntity.JianHao;
import com.sh3h.dataprovider.greendaoEntity.CiYuXX;
import com.sh3h.dataprovider.greendaoEntity.JianHaoMX;
import com.sh3h.dataprovider.schema.JianHaoColumns;
import com.sh3h.dataprovider.schema.JianHaoMXColumns;
import com.sh3h.dataprovider.schema.Tables;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table JG_JianHaoMX.
 */
public class JianHaoMXDao extends AbstractDao<JianHaoMX, Void> {

    public static final String TABLENAME = "JG_JianHaoMX";

    /**
     * Properties of entity JianHaoMX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, int.class, "ID", false, "ID");
        public final static Property I_TIAOJIAH = new Property(1, int.class, "I_TIAOJIAH", false, "I_TIAOJIAH");
        public final static Property S_JIANHAO = new Property(2, String.class, "S_JIANHAO", false, "S_JIANHAO");
        public final static Property I_FEIYONGDLID = new Property(3, int.class, "I_FEIYONGDLID", false, "I_FEIYONGDLID");
        public final static Property I_FEIYONGID = new Property(4, int.class, "I_FEIYONGID", false, "I_FEIYONGID");
        public final static Property I_QISHIY = new Property(5, int.class, "I_QISHIY", false, "I_QISHIY");
        public final static Property I_JIESHUY = new Property(6, int.class, "I_JIESHUY", false, "I_JIESHUY");
        public final static Property I_KAISHISL = new Property(7, int.class, "I_KAISHISL", false, "I_KAISHISL");
        public final static Property I_JIESHUSL = new Property(8, int.class, "I_JIESHUSL", false, "I_JIESHUSL");
        public final static Property I_JIETIJB = new Property(9, int.class, "I_JIETIJB", false, "I_JIETIJB");
        public final static Property N_ZHEKOUL = new Property(10, double.class, "N_ZHEKOUL", false, "N_ZHEKOUL");
        public final static Property I_ZHEKOULX = new Property(11, int.class, "I_ZHEKOULX", false, "I_ZHEKOULX");
        public final static Property N_JIAGE = new Property(12, double.class, "N_JIAGE", false, "N_JIAGE");
    };


    public JianHaoMXDao(DaoConfig config) {
        super(config);
    }

    public JianHaoMXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JG_JianHaoMX' (" + //
                "'ID' INTEGER NOT NULL ," + // 0: ID
                "'I_TIAOJIAH' INTEGER NOT NULL ," + // 1: I_TIAOJIAH
                "'S_JIANHAO' TEXT NOT NULL ," + // 2: S_JIANHAO
                "'I_FEIYONGDLID' INTEGER," + // 3: I_FEIYONGDLID
                "'I_FEIYONGID' INTEGER," + // 4: I_FEIYONGID
                "'I_QISHIY' INTEGER NOT NULL ," + // 5: I_QISHIY
                "'I_JIESHUY' INTEGER NOT NULL ," + // 6: I_JIESHUY
                "'I_KAISHISL' INTEGER NOT NULL ," + // 7: I_KAISHISL
                "'I_JIESHUSL' INTEGER NOT NULL ," + // 8: I_JIESHUSL
                "'I_JIETIJB' INTEGER," + // 9: I_JIETIJB
                "'N_ZHEKOUL' REAL," + // 10: N_ZHEKOUL
                "'I_ZHEKOULX' INTEGER," + // 11: I_ZHEKOULX
                "'N_JIAGE' REAL);"); // 12: N_JIAGE
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JG_JianHaoMX'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JianHaoMX entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
        stmt.bindLong(2, entity.getI_TIAOJIAH());
        stmt.bindString(3, entity.getS_JIANHAO());

        int I_FEIYONGDLID = entity.getI_FEIYONGDLID();
        //if (I_FEIYONGDLID != null) {
            stmt.bindLong(4, I_FEIYONGDLID);
        //}

        int I_FEIYONGID = entity.getI_FEIYONGID();
        //if (I_FEIYONGID != null) {
            stmt.bindLong(5, I_FEIYONGID);
        //}
        stmt.bindLong(6, entity.getI_QISHIY());
        stmt.bindLong(7, entity.getI_JIESHUY());
        stmt.bindLong(8, entity.getI_KAISHISL());
        stmt.bindLong(9, entity.getI_JIESHUSL());

        int I_JIETIJB = entity.getI_JIETIJB();
        //if (I_JIETIJB != null) {
            stmt.bindLong(10, I_JIETIJB);
        //}

        double N_ZHEKOUL = entity.getN_ZHEKOUL();
        //if (N_ZHEKOUL != null) {
            stmt.bindDouble(11, N_ZHEKOUL);
        //}

        int I_ZHEKOULX = entity.getI_ZHEKOULX();
        //if (I_ZHEKOULX != null) {
            stmt.bindLong(12, I_ZHEKOULX);
        //}

        double N_JIAGE = entity.getN_JIAGE();
        //if (N_JIAGE != null) {
            stmt.bindDouble(13, N_JIAGE);
        //}
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public JianHaoMX readEntity(Cursor cursor, int offset) {
        JianHaoMX entity = new JianHaoMX( //
                cursor.getInt(offset + 0), // ID
                cursor.getInt(offset + 1), // I_TIAOJIAH
                cursor.getString(offset + 2), // S_JIANHAO
                cursor.isNull(offset + 3) ? 0 : cursor.getInt(offset + 3), // I_FEIYONGDLID
                cursor.isNull(offset + 4) ? 0 : cursor.getInt(offset + 4), // I_FEIYONGID
                cursor.getInt(offset + 5), // I_QISHIY
                cursor.getInt(offset + 6), // I_JIESHUY
                cursor.getInt(offset + 7), // I_KAISHISL
                cursor.getInt(offset + 8), // I_JIESHUSL
                cursor.isNull(offset + 9) ? 0 : cursor.getInt(offset + 9), // I_JIETIJB
                cursor.isNull(offset + 10) ? 0 : cursor.getDouble(offset + 10), // N_ZHEKOUL
                cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11), // I_ZHEKOULX
                cursor.isNull(offset + 12) ? 0 : cursor.getDouble(offset + 12) // N_JIAGE
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JianHaoMX entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setI_TIAOJIAH(cursor.getInt(offset + 1));
        entity.setS_JIANHAO(cursor.getString(offset + 2));
        entity.setI_FEIYONGDLID(cursor.isNull(offset + 3) ? 0 : cursor.getInt(offset + 3));
        entity.setI_FEIYONGID(cursor.isNull(offset + 4) ? 0 : cursor.getInt(offset + 4));
        entity.setI_QISHIY(cursor.getInt(offset + 5));
        entity.setI_JIESHUY(cursor.getInt(offset + 6));
        entity.setI_KAISHISL(cursor.getInt(offset + 7));
        entity.setI_JIESHUSL(cursor.getInt(offset + 8));
        entity.setI_JIETIJB(cursor.isNull(offset + 9) ? 0 : cursor.getInt(offset + 9));
        entity.setN_ZHEKOUL(cursor.isNull(offset + 10) ? 0 : cursor.getDouble(offset + 10));
        entity.setI_ZHEKOULX(cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11));
        entity.setN_JIAGE(cursor.isNull(offset + 12) ? 0 : cursor.getDouble(offset + 12));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(JianHaoMX entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(JianHaoMX entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 根据简号获取对应的费用明细
     *
     * @param S_JH
     * @return
     */
    public List<JianHaoMX> getJianHaoMXByJH(String S_JH) {
        if (S_JH == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.join(Properties.S_JIANHAO, JianHao.class, JianHaoDao.Properties.S_JIANHAO);
        qb.join(Properties.I_FEIYONGID, FeiYongZC.class, FeiYongZCDao.Properties.I_FEIYONGID)
                .where(new WhereCondition.StringCondition("J2.I_TIAOJIAH = T.I_TIAOJIAH"));
        qb.where(Properties.S_JIANHAO.eq(S_JH));
        return qb.list();

        /*List<JianHaoMX> jhmxlist = new ArrayList<JianHaoMX>();
        String sql = "select jhmx.*,fy.S_FEIYONGMC,fy.N_XISHU,jh."
                + JianHaoColumns.JIETIS
                + ",jh."
                + JianHaoColumns.ZHONGLEI
                + ","
                + JianHaoColumns.DALEI
                + " from "
                + Tables.JG_JianHaoMX
                + " jhmx "
                + " left join "
                + Tables.JG_JianHao
                + " jh on jhmx.S_JIANHAO=jh.S_JIANHAO "
                + " left join "
                + Tables.JG_FeiYongZC
                + " fy on jhmx.I_FEIYONGID = fy.I_FEIYONGID and jhmx.I_TIAOJIAH = fy.I_TIAOJIAH "
                + " where jhmx." + JianHaoMXColumns.JIANHAO + " in (?) "
                + "order by jhmx." + JianHaoMXColumns.JIANHAO + ",jhmx."
                + JianHaoMXColumns.JIETIJB + ",jhmx."
                + JianHaoMXColumns.FEIYONGDLID;
        String[] selectionArgs = new String[] { S_JH };
        SQLiteDatabase _db = session.getDatabase();
        Cursor cursor = _db.rawQuery(sql, selectionArgs);
        if (cursor != null) {
            JianHaoMX jhmx;
            while (cursor.moveToNext()) {
                //jhmx = new JianHaoMX();
                jhmx = analyze(cursor);
                jhmxlist.add(jhmx);
            }
            cursor.close();
        }*/

        //return jhmxlist;

    }

    /**
     * 根据用户号和简号返回定额加价的单价
     * 定额加价单价：如果是总分表，则取总分表中最小用水费的价格作为单价；如果是混合用水，则取所有简号下最小用水费作为单价
     *
     * @param S_CID
     * @param S_JH
     * @return
     */
    public double getDingEJiaGeByCIDAndJH(String S_CID, String S_JH) {
        String QueryWhere = "";
        int feiyongdlid;
        // 定额加价取的是用水费大类的价格，所以先从词语表中取出用水费大类id
        CiYuXXDao ciyu = new CiYuXXDao(this.config);
        List<CiYuXX> ciyulist = ciyu.getCiYuXX(5004);
        if (ciyulist != null && ciyulist.size() > 0)
            feiyongdlid = Integer.parseInt(ciyulist.get(0).getWORDSVALUE());
        else
            feiyongdlid = 580;

        // 判断是否是混合用水
        if (S_JH.equals("-99999"))
            QueryWhere = "SELECT S_JIANHAO FROM KG_SHUILIANGFTXX WHERE TRIM(S_CID)='"
                    + S_CID + "'";
        else
            QueryWhere = "SELECT S_JIANHAO FROM KG_BIAOKAXX where TRIM(S_CID) = '"
                    + S_CID + "'  OR TRIM(S_ZONGBIAOBH)='" + S_CID + "'";

        String SqlText = "SELECT MIN(FYZC.[N_JIAGE]) AS N_JIAGE FROM JG_JIANHAOMX JHMX "
                + "LEFT JOIN JG_FEIYONGZC FYZC ON JHMX.[I_FEIYONGID] = FYZC.[I_FEIYONGID] "
                + "WHERE FYZC.[I_FEIYONGDLID] ="
                + feiyongdlid
                + " AND "
                + "JHMX.[S_JIANHAO] IN (" + QueryWhere + ") ";

        Query query = this.queryBuilder().where(
                new WhereCondition.StringCondition(SqlText)).build();
        List<JianHaoMX> jhmxlist = query.list();
        double price = 0;
        if (jhmxlist !=null) {
            price = jhmxlist.get(0).getN_JIAGE();
        }
        return price;
    }

    /**
     * 根据简号明细id查询对应的数据，如果存在则返回true，不存在返回false
     *
     * @param id
     *            简号明细id
     * @return boolean
     */
    public boolean existJianHaoMX(int id) {
        QueryBuilder<JianHaoMX> qb = this.queryBuilder();
        qb.where(Properties.ID.eq(id));
        boolean result = false;
        if (qb.count() >= 1)
            result = true;
        return result;
    }

    /**
     * 根据状态编码删除数据库中对应的数据
     */
    public void deleteJianHaoMX() {
        this.deleteAll();
    }

    /**
     * 插入数据到简号明细数据库中
     *
     * @param jianHaoMX
     *            简号明细数据实体
     */
    public void insertJianHaoMX(JianHaoMX jianHaoMX) {
        this.insertOrReplace(jianHaoMX);
    }

    private JianHaoMX analyze(Cursor cursor) {

        JianHaoMX jianhmx = new JianHaoMX();

        jianhmx.setID(cursor.getInt(cursor.getColumnIndex(JianHaoMXColumns.ID)));
        jianhmx.setI_TIAOJIAH(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.TIAOJIAH)));
        jianhmx.setS_JIANHAO(cursor.getString(cursor
                .getColumnIndex(JianHaoMXColumns.JIANHAO)));
        jianhmx.setI_FEIYONGDLID(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.FEIYONGDLID)));
        jianhmx.setI_FEIYONGID(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.FEIYONGID)));
        jianhmx.setI_QISHIY(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.QISHIY)));
        jianhmx.setI_JIESHUY(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.JIESHUY)));
        jianhmx.setI_KAISHISL(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.KAISHISL)));
        jianhmx.setI_JIESHUSL(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.JIESHUSL)));
        jianhmx.setI_JIETIJB(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.JIETIJB)));
        jianhmx.setN_ZHEKOUL(cursor.getDouble(cursor
                .getColumnIndex(JianHaoMXColumns.ZHEKOUL)));
        jianhmx.setI_ZHEKOULX(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.ZHEKOULX)));
        jianhmx.setN_JIAGE(cursor.getDouble(cursor
                .getColumnIndex(JianHaoMXColumns.JIAGE)));
        jianhmx.set_feiYongMC(cursor.getString(cursor
                .getColumnIndex(JianHaoMXColumns.FeiYongMC)));
        jianhmx.setxiShu(cursor.getDouble(cursor
                .getColumnIndex(JianHaoMXColumns.XISHU)));
        jianhmx.setjieTiS(cursor.getInt(cursor
                .getColumnIndex(JianHaoMXColumns.JIETISHU)));
        jianhmx.setdaLei(cursor.getString(cursor
                .getColumnIndex(JianHaoMXColumns.DALEI)));
        jianhmx.setzhongLei(cursor.getString(cursor
                .getColumnIndex(JianHaoMXColumns.ZHONGLEI)));

        return jianhmx;
    }

}
