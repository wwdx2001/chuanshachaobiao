package com.example.dataprovider3.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dataprovider3.entity.CallForPaymentTaskBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CALL_FOR_PAYMENT_TASK_BEAN".
*/
public class CallForPaymentTaskBeanDao extends AbstractDao<CallForPaymentTaskBean, Long> {

    public static final String TABLENAME = "CALL_FOR_PAYMENT_TASK_BEAN";

    /**
     * Properties of entity CallForPaymentTaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property S_CEBENH = new Property(1, String.class, "S_CEBENH", false, "S__CEBENH");
        public final static Property HUSHU = new Property(2, String.class, "HUSHU", false, "HUSHU");
        public final static Property WEIWANC = new Property(3, String.class, "WEIWANC", false, "WEIWANC");
        public final static Property YIWANC = new Property(4, String.class, "YIWANC", false, "YIWANC");
        public final static Property D_PAIFARQ = new Property(5, String.class, "D_PAIFARQ", false, "D__PAIFARQ");
    }


    public CallForPaymentTaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CallForPaymentTaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CALL_FOR_PAYMENT_TASK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"S__CEBENH\" TEXT," + // 1: S_CEBENH
                "\"HUSHU\" TEXT," + // 2: HUSHU
                "\"WEIWANC\" TEXT," + // 3: WEIWANC
                "\"YIWANC\" TEXT," + // 4: YIWANC
                "\"D__PAIFARQ\" TEXT);"); // 5: D_PAIFARQ
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CALL_FOR_PAYMENT_TASK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CallForPaymentTaskBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String S_CEBENH = entity.getS_CEBENH();
        if (S_CEBENH != null) {
            stmt.bindString(2, S_CEBENH);
        }
 
        String HUSHU = entity.getHUSHU();
        if (HUSHU != null) {
            stmt.bindString(3, HUSHU);
        }
 
        String WEIWANC = entity.getWEIWANC();
        if (WEIWANC != null) {
            stmt.bindString(4, WEIWANC);
        }
 
        String YIWANC = entity.getYIWANC();
        if (YIWANC != null) {
            stmt.bindString(5, YIWANC);
        }
 
        String D_PAIFARQ = entity.getD_PAIFARQ();
        if (D_PAIFARQ != null) {
            stmt.bindString(6, D_PAIFARQ);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CallForPaymentTaskBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String S_CEBENH = entity.getS_CEBENH();
        if (S_CEBENH != null) {
            stmt.bindString(2, S_CEBENH);
        }
 
        String HUSHU = entity.getHUSHU();
        if (HUSHU != null) {
            stmt.bindString(3, HUSHU);
        }
 
        String WEIWANC = entity.getWEIWANC();
        if (WEIWANC != null) {
            stmt.bindString(4, WEIWANC);
        }
 
        String YIWANC = entity.getYIWANC();
        if (YIWANC != null) {
            stmt.bindString(5, YIWANC);
        }
 
        String D_PAIFARQ = entity.getD_PAIFARQ();
        if (D_PAIFARQ != null) {
            stmt.bindString(6, D_PAIFARQ);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CallForPaymentTaskBean readEntity(Cursor cursor, int offset) {
        CallForPaymentTaskBean entity = new CallForPaymentTaskBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_CEBENH
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // HUSHU
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // WEIWANC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // YIWANC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // D_PAIFARQ
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CallForPaymentTaskBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setS_CEBENH(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHUSHU(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWEIWANC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYIWANC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setD_PAIFARQ(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CallForPaymentTaskBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CallForPaymentTaskBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CallForPaymentTaskBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
