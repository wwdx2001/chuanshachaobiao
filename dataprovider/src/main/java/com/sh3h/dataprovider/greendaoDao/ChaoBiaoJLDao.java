package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoJL;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CB_ChaoBiaoJL.
*/
public class ChaoBiaoJLDao extends AbstractDao<ChaoBiaoJL, Long> {

    public static final String TABLENAME = "CB_ChaoBiaoJL";

    /**
     * Properties of entity ChaoBiaoJL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", true, "ID");
        public final static Property S_CID = new Property(1, String.class, "S_CID", false, "S_CID");
        public final static Property I_CHAOBIAON = new Property(2, int.class, "I_CHAOBIAON", false, "I_CHAOBIAON");
        public final static Property I_CHAOBIAOY = new Property(3, int.class, "I_CHAOBIAOY", false, "I_CHAOBIAOY");
        public final static Property I_ChaoCi = new Property(4, int.class, "I_ChaoCi", false, "I_CHAOCI");
        public final static Property D_ChaoBiaoRQ = new Property(5, int.class, "D_ChaoBiaoRQ", false, "D_CHAOBIAORQ");
        public final static Property I_ShangCiCM = new Property(6, int.class, "I_ShangCiCM", false, "I_SHANGCICM");
        public final static Property I_BENCICM = new Property(7, int.class, "I_BENCICM", false, "I_BENCICM");
        public final static Property I_CHAOJIANSL = new Property(8, int.class, "I_CHAOJIANSL", false, "I_CHAOJIANSL");
        public final static Property S_CHAOBIAOZT = new Property(9, String.class, "S_CHAOBIAOZT", false, "S_CHAOBIAOZT");
        public final static Property S_ChaoBiaoY = new Property(10, String.class, "S_ChaoBiaoY", false, "S_CHAOBIAOY");
        public final static Property S_CHAOBIAOBZ = new Property(11, String.class, "S_CHAOBIAOBZ", false, "S_CHAOBIAOBZ");
        public final static Property I_CHAOBIAOZTBM = new Property(12, int.class, "I_CHAOBIAOZTBM", false, "I_CHAOBIAOZTBM");
        public final static Property I_LIANGGAOLDYYBM = new Property(13, int.class, "I_LIANGGAOLDYYBM", false, "I_LIANGGAOLDYYBM");
    };


    public ChaoBiaoJLDao(DaoConfig config) {
        super(config);
    }
    
    public ChaoBiaoJLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_ChaoBiaoJL' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: ID
                "'S_CID' TEXT NOT NULL ," + // 1: S_CID
                "'I_CHAOBIAON' INTEGER," + // 2: I_CHAOBIAON
                "'I_CHAOBIAOY' INTEGER," + // 3: I_CHAOBIAOY
                "'I_CHAOCI' INTEGER," + // 4: I_ChaoCi
                "'D_CHAOBIAORQ' INTEGER," + // 5: D_ChaoBiaoRQ
                "'I_SHANGCICM' INTEGER," + // 6: I_ShangCiCM
                "'I_BENCICM' INTEGER," + // 7: I_BENCICM
                "'I_CHAOJIANSL' INTEGER," + // 8: I_CHAOJIANSL
                "'S_CHAOBIAOZT' TEXT," + // 9: S_CHAOBIAOZT
                "'S_CHAOBIAOY' TEXT," + // 10: S_ChaoBiaoY
                "'S_CHAOBIAOBZ' TEXT," + // 11: S_CHAOBIAOBZ
                "'I_CHAOBIAOZTBM' INTEGER," + // 12: I_CHAOBIAOZTBM
                "'I_LIANGGAOLDYYBM' INTEGER);"); // 13: I_LIANGGAOLDYYBM
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_ChaoBiaoJL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChaoBiaoJL entity) {
        stmt.clearBindings();

        long id = entity.getID();
        if (id != -1) {
            stmt.bindLong(1, entity.getID());
        }

        stmt.bindString(2, entity.getS_CID());

        int I_CHAOBIAON = entity.getI_CHAOBIAON();
        //if (I_CHAOBIAON != null) {
            stmt.bindLong(3, I_CHAOBIAON);
        //}

        int I_CHAOBIAOY = entity.getI_CHAOBIAOY();
        //if (I_CHAOBIAOY != null) {
            stmt.bindLong(4, I_CHAOBIAOY);
        //}

        int I_ChaoCi = entity.getI_ChaoCi();
        //if (I_ChaoCi != null) {
            stmt.bindLong(5, I_ChaoCi);
        //}

        long D_ChaoBiaoRQ = entity.getD_ChaoBiaoRQ();
        //if (D_ChaoBiaoRQ != null) {
            stmt.bindLong(6, D_ChaoBiaoRQ);
        //}

        int I_ShangCiCM = entity.getI_ShangCiCM();
        //if (I_ShangCiCM != null) {
            stmt.bindLong(7, I_ShangCiCM);
        //}

        int I_BENCICM = entity.getI_BENCICM();
        //if (I_BENCICM != null) {
            stmt.bindLong(8, I_BENCICM);
        //}

        int I_CHAOJIANSL = entity.getI_CHAOJIANSL();
        //if (I_CHAOJIANSL != null) {
            stmt.bindLong(9, I_CHAOJIANSL);
        //}
 
        String S_CHAOBIAOZT = entity.getS_CHAOBIAOZT();
        if (S_CHAOBIAOZT != null) {
            stmt.bindString(10, S_CHAOBIAOZT);
        }
 
        String S_ChaoBiaoY = entity.getS_ChaoBiaoY();
        if (S_ChaoBiaoY != null) {
            stmt.bindString(11, S_ChaoBiaoY);
        }
 
        String S_CHAOBIAOBZ = entity.getS_CHAOBIAOBZ();
        if (S_CHAOBIAOBZ != null) {
            stmt.bindString(12, S_CHAOBIAOBZ);
        }

        int I_CHAOBIAOZTBM = entity.getI_CHAOBIAOZTBM();
        //if (I_CHAOBIAOZTBM != null) {
            stmt.bindLong(13, I_CHAOBIAOZTBM);
        //}

        int I_LIANGGAOLDYYBM = entity.getI_LIANGGAOLDYYBM();
        //if (I_LIANGGAOLDYYBM != null) {
            stmt.bindLong(14, I_LIANGGAOLDYYBM);
        //}
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChaoBiaoJL readEntity(Cursor cursor, int offset) {
        ChaoBiaoJL entity = new ChaoBiaoJL( //
            cursor.getLong(offset + 0), // ID
            cursor.getString(offset + 1), // S_CID
            cursor.isNull(offset + 2) ? 0 : cursor.getInt(offset + 2), // I_CHAOBIAON
            cursor.isNull(offset + 3) ? 0 : cursor.getInt(offset + 3), // I_CHAOBIAOY
            cursor.isNull(offset + 4) ? 0 : cursor.getInt(offset + 4), // I_ChaoCi
            cursor.isNull(offset + 5) ? 0 : cursor.getLong(offset + 5), // D_ChaoBiaoRQ
            cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6), // I_ShangCiCM
            cursor.isNull(offset + 7) ? 0 : cursor.getInt(offset + 7), // I_BENCICM
            cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8), // I_CHAOJIANSL
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // S_CHAOBIAOZT
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // S_ChaoBiaoY
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // S_CHAOBIAOBZ
            cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12), // I_CHAOBIAOZTBM
            cursor.isNull(offset + 13) ? 0 : cursor.getInt(offset + 13) // I_LIANGGAOLDYYBM
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChaoBiaoJL entity, int offset) {
        entity.setID(cursor.getLong(offset + 0));
        entity.setS_CID(cursor.getString(offset + 1));
        entity.setI_CHAOBIAON(cursor.isNull(offset + 2) ? 0 : cursor.getInt(offset + 2));
        entity.setI_CHAOBIAOY(cursor.isNull(offset + 3) ? 0 : cursor.getInt(offset + 3));
        entity.setI_ChaoCi(cursor.isNull(offset + 4) ? 0 : cursor.getInt(offset + 4));
        entity.setD_ChaoBiaoRQ(cursor.isNull(offset + 5) ? 0 : cursor.getLong(offset + 5));
        entity.setI_ShangCiCM(cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6));
        entity.setI_BENCICM(cursor.isNull(offset + 7) ? 0 : cursor.getInt(offset + 7));
        entity.setI_CHAOJIANSL(cursor.isNull(offset + 8) ? 0 : cursor.getInt(offset + 8));
        entity.setS_CHAOBIAOZT(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setS_ChaoBiaoY(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setS_CHAOBIAOBZ(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setI_CHAOBIAOZTBM(cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12));
        entity.setI_LIANGGAOLDYYBM(cursor.isNull(offset + 13) ? 0 : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChaoBiaoJL entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChaoBiaoJL entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 根据任务编号删除不存在renWuBHAll中的抄表记录
     */
    public void deleteChaoBiaoJL(List<String> cids) {
        QueryBuilder<ChaoBiaoJL> qb = queryBuilder();
        DeleteQuery<ChaoBiaoJL> bd = qb.where(Properties.S_CID.in(cids)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 删除本地数据
     */
    public boolean clear(String cId) {
        if (cId == null) {
            return false;
        }

        QueryBuilder<ChaoBiaoJL> qb = queryBuilder();
        DeleteQuery<ChaoBiaoJL> bd = qb.where(Properties.S_CID.eq(cId)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
        return true;
    }

    /**
     * 插入数据
     */
    public boolean insertData(ChaoBiaoJL chaoBiaoJL) {
        if (chaoBiaoJL == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(chaoBiaoJL.getS_CID()),
                Properties.I_CHAOBIAON.eq(chaoBiaoJL.getI_CHAOBIAON()),
                Properties.I_CHAOBIAOY.eq(chaoBiaoJL.getI_CHAOBIAOY()));
        List<ChaoBiaoJL> chaoBiaoJLList =  qb.list();
        if ((chaoBiaoJLList != null) && (chaoBiaoJLList.size() > 0)) {
            chaoBiaoJL.setID(chaoBiaoJLList.get(0).getID());
        } else {
            chaoBiaoJL.setID(-1);
        }

        if (this.insertOrReplace(chaoBiaoJL) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public boolean insertChaoBiaoJLList(List<ChaoBiaoJL> chaoBiaoJLList) {
        if (chaoBiaoJLList == null) {
            return false;
        }

        insertOrReplaceInTx(chaoBiaoJLList);
        return true;
    }

    /**
     * 查询chaoBiaoJL表中记录
     *
     * SQLiteDatabase实例
     * @return List<ChaoBiaoJL> 集合
     */
    public List<ChaoBiaoJL> getList(String cId) {
        if (cId == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(cId));
        qb.orderDesc(Properties.I_CHAOBIAON, Properties.I_CHAOBIAOY);
        List<ChaoBiaoJL> lists =  qb.list();
        return lists;

    }

    public List<ChaoBiaoJL> getAllList() {

        QueryBuilder qb = this.queryBuilder();
        List<ChaoBiaoJL> lists =  qb.list();
        return lists;

    }
}
