package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.YuanGongXX;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SX_YuanGongXX.
*/
public class YuanGongXXDao extends AbstractDao<YuanGongXX, Void> {

    public static final String TABLENAME = "SX_YuanGongXX";

    /**
     * Properties of entity YuanGongXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property S_YUANGONGZH = new Property(0, String.class, "S_YUANGONGZH", false, "S_YUANGONGZH");
        public final static Property S_XINGMING = new Property(1, String.class, "S_XINGMING", false, "S_XINGMING");
        public final static Property S_MIMA = new Property(2, String.class, "S_MIMA", false, "S_MIMA");
        public final static Property S_ST = new Property(3, String.class, "S_ST", false, "S_ST");
        public final static Property S_YUANGONGLX = new Property(4, String.class, "S_YUANGONGLX", false, "S_YUANGONGLX");
        public final static Property S_DIANHUA = new Property(5, String.class, "S_DIANHUA", false, "S_DIANHUA");
        public final static Property S_SHOUJI = new Property(6, String.class, "S_SHOUJI", false, "S_SHOUJI");
        public final static Property S_BEIZHU = new Property(7, String.class, "S_BEIZHU", false, "S_BEIZHU");
    };


    public YuanGongXXDao(DaoConfig config) {
        super(config);
    }
    
    public YuanGongXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SX_YuanGongXX' (" + //
                "'S_YUANGONGZH' TEXT NOT NULL ," + // 0: S_YUANGONGZH
                "'S_XINGMING' TEXT NOT NULL ," + // 1: S_XINGMING
                "'S_MIMA' TEXT," + // 2: S_MIMA
                "'S_ST' TEXT," + // 3: S_ST
                "'S_YUANGONGLX' TEXT," + // 4: S_YUANGONGLX
                "'S_DIANHUA' TEXT," + // 5: S_DIANHUA
                "'S_SHOUJI' TEXT," + // 6: S_SHOUJI
                "'S_BEIZHU' TEXT);"); // 7: S_BEIZHU
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SX_YuanGongXX'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, YuanGongXX entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getS_YUANGONGZH());
        stmt.bindString(2, entity.getS_XINGMING());
 
        String S_MIMA = entity.getS_MIMA();
        if (S_MIMA != null) {
            stmt.bindString(3, S_MIMA);
        }
 
        String S_ST = entity.getS_ST();
        if (S_ST != null) {
            stmt.bindString(4, S_ST);
        }
 
        String S_YUANGONGLX = entity.getS_YUANGONGLX();
        if (S_YUANGONGLX != null) {
            stmt.bindString(5, S_YUANGONGLX);
        }
 
        String S_DIANHUA = entity.getS_DIANHUA();
        if (S_DIANHUA != null) {
            stmt.bindString(6, S_DIANHUA);
        }
 
        String S_SHOUJI = entity.getS_SHOUJI();
        if (S_SHOUJI != null) {
            stmt.bindString(7, S_SHOUJI);
        }
 
        String S_BEIZHU = entity.getS_BEIZHU();
        if (S_BEIZHU != null) {
            stmt.bindString(8, S_BEIZHU);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public YuanGongXX readEntity(Cursor cursor, int offset) {
        YuanGongXX entity = new YuanGongXX( //
            cursor.getString(offset + 0), // S_YUANGONGZH
            cursor.getString(offset + 1), // S_XINGMING
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_MIMA
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_ST
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // S_YUANGONGLX
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // S_DIANHUA
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // S_SHOUJI
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // S_BEIZHU
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, YuanGongXX entity, int offset) {
        entity.setS_YUANGONGZH(cursor.getString(offset + 0));
        entity.setS_XINGMING(cursor.getString(offset + 1));
        entity.setS_MIMA(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_ST(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setS_YUANGONGLX(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_DIANHUA(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setS_SHOUJI(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setS_BEIZHU(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(YuanGongXX entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(YuanGongXX entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 获取员工信息表对象信息
     *
     *            SQLiteDatabase实例
     * @return MetaInfo实体
     */
    public YuanGongXX get(String account) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_YUANGONGZH.eq(account));
        if (qb.list() == null){
            return null;
        }else {
            return (YuanGongXX) qb.list().get(0);
        }
    }

    /**
     * 本地认证，通过传入pwd，account判断本地是否存在这个数据，如果存在返回true，否则为false；
     *
     * @param mima
     *            密码
     * @param account
     *            用户名
     * @return boolean值
     */
    public int auth(String mima, String account) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_MIMA.eq(mima),Properties.S_YUANGONGZH.eq(account));
        int count = (int) qb.count();


        if (count > 0) {
            return 1;// 登录成功
        } else {

            QueryBuilder qb2 = this.queryBuilder();
            qb2.where(Properties.S_YUANGONGZH.eq(account));
            count = (int) qb.count();
            if (count > 0) {
                return -1;
            } else {
                return 0;
            }
        }
    }


    
}
