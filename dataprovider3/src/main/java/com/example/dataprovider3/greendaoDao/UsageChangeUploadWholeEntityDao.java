package com.example.dataprovider3.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dataprovider3.entity.UsageChangeUploadWholeEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USAGE_CHANGE_UPLOAD_WHOLE_ENTITY".
*/
public class UsageChangeUploadWholeEntityDao extends AbstractDao<UsageChangeUploadWholeEntity, Long> {

    public static final String TABLENAME = "USAGE_CHANGE_UPLOAD_WHOLE_ENTITY";

    /**
     * Properties of entity UsageChangeUploadWholeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", true, "_id");
        public final static Property S_CID = new Property(1, String.class, "S_CID", false, "S__CID");
        public final static Property Jh = new Property(2, String.class, "jh", false, "JH");
        public final static Property Ssdm = new Property(3, String.class, "ssdm", false, "SSDM");
        public final static Property Remarks = new Property(4, String.class, "remarks", false, "REMARKS");
        public final static Property Images1 = new Property(5, String.class, "images1", false, "IMAGES1");
        public final static Property IsCommit = new Property(6, boolean.class, "isCommit", false, "IS_COMMIT");
        public final static Property JhPosition = new Property(7, Integer.class, "jhPosition", false, "JH_POSITION");
        public final static Property SsdmPosition = new Property(8, Integer.class, "ssdmPosition", false, "SSDM_POSITION");
    }


    public UsageChangeUploadWholeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UsageChangeUploadWholeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USAGE_CHANGE_UPLOAD_WHOLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: ID
                "\"S__CID\" TEXT," + // 1: S_CID
                "\"JH\" TEXT," + // 2: jh
                "\"SSDM\" TEXT," + // 3: ssdm
                "\"REMARKS\" TEXT," + // 4: remarks
                "\"IMAGES1\" TEXT," + // 5: images1
                "\"IS_COMMIT\" INTEGER NOT NULL ," + // 6: isCommit
                "\"JH_POSITION\" INTEGER," + // 7: jhPosition
                "\"SSDM_POSITION\" INTEGER);"); // 8: ssdmPosition
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USAGE_CHANGE_UPLOAD_WHOLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UsageChangeUploadWholeEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String S_CID = entity.getS_CID();
        if (S_CID != null) {
            stmt.bindString(2, S_CID);
        }
 
        String jh = entity.getJh();
        if (jh != null) {
            stmt.bindString(3, jh);
        }
 
        String ssdm = entity.getSsdm();
        if (ssdm != null) {
            stmt.bindString(4, ssdm);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(5, remarks);
        }
 
        String images1 = entity.getImages1();
        if (images1 != null) {
            stmt.bindString(6, images1);
        }
        stmt.bindLong(7, entity.getIsCommit() ? 1L: 0L);
 
        Integer jhPosition = entity.getJhPosition();
        if (jhPosition != null) {
            stmt.bindLong(8, jhPosition);
        }
 
        Integer ssdmPosition = entity.getSsdmPosition();
        if (ssdmPosition != null) {
            stmt.bindLong(9, ssdmPosition);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UsageChangeUploadWholeEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
 
        String S_CID = entity.getS_CID();
        if (S_CID != null) {
            stmt.bindString(2, S_CID);
        }
 
        String jh = entity.getJh();
        if (jh != null) {
            stmt.bindString(3, jh);
        }
 
        String ssdm = entity.getSsdm();
        if (ssdm != null) {
            stmt.bindString(4, ssdm);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(5, remarks);
        }
 
        String images1 = entity.getImages1();
        if (images1 != null) {
            stmt.bindString(6, images1);
        }
        stmt.bindLong(7, entity.getIsCommit() ? 1L: 0L);
 
        Integer jhPosition = entity.getJhPosition();
        if (jhPosition != null) {
            stmt.bindLong(8, jhPosition);
        }
 
        Integer ssdmPosition = entity.getSsdmPosition();
        if (ssdmPosition != null) {
            stmt.bindLong(9, ssdmPosition);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UsageChangeUploadWholeEntity readEntity(Cursor cursor, int offset) {
        UsageChangeUploadWholeEntity entity = new UsageChangeUploadWholeEntity( //
            cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_CID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // jh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ssdm
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remarks
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // images1
            cursor.getShort(offset + 6) != 0, // isCommit
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // jhPosition
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // ssdmPosition
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UsageChangeUploadWholeEntity entity, int offset) {
        entity.setID(cursor.getLong(offset + 0));
        entity.setS_CID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setJh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSsdm(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemarks(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImages1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsCommit(cursor.getShort(offset + 6) != 0);
        entity.setJhPosition(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSsdmPosition(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UsageChangeUploadWholeEntity entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UsageChangeUploadWholeEntity entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UsageChangeUploadWholeEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
