package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.dataprovider.greendaoEntity.JiaoFeiXX;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SF_JiaoFeiXX.
*/
public class JiaoFeiXXDao extends AbstractDao<JiaoFeiXX, Void> {

    public static final String TABLENAME = "SF_JiaoFeiXX";

    /**
     * Properties of entity JiaoFeiXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property S_CID = new Property(0, String.class, "S_CID", false, "S_CID");
        public final static Property I_ZhangWuNY = new Property(1, int.class, "I_ZhangWuNY", false, "I_ZhangWuNY");
        public final static Property I_FEEID = new Property(2, int.class, "I_FEEID", false, "I_FEEID");
        public final static Property D_ChaoBiaoRQ = new Property(3, long.class, "D_ChaoBiaoRQ", false, "D_ChaoBiaoRQ");
        public final static Property D_KAIZHANGRQ = new Property(4, long.class, "D_KAIZHANGRQ", false, "D_KAIZHANGRQ");
        public final static Property D_SHOUFEIRQ = new Property(5, long.class, "D_SHOUFEIRQ", false, "D_SHOUFEIRQ");
        public final static Property N_JE = new Property(6, double.class, "N_JE", false, "N_JE");
        public final static Property N_SHISHOUWYJ = new Property(7, double.class, "N_SHISHOUWYJ", false, "N_SHISHOUWYJ");
        public final static Property N_SHISHOUZJE = new Property(8, double.class, "N_SHISHOUZJE", false, "N_SHISHOUZJE");
        public final static Property S_SHOUFEITJ = new Property(9, String.class, "S_SHOUFEITJ", false, "S_SHOUFEITJ");
    };


    public JiaoFeiXXDao(DaoConfig config) {
        super(config);
    }
    
    public JiaoFeiXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SF_JiaoFeiXX' (" + //
                "'S_CID' TEXT NOT NULL ," + // 0: S_CID
                "'I_ZhangWuNY' INTEGER NOT NULL ," + // 1: I_ZhangWuNY
                "'I_FEEID' INTEGER NOT NULL ," + // 2: I_FEEID
                "'D_ChaoBiaoRQ' INTEGER NOT NULL ," + // 3: D_ChaoBiaoRQ
                "'D_KAIZHANGRQ' INTEGER NOT NULL ," + // 4: D_KAIZHANGRQ
                "'D_SHOUFEIRQ' INTEGER NOT NULL ," + // 5: D_SHOUFEIRQ
                "'N_JE' REAL NOT NULL ," + // 6: N_JE
                "'N_SHISHOUWYJ' REAL," + // 7: N_SHISHOUWYJ
                "'N_SHISHOUZJE' REAL," + // 8: N_SHISHOUZJE
                "'S_SHOUFEITJ' TEXT);"); // 9: S_SHOUFEITJ
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SF_JiaoFeiXX'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JiaoFeiXX entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getS_CID());
        stmt.bindLong(2, entity.getI_ZhangWuNY());
        stmt.bindLong(3, entity.getI_FEEID());
        stmt.bindLong(4, entity.getD_ChaoBiaoRQ());
        stmt.bindLong(5, entity.getD_KAIZHANGRQ());
        stmt.bindLong(6, entity.getD_SHOUFEIRQ());
        stmt.bindDouble(7, entity.getN_JE());

        double N_SHISHOUWYJ = entity.getN_SHISHOUWYJ();
        //if (N_SHISHOUWYJ != null) {
            stmt.bindDouble(8, N_SHISHOUWYJ);
        //}

        double N_SHISHOUZJE = entity.getN_SHISHOUZJE();
        //if (N_SHISHOUZJE != null) {
            stmt.bindDouble(9, N_SHISHOUZJE);
        //}
 
        String S_SHOUFEITJ = entity.getS_SHOUFEITJ();
        if (S_SHOUFEITJ != null) {
            stmt.bindString(10, S_SHOUFEITJ);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public JiaoFeiXX readEntity(Cursor cursor, int offset) {
        JiaoFeiXX entity = new JiaoFeiXX( //
            cursor.getString(offset + 0), // S_CID
            cursor.getInt(offset + 1), // I_ZhangWuNY
            cursor.getInt(offset + 2), // I_FEEID
            cursor.getLong(offset + 3), // D_ChaoBiaoRQ
            cursor.getLong(offset + 4), // D_KAIZHANGRQ
            cursor.getLong(offset + 5), // D_SHOUFEIRQ
            cursor.getDouble(offset + 6), // N_JE
            cursor.isNull(offset + 7) ? 0 : cursor.getDouble(offset + 7), // N_SHISHOUWYJ
            cursor.isNull(offset + 8) ? 0 : cursor.getDouble(offset + 8), // N_SHISHOUZJE
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // S_SHOUFEITJ
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JiaoFeiXX entity, int offset) {
        entity.setS_CID(cursor.getString(offset + 0));
        entity.setI_ZhangWuNY(cursor.getInt(offset + 1));
        entity.setI_FEEID(cursor.getInt(offset + 2));
        entity.setD_ChaoBiaoRQ(cursor.getLong(offset + 3));
        entity.setD_KAIZHANGRQ(cursor.getLong(offset + 4));
        entity.setD_SHOUFEIRQ(cursor.getLong(offset + 5));
        entity.setN_JE(cursor.getDouble(offset + 6));
        entity.setN_SHISHOUWYJ(cursor.isNull(offset + 7) ? 0 : cursor.getDouble(offset + 7));
        entity.setN_SHISHOUZJE(cursor.isNull(offset + 8) ? 0 : cursor.getDouble(offset + 8));
        entity.setS_SHOUFEITJ(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(JiaoFeiXX entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(JiaoFeiXX entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 根据任务编号删除不存在renWuBHAll中的缴费信息
     */
    public void delectJiaoFeiXX(String cidAll) {
        String[] str = cidAll.split(",");
        if (cidAll == null || cidAll.equals("")){
            return;
        }
        QueryBuilder<JiaoFeiXX> qb = this.queryBuilder();
        DeleteQuery<JiaoFeiXX> bd = qb.where(Properties.S_CID.in((Object[])str)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    public void deleteJiaoFeiXX(List<String> cids) {
        QueryBuilder<JiaoFeiXX> qb = this.queryBuilder();
        DeleteQuery<JiaoFeiXX> bd = qb.where(Properties.S_CID.in(cids)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 删除本地换表记录表数据
     */
    public boolean clear(String cId) {
        if (cId == null) {
            return false;
        }

        QueryBuilder<JiaoFeiXX> qb = this.queryBuilder();
        DeleteQuery<JiaoFeiXX> bd = qb.where(Properties.S_CID.eq(cId)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
        return true;
    }

    /**
     * 插入数据
     */
    public boolean insertData(JiaoFeiXX jiaoFeiXX) {
        if (jiaoFeiXX == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(jiaoFeiXX.getS_CID()),
                Properties.I_ZhangWuNY.eq(jiaoFeiXX.getI_ZhangWuNY()));
        List<JiaoFeiXX> list = qb.list();
        if ((list != null) && (list.size() > 0)) {
            return true;
        }

        if (this.insertOrReplace(jiaoFeiXX) == 0){
            return true;
        }else {
            return false;
        }
    }

    public boolean insertJiaoFeiXXs(List<JiaoFeiXX> jiaoFeiXXList) {
        if (jiaoFeiXXList == null) {
            return false;
        }

        insertOrReplaceInTx(jiaoFeiXXList);
        return true;
    }

    /**
     * 查询JiaoFeiXX表中任务，根据传入的cId决定读取所需要的缴费信息
     *
     * @param cId
     *            SQLiteDatabase实例
     *
     * @return List<JiaoFeiXX> 集合
     */
    public List<JiaoFeiXX> getList(String cId) {
        if (cId == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(cId));
        qb.orderDesc(Properties.D_SHOUFEIRQ);
        List<JiaoFeiXX> list = qb.list();
        return list;
    }
}
