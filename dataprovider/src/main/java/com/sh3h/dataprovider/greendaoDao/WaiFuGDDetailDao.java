package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.WaiFuGDDetail;
import com.sh3h.dataprovider.schema.WaiFuGDDetailColumns;

import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PDA_WaiFuGDDetail.
*/
public class WaiFuGDDetailDao extends AbstractDao<WaiFuGDDetail, Void> {

    public static final String TABLENAME = "PDA_WaiFuGDDetail";

    /**
     * Properties of entity WaiFuGDDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property I_RENWUBH = new Property(0, int.class, "I_RENWUBH", false, "I_RENWUBH");
        public final static Property I_XH = new Property(1, Integer.class, "I_XH", false, "I_XH");
        public final static Property S_JH = new Property(2, String.class, "S_JH", false, "S_JH");
        public final static Property N_BILI = new Property(3, Double.class, "N_BILI", false, "N_BILI");
        public final static Property I_JHTYPE = new Property(4, Integer.class, "I_JHTYPE", false, "I_JHTYPE");
        public final static Property S_CID = new Property(5, String.class, "S_CID", false, "S_CID");
        public final static Property I_CHAOBIAONY = new Property(6, Integer.class, "I_CHAOBIAONY", false, "I_CHAOBIAONY");
        public final static Property S_DZ = new Property(7, String.class, "S_DZ", false, "S_DZ");
        public final static Property S_TIAOXINGM = new Property(8, String.class, "S_TIAOXINGM", false, "S_TIAOXINGM");
        public final static Property I_YONGSHUIL = new Property(9, Integer.class, "I_YONGSHUIL", false, "I_YONGSHUIL");
        public final static Property I_TIAOJIANSL = new Property(10, Integer.class, "I_TIAOJIANSL", false, "I_TIAOJIANSL");
        public final static Property N_TIAOZHENGJE = new Property(11, Double.class, "N_TIAOZHENGJE", false, "N_TIAOZHENGJE");
        public final static Property S_SHENQINGYY = new Property(12, String.class, "S_SHENQINGYY", false, "S_SHENQINGYY");
        public final static Property S_BEIZHU = new Property(13, String.class, "S_BEIZHU", false, "S_BEIZHU");
        public final static Property I_LAIYUANBH = new Property(14, Integer.class, "I_LAIYUANBH", false, "I_LAIYUANBH");
        public final static Property S_FUCHAJG = new Property(15, String.class, "S_FUCHAJG", false, "S_FUCHAJG");
        public final static Property I_WANCHENGBZ = new Property(16, Integer.class, "I_WANCHENGBZ", false, "I_WANCHENGBZ");
        public final static Property I_YINGCANGBZ = new Property(17, Integer.class, "I_YINGCANGBZ", false, "I_YINGCANGBZ");
        public final static Property S_CAOZUOR = new Property(18, String.class, "S_CAOZUOR", false, "S_CAOZUOR");
        public final static Property I_YUANCHAOM = new Property(19, Integer.class, "I_YUANCHAOM", false, "I_YUANCHAOM");
    };


    public WaiFuGDDetailDao(DaoConfig config) {
        super(config);
    }
    
    public WaiFuGDDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PDA_WaiFuGDDetail' (" + //
                "'I_RENWUBH' INTEGER NOT NULL ," + // 0: I_RENWUBH
                "'I_XH' INTEGER," + // 1: I_XH
                "'S_JH' TEXT," + // 2: S_JH
                "'N_BILI' REAL," + // 3: N_BILI
                "'I_JHTYPE' INTEGER," + // 4: I_JHTYPE
                "'S_CID' TEXT NOT NULL ," + // 5: S_CID
                "'I_CHAOBIAONY' INTEGER," + // 6: I_CHAOBIAONY
                "'S_DZ' TEXT," + // 7: S_DZ
                "'S_TIAOXINGM' TEXT," + // 8: S_TIAOXINGM
                "'I_YONGSHUIL' INTEGER," + // 9: I_YONGSHUIL
                "'I_TIAOJIANSL' INTEGER," + // 10: I_TIAOJIANSL
                "'N_TIAOZHENGJE' REAL," + // 11: N_TIAOZHENGJE
                "'S_SHENQINGYY' TEXT," + // 12: S_SHENQINGYY
                "'S_BEIZHU' TEXT," + // 13: S_BEIZHU
                "'I_LAIYUANBH' INTEGER," + // 14: I_LAIYUANBH
                "'S_FUCHAJG' TEXT," + // 15: S_FUCHAJG
                "'I_WANCHENGBZ' INTEGER," + // 16: I_WANCHENGBZ
                "'I_YINGCANGBZ' INTEGER," + // 17: I_YINGCANGBZ
                "'S_CAOZUOR' TEXT," + // 18: S_CAOZUOR
                "'I_YUANCHAOM' INTEGER);"); // 19: I_YUANCHAOM
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PDA_WaiFuGDDetail'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WaiFuGDDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getI_RENWUBH());
 
        Integer I_XH = entity.getI_XH();
        if (I_XH != null) {
            stmt.bindLong(2, I_XH);
        }
 
        String S_JH = entity.getS_JH();
        if (S_JH != null) {
            stmt.bindString(3, S_JH);
        }
 
        Double N_BILI = entity.getN_BILI();
        if (N_BILI != null) {
            stmt.bindDouble(4, N_BILI);
        }
 
        Integer I_JHTYPE = entity.getI_JHTYPE();
        if (I_JHTYPE != null) {
            stmt.bindLong(5, I_JHTYPE);
        }
        stmt.bindString(6, entity.getS_CID());
 
        Integer I_CHAOBIAONY = entity.getI_CHAOBIAONY();
        if (I_CHAOBIAONY != null) {
            stmt.bindLong(7, I_CHAOBIAONY);
        }
 
        String S_DZ = entity.getS_DZ();
        if (S_DZ != null) {
            stmt.bindString(8, S_DZ);
        }
 
        String S_TIAOXINGM = entity.getS_TIAOXINGM();
        if (S_TIAOXINGM != null) {
            stmt.bindString(9, S_TIAOXINGM);
        }
 
        Integer I_YONGSHUIL = entity.getI_YONGSHUIL();
        if (I_YONGSHUIL != null) {
            stmt.bindLong(10, I_YONGSHUIL);
        }
 
        Integer I_TIAOJIANSL = entity.getI_TIAOJIANSL();
        if (I_TIAOJIANSL != null) {
            stmt.bindLong(11, I_TIAOJIANSL);
        }
 
        Double N_TIAOZHENGJE = entity.getN_TIAOZHENGJE();
        if (N_TIAOZHENGJE != null) {
            stmt.bindDouble(12, N_TIAOZHENGJE);
        }
 
        String S_SHENQINGYY = entity.getS_SHENQINGYY();
        if (S_SHENQINGYY != null) {
            stmt.bindString(13, S_SHENQINGYY);
        }
 
        String S_BEIZHU = entity.getS_BEIZHU();
        if (S_BEIZHU != null) {
            stmt.bindString(14, S_BEIZHU);
        }
 
        Integer I_LAIYUANBH = entity.getI_LAIYUANBH();
        if (I_LAIYUANBH != null) {
            stmt.bindLong(15, I_LAIYUANBH);
        }
 
        String S_FUCHAJG = entity.getS_FUCHAJG();
        if (S_FUCHAJG != null) {
            stmt.bindString(16, S_FUCHAJG);
        }
 
        Integer I_WANCHENGBZ = entity.getI_WANCHENGBZ();
        if (I_WANCHENGBZ != null) {
            stmt.bindLong(17, I_WANCHENGBZ);
        }
 
        Integer I_YINGCANGBZ = entity.getI_YINGCANGBZ();
        if (I_YINGCANGBZ != null) {
            stmt.bindLong(18, I_YINGCANGBZ);
        }
 
        String S_CAOZUOR = entity.getS_CAOZUOR();
        if (S_CAOZUOR != null) {
            stmt.bindString(19, S_CAOZUOR);
        }
 
        Integer I_YUANCHAOM = entity.getI_YUANCHAOM();
        if (I_YUANCHAOM != null) {
            stmt.bindLong(20, I_YUANCHAOM);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public WaiFuGDDetail readEntity(Cursor cursor, int offset) {
        WaiFuGDDetail entity = new WaiFuGDDetail( //
            cursor.getInt(offset + 0), // I_RENWUBH
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // I_XH
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_JH
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // N_BILI
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // I_JHTYPE
            cursor.getString(offset + 5), // S_CID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // I_CHAOBIAONY
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // S_DZ
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // S_TIAOXINGM
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // I_YONGSHUIL
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // I_TIAOJIANSL
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // N_TIAOZHENGJE
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // S_SHENQINGYY
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // S_BEIZHU
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // I_LAIYUANBH
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // S_FUCHAJG
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // I_WANCHENGBZ
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // I_YINGCANGBZ
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // S_CAOZUOR
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // I_YUANCHAOM
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WaiFuGDDetail entity, int offset) {
        entity.setI_RENWUBH(cursor.getInt(offset + 0));
        entity.setI_XH(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setS_JH(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setN_BILI(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setI_JHTYPE(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setS_CID(cursor.getString(offset + 5));
        entity.setI_CHAOBIAONY(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setS_DZ(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setS_TIAOXINGM(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setI_YONGSHUIL(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setI_TIAOJIANSL(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setN_TIAOZHENGJE(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setS_SHENQINGYY(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setS_BEIZHU(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setI_LAIYUANBH(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setS_FUCHAJG(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setI_WANCHENGBZ(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setI_YINGCANGBZ(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setS_CAOZUOR(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setI_YUANCHAOM(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WaiFuGDDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(WaiFuGDDetail entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 插入数据
     */
    public boolean insertData(WaiFuGDDetail waiFuGDDetail) {
        if (this.insertOrReplace(waiFuGDDetail) == 0) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 远传表自转核查修改
     */
    public boolean updateYuanChuanBZZHC(int renWubh, String cid,
                                        String fuChaJG, int tiaoJianSL) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RENWUBH.eq(renWubh),Properties.S_CID.eq(cid));
        WaiFuGDDetail detail = (WaiFuGDDetail) qb.list().get(0);
        detail.setI_WANCHENGBZ(1);
        detail.setS_FUCHAJG(fuChaJG);
        detail.setI_TIAOJIANSL(tiaoJianSL);

        if (this.insertOrReplace(detail) == 0) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 远传表自转核查隐藏标志
     */
    public boolean updateYingCangBZ(int renWubh, String cid) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RENWUBH.eq(renWubh),Properties.S_CID.eq(cid));
        WaiFuGDDetail detail = (WaiFuGDDetail) qb.list().get(0);
        detail.setI_YINGCANGBZ(WaiFuGDDetailColumns.YINGCANGBZ_GONE);
        detail.setI_WANCHENGBZ(1);
        detail.setS_FUCHAJG("");
        detail.setI_TIAOJIANSL(0);

        if (this.insertOrReplace(detail) == 0) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 删除本地不需要的任务编号下所有的外复工单信息
     *
     * @param account
     *            操作员
     * @param AllRenWuBH
     *            所有需要的任务编号
     */
    public void deleteNotExistWaiFuGDDetail(String account, String AllRenWuBH) {
        QueryBuilder<WaiFuGDDetail> qb = this.queryBuilder();
        DeleteQuery<WaiFuGDDetail> bd;
        if (AllRenWuBH == null) {
            return;
        }
        else if (AllRenWuBH.equals("")) {
            bd = qb.where(Properties.S_CAOZUOR.eq(account)).buildDelete();
            bd.executeDeleteWithoutDetachingEntities();
            return;
        }
        bd = qb.where(Properties.I_RENWUBH.notIn(AllRenWuBH),Properties.S_CAOZUOR.eq(account)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 删除外复工单信息
     *
     * @param account
     *            操作员
     * @param renWuBH
     *            所有需要的任务编号
     */
    public void deleteWaiFuGDDetail(String account, int renWuBH) {
        QueryBuilder<WaiFuGDDetail> qb = this.queryBuilder();
        DeleteQuery<WaiFuGDDetail> bd = qb.where(Properties.S_CAOZUOR.eq(account),Properties.I_RENWUBH.eq(renWuBH)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 删除单条外复工单信息
     *
     * @param account
     *            操作员
     * @param renWuBH
     *            所有需要的任务编号
     */
    public void deleteWaiFuGDDetail_one(String account, int renWuBH, String CID) {
        QueryBuilder<WaiFuGDDetail> qb = this.queryBuilder();
        DeleteQuery<WaiFuGDDetail> bd = qb.where(Properties.S_CAOZUOR.eq(account),Properties.I_RENWUBH.eq(renWuBH),Properties.S_CID.eq(CID)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }

    /**
     * 通过renwubh查找单条外复明细
     */
    public WaiFuGDDetail getWaiFuGDDetail(int renwuBH , String CID) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RENWUBH.eq(renwuBH),Properties.S_CID.eq(CID));
        if (qb.list() == null){
            return null;
        }
        WaiFuGDDetail detail = (WaiFuGDDetail) qb.list().get(0);
        return detail;
    }

    /**
     * 通过renwubh查找外复明细
     */
    public List<WaiFuGDDetail> getWaiFuGDDetailList(int renwuBH, boolean isAll) {
        QueryBuilder qb = this.queryBuilder();
        if (isAll){
            qb.where(Properties.I_RENWUBH.eq(renwuBH));
            qb.orderAsc(Properties.I_XH);
        }else {
            qb.where(Properties.I_RENWUBH.eq(renwuBH),Properties.I_YINGCANGBZ.eq(WaiFuGDDetailColumns.YINGCANGBZ_VISIBLE));
            qb.orderAsc(Properties.I_XH);
        }
        List<WaiFuGDDetail> list = qb.list();
        return list;
    }

    /**
     * 获取操作人对应的的所有已完成的外复工单任务
     *
     * @param account
     *            操作人
     */
    public List<WaiFuGDDetail> getupdateWaiFuGDDetailList(String renwuBHs) {
        String[] str = renwuBHs.split(",");
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RENWUBH.in((Object[])str),Properties.I_WANCHENGBZ.eq(1));
        List<WaiFuGDDetail> list = qb.list();
        return list;
    }

    /**
     * 删除外复工单明细
     */
    public void deleteWaiFuGDDetailByBH(int renwubh) {
        QueryBuilder<WaiFuGDDetail> qb = this.queryBuilder();
        DeleteQuery<WaiFuGDDetail> bd = qb.where(Properties.I_RENWUBH.eq(renwubh)).buildDelete();
        bd.executeDeleteWithoutDetachingEntities();
    }


}
