package com.sh3h.dataprovider.greendaoDao;

import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.sh3h.dataprovider.schema.BiaoKaXXColumns;

import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 3;

    private static SQLiteDatabase db = null;

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ChaoBiaoRWDao.createTable(db, ifNotExists);
        ChaoBiaoSJDao.createTable(db, ifNotExists);
        ChaoBiaoBZDao.createTable(db, ifNotExists);
        ChaoBiaoGJDao.createTable(db, ifNotExists);
        ChaoBiaoJLDao.createTable(db, ifNotExists);
        HuanBiaoJLDao.createTable(db, ifNotExists);
        CiYuXXDao.createTable(db, ifNotExists);
        XinXiBGDao.createTable(db, ifNotExists);
        FeiYongZKLDao.createTable(db, ifNotExists);
        WordsInfoDao.createTable(db, ifNotExists);
        DingEJJBLDao.createTable(db, ifNotExists);
        FeiYongZCDao.createTable(db, ifNotExists);
        ShuiLiangFTXXDao.createTable(db, ifNotExists);
        JianHaoMXDao.createTable(db, ifNotExists);
        ReXianGDDao.createTable(db, ifNotExists);
        JianHaoDao.createTable(db, ifNotExists);
        ChaoBiaoRWDao.createTable(db, ifNotExists);
        ChaoBiaoSJDao.createTable(db, ifNotExists);
        ChaoBiaoZTDao.createTable(db, ifNotExists);
        ChaoBiaoZTFLDao.createTable(db, ifNotExists);
        DuoMeiTXXDao.createTable(db, ifNotExists);
        GuiJiDao.createTable(db, ifNotExists);
        NeiFuBZDao.createTable(db, ifNotExists);
        ZhuangTaiLXCSDao.createTable(db, ifNotExists);
        BIAOKAXXDao.createTable(db, ifNotExists);
        DengLuLSDao.createTable(db, ifNotExists);
        MetaInfoDao.createTable(db, ifNotExists);
        BiaoWuGDDao.createTable(db, ifNotExists);
        RenwuXXDao.createTable(db, ifNotExists);
        UsersDao.createTable(db, ifNotExists);
        WaiFuGDDetailDao.createTable(db, ifNotExists);
        WaiFuGDMainDao.createTable(db, ifNotExists);
        WaiFuYYDao.createTable(db, ifNotExists);
        YanChiBiaoDao.createTable(db, ifNotExists);
        JiaoFeiXXDao.createTable(db, ifNotExists);
        GongGaoXXDao.createTable(db, ifNotExists);
        YuanGongXXDao.createTable(db, ifNotExists);
        UserInfoDao.createTable(db, ifNotExists);
        JinEXXDao.createTable(db, ifNotExists);
        QianFeiXXDao.createTable(db, ifNotExists);
        RushPayRWDao.createTable(db, ifNotExists);
        JiChaRWDao.createTable(db, ifNotExists);
        JiChaSJDao.createTable(db, ifNotExists);
        WaiFuCBSJDao.createTable(db, ifNotExists);
        BiaoKaWholeEntityDao.createTable(db, ifNotExists);
        BiaoKaBeanDao.createTable(db, ifNotExists);
        BiaoKaListBeanDao.createTable(db, ifNotExists);
        XunJianTaskBeanDao.createTable(db, ifNotExists);
        XJXXWordBeanDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ChaoBiaoRWDao.dropTable(db, ifExists);
        ChaoBiaoSJDao.dropTable(db, ifExists);
        ChaoBiaoBZDao.dropTable(db, ifExists);
        ChaoBiaoGJDao.dropTable(db, ifExists);
        ChaoBiaoJLDao.dropTable(db, ifExists);
        HuanBiaoJLDao.dropTable(db, ifExists);
        CiYuXXDao.dropTable(db, ifExists);
        XinXiBGDao.dropTable(db, ifExists);
        FeiYongZKLDao.dropTable(db, ifExists);
        WordsInfoDao.dropTable(db, ifExists);
        DingEJJBLDao.dropTable(db, ifExists);
        FeiYongZCDao.dropTable(db, ifExists);
        ShuiLiangFTXXDao.dropTable(db, ifExists);
        JianHaoMXDao.dropTable(db, ifExists);
        ReXianGDDao.dropTable(db, ifExists);
        JianHaoDao.dropTable(db, ifExists);
        ChaoBiaoRWDao.dropTable(db, ifExists);
        ChaoBiaoSJDao.dropTable(db, ifExists);
        ChaoBiaoZTDao.dropTable(db, ifExists);
        ChaoBiaoZTFLDao.dropTable(db, ifExists);
        DuoMeiTXXDao.dropTable(db, ifExists);
        GuiJiDao.dropTable(db, ifExists);
        NeiFuBZDao.dropTable(db, ifExists);
        ZhuangTaiLXCSDao.dropTable(db, ifExists);
        BIAOKAXXDao.dropTable(db, ifExists);
        DengLuLSDao.dropTable(db, ifExists);
        MetaInfoDao.dropTable(db, ifExists);
        BiaoWuGDDao.dropTable(db, ifExists);
        RenwuXXDao.dropTable(db, ifExists);
        UsersDao.dropTable(db, ifExists);
        WaiFuGDDetailDao.dropTable(db, ifExists);
        WaiFuGDMainDao.dropTable(db, ifExists);
        WaiFuYYDao.dropTable(db, ifExists);
        YanChiBiaoDao.dropTable(db, ifExists);
        JiaoFeiXXDao.dropTable(db, ifExists);
        GongGaoXXDao.dropTable(db, ifExists);
        YuanGongXXDao.dropTable(db, ifExists);
        UserInfoDao.dropTable(db, ifExists);
        JinEXXDao.dropTable(db, ifExists);
        QianFeiXXDao.dropTable(db, ifExists);
        RushPayRWDao.dropTable(db, ifExists);
        JiChaRWDao.dropTable(db, ifExists);
        JiChaSJDao.dropTable(db, ifExists);
        WaiFuCBSJDao.dropTable(db, ifExists);
        BiaoKaWholeEntityDao.dropTable(db, ifExists);
        BiaoKaBeanDao.dropTable(db, ifExists);
        BiaoKaListBeanDao.dropTable(db, ifExists);
        XunJianTaskBeanDao.dropTable(db, ifExists);
        XJXXWordBeanDao.dropTable(db, ifExists);
    }

    public static void createQianFeiXXTables(SQLiteDatabase db, boolean ifNotExists) {
        QianFeiXXDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropQianFeiXXTables(SQLiteDatabase db, boolean ifExists) {
        QianFeiXXDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        private static SQLiteDatabase openDateBase(Context context, String dbPath) {

            SQLiteDatabase db = context.openOrCreateDatabase(dbPath,
                    Context.MODE_PRIVATE, null);
            return db;
        }

        public static SQLiteDatabase getSQLiteDatabase(String path,Context context) {
//            if (db == null) {
//                File sdDir = Environment.getExternalStorageDirectory();
//                File dataDir = new File(sdDir, "sh3h/meterreading/data");
//                File dataFile = new File(dataDir, "main.cbj");
//                db = openDateBase(context, dataFile.getPath());
//            }

            if ((path == null) || (context == null)) {
                return null;
            }

            if (db == null) {
//                db = context.openOrCreateDatabase(path, Context.MODE_PRIVATE, null);
                db = openDateBase(context, path);
            }
            return db;
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");

        }
    }

    /**
     * WARNING: Drops all table on Upgrade! Use only during development.
     */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
//            while (oldVersion < newVersion) {
//                oldVersion++;
//                updateChaoBiaoRW(oldVersion, db);
//                updateChaoBiaoSJ(oldVersion, db);
//                updateBiaoKaXX(oldVersion, db);
//            }

            if (newVersion > oldVersion) {
                // 升级、数据库迁移操作
                MigrationHelper.getInstance().migrate(db, QianFeiXXDao.class);
            } else {
                // 默认操作
                dropAllTables(db, true);
                onCreate(db);
            }
        }
    }

    /**
     * 更新欠费信息
     *
     * @param newVersion
     * @param db
     */
    public void updateQianFeiXX(int newVersion, SQLiteDatabase db) {
        switch (newVersion) {
            case 3:
                try {
                    String sql1 = "alter table ZW_QianFeiXX add N_SHUIFEI REAL NOT NULL  default 0";
                    String sql2 = "alter table ZW_QianFeiXX add N_PAISHUIF REAL NOT NULL default 0";
                    db.execSQL(sql1);
                    db.execSQL(sql2);


                } catch (SQLException e) {
                    e.printStackTrace();
                }
                break;
            default:
                break;
        }
    }

    /**
     * add I_DownloadType and I_GroupId
     *
     * @param db 执行数据库代码
     */
//    private static void updateChaoBiaoRW(int newVersion, SQLiteDatabase db) {
//        switch (newVersion) {
//            case 2:
//                //<editor-fold 任务表由1更新至2>
//                //1.将表名改为临时表
//                String updateTableName = "ALTER TABLE " + ChaoBiaoRWDao.TABLENAME + " RENAME TO Temp_CB_ChaoBiaoRW;";
//
//                //2.创建新表
//                String createTable = "CREATE TABLE " + ChaoBiaoRWDao.TABLENAME + "(" +
//                        "'ID' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT," + // 0: ID
//                        "'I_RENWUBH' INTEGER," + // 1: I_RenWuBH
//                        "'S_CHAOBIAOYBH' TEXT," + // 2: S_ChaoBiaoYBH
//                        "'S_CHAOBIAOYXM' TEXT," + // 3: S_ChaoBiaoYXM
//                        "'D_PAIFASJ' INTEGER," + // 4: D_PaiFaSJ
//                        "'I_ZHANGWUNY' INTEGER NOT NULL ," + // 5: I_ZhangWuNY
//                        "'S_CH' TEXT NOT NULL ," + // 6: S_CH
//                        "'S_CEBENMC' TEXT," + // 7: S_CeBenMC
//                        "'S_CHAOBIAOZQ' TEXT," + // 8: S_CHAOBIAOZQ
//                        "'I_GONGCI' INTEGER NOT NULL ," + // 9: I_GongCi
//                        "'S_ST' TEXT," + // 10: S_ST
//                        "'I_ZONGSHU' INTEGER," + // 11: I_ZongShu
//                        "'I_YICHAOSHU' INTEGER," + // 12: I_YICHAOSHU
//                        "'I_TONGBUBZ' INTEGER," +  // 13: I_TongBuBZ
//                        "'I_DownloadType' INTEGER ," + //14: I_DownloadType
//                        "'I_GroupId' INTEGER);";  //15: I_GroupId
//
//                //3.导入数据
//                String importData = "INSERT INTO " + ChaoBiaoRWDao.TABLENAME + " SELECT ID,I_RENWUBH,S_CHAOBIAOYBH,S_CHAOBIAOYXM," +
//                        "D_PAIFASJ,I_ZHANGWUNY,S_CH,S_CEBENMC,S_CHAOBIAOZQ,I_GONGCI,S_ST,I_ZONGSHU," +
//                        "I_YICHAOSHU,I_TONGBUBZ FROM Temp_CB_ChaoBiaoRW;";
//
//                //4.删除临时表
//                String deleteTable = "DROP TABLE Temp_CB_ChaoBiaoRW;";
//
//                db.execSQL(updateTableName);
//                db.execSQL(createTable);
//                db.execSQL(importData);
//                db.execSQL(deleteTable);
//                //</editor-fold>
//                break;
//            default:
//                break;
//        }
//    }

    /**
     * add I_DownloadType and I_GroupId and I_SortIndex
     *
     * @param db 执行数据库代码
     */
//    private static void updateChaoBiaoSJ(int newVersion, SQLiteDatabase db) {
//        switch (newVersion) {
//            case 2:
//                //<editor-fold 任务表由1更新至2>
//                //1.将表名改为临时表
//                String updateTableName = "ALTER TABLE " + ChaoBiaoSJDao.TABLENAME + " RENAME TO Temp_CB_CHAOBIAOSJ;";
//
//                //2.创建新表
//                String createTable = "CREATE TABLE " + ChaoBiaoSJDao.TABLENAME + "(" +
//                        "'ID' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT," + // 0: ID
//                        "'I_RENWUBH' INTEGER," + // 1: I_RenWuBH
//                        "'S_CH' TEXT NOT NULL ," + // 2: S_CH
//                        "'I_CENEIXH' INTEGER NOT NULL ," + // 3: I_CENEIXH
//                        "'S_CID' TEXT NOT NULL ," + // 4: S_CID
//                        "'S_ST' TEXT NOT NULL ," + // 5: S_ST
//                        "'I_CHAOBIAON' INTEGER NOT NULL ," + // 6: I_CHAOBIAON
//                        "'I_CHAOBIAOY' INTEGER NOT NULL ," + // 7: I_CHAOBIAOY
//                        "'I_CC' INTEGER NOT NULL ," + // 8: I_CC
//                        "'D_CHAOBIAORQ' INTEGER," + // 9: D_CHAOBIAORQ
//                        "'I_SHANGCICM' INTEGER NOT NULL ," + // 10: I_SHANGCICM
//                        "'I_BENCICM' INTEGER," + // 11: I_BENCICM
//                        "'I_CHAOJIANSL' INTEGER," + // 12: I_CHAOJIANSL
//                        "'I_ZHUANGTAIBM' INTEGER," + // 13: I_ZHUANGTAIBM
//                        "'S_ZHUANGTAIMC' TEXT," + // 14: S_ZHUANGTAIMC
//                        "'D_SHANGCICBRQ' INTEGER," + // 15: D_SHANGCICBRQ
//                        "'I_SHANGCIZTBM' INTEGER," + // 16: I_SHANGCIZTBM
//                        "'S_SHANGCIZTMC' TEXT," + // 17: S_ShangCiZTMC
//                        "'I_SHANGCICJSL' INTEGER," + // 18: I_ShangCiCJSL
//                        "'I_SHANGCIZTLXS' INTEGER," + // 19: I_SHANGCIZTLXS
//                        "'I_PINGJUNL1' INTEGER," + // 20: I_PINGJUNL1
//                        "'I_PINGJUNL2' INTEGER," + // 21: I_PINGJUNL2
//                        "'I_PINGJUNL3' INTEGER," + // 22: I_PINGJUNL3
//                        "'N_JE' REAL," + // 23: N_JE
//                        "'S_ZONGBIAOCID' TEXT," + // 24: S_ZONGBIAOCID
//                        "'S_CHAOBIAOY' TEXT," + // 25: S_CHAOBIAOY
//                        "'I_CHAOBIAOBZ' INTEGER," + // 26: I_CHAOBIAOBZ
//                        "'I_JIUBIAOCM' INTEGER," + // 27: I_JIUBIAOCM
//                        "'I_XINBIAODM' INTEGER," + // 28: I_XINBIAODM
//                        "'D_HUANBIAORQ' INTEGER," + // 29: D_HUANBIAORQ
//                        "'I_FANGSHIBM' INTEGER," + // 30: I_FANGSHIBM
//                        "'I_LIANGGAOLDYYBM' INTEGER," + // 31: I_LIANGGAOLDYYBM
//                        "'I_CHAOBIAOID' INTEGER," + // 32: I_CHAOBIAOID
//                        "'I_ZHUANGTAILXS' INTEGER," + // 33: I_ZHUANGTAILXS
//                        "'I_SHUIBIAOBL' INTEGER," + // 34: I_SHUIBIAOBL
//                        "'N_YONGSHUIZKL' REAL," + // 35: N_YONGSHUIZKL
//                        "'N_PAISHUIZKL' REAL," + // 36: N_PAISHUIZKL
//                        "'I_TIAOJIAH' INTEGER," + // 37: I_TIAOJIAH
//                        "'S_JIANHAO' TEXT NOT NULL ," + // 38: S_JianHao
//                        "'D_XIAZAISJ' INTEGER NOT NULL ," + // 39: D_XIAZAISJ
//                        "'I_LINGYONGSLSM' INTEGER," + // 40: I_LINGYONGSLSM
//                        "'I_LIANGGAOSL' INTEGER," + // 41: I_LIANGGAOSL
//                        "'I_LIANGDISL' INTEGER," + // 42: I_LIANGDISL
//                        "'S_X1' TEXT," + // 43: S_X1
//                        "'S_Y1' TEXT," + // 44: S_Y1
//                        "'S_X' TEXT," + // 45: S_X
//                        "'S_Y' TEXT," + // 46: S_Y
//                        "'S_CHAOBIAOBZ' TEXT," + // 47: S_CHAOBIAOBZ
//                        "'I_CENEIPX' INTEGER," + // 48: I_CeNeiPX
//                        "'I_XIAZAICS' INTEGER," + // 49: I_XiaZaiCS
//                        "'D_ZUIHOUYCXZSJ' INTEGER," + // 50: D_ZuiHouYCXZSJ
//                        "'D_ZUIHOUYCSCSJ' INTEGER," + // 51: D_ZuiHouYCSCSJ
//                        "'I_SHANGCHUANBZ' INTEGER," + // 52: I_ShangChuanBZ
//                        "'I_SHENHEBZ' INTEGER," + // 53: I_ShenHeBZ
//                        "'I_KAIZHANGBZ' INTEGER," + // 54: I_KaiZhangBZ
//                        "'I_DIAODONGBZ' INTEGER," + // 55: I_DiaoDongBZ
//                        "'I_WAIFUYYBH' INTEGER," + // 56: I_WaiFuYYBH
//                        "'S_JIETITS' TEXT," + // 57: S_JIETITS
//                        "'S_YANCIYY' TEXT," + // 58: S_YANCIYY
//                        "'I_LASTREADINGCHILD' INTEGER," + // 59: I_LASTREADINGCHILD
//                        "'I_READINGCHILD' INTEGER," + // 60: I_READINGCHILD
//                        "'I_DownloadType' INTEGER ," + //61: I_DownloadType
//                        "'I_GroupId' INTEGER," +    //62: I_GroupId
//                        "'I_SortIndex' INTEGER);";  //63: I_SortIndex
//                //3.导入数据
//                String importData = "INSERT INTO " + ChaoBiaoSJDao.TABLENAME + " SELECT ID,I_RENWUBH,S_CH,I_CENEIXH,S_CID,S_ST,I_CHAOBIAON," +
//                        "I_CHAOBIAOY,I_CC,D_CHAOBIAORQ,I_SHANGCICM,I_BENCICM,I_CHAOJIANSL,I_ZHUANGTAIBM,S_ZHUANGTAIMC,D_SHANGCICBRQ," +
//                        "I_SHANGCIZTBM,S_SHANGCIZTMC,I_SHANGCICJSL,I_SHANGCIZTLXS,I_PINGJUNL1,I_PINGJUNL2,I_PINGJUNL3,N_JE,S_ZONGBIAOCID," +
//                        "S_CHAOBIAOY,I_CHAOBIAOBZ,I_JIUBIAOCM,I_XINBIAODM,D_HUANBIAORQ,I_FANGSHIBM,I_LIANGGAOLDYYBM,I_CHAOBIAOID,I_ZHUANGTAILXS," +
//                        "I_SHUIBIAOBL,N_YONGSHUIZKL,N_PAISHUIZKL,I_TIAOJIAH,S_JIANHAO,D_XIAZAISJ,I_LINGYONGSLSM,I_LIANGGAOSL,I_LIANGDISL,S_X1," +
//                        "S_Y1,S_X,S_Y,S_CHAOBIAOBZ,I_CENEIPX,I_XIAZAICS,D_ZUIHOUYCXZSJ,D_ZUIHOUYCSCSJ,I_SHANGCHUANBZ,I_SHENHEBZ,I_KAIZHANGBZ," +
//                        "I_DIAODONGBZ, I_WAIFUYYBH, S_JIETITS,S_YANCIYY, I_LASTREADINGCHILD, I_READINGCHILD" +
//                        "FROM Temp_CB_CHAOBIAOSJ;";
//
//                //4.删除临时表
//                String deleteTable = "DROP TABLE Temp_CB_CHAOBIAOSJ;";
//
//                db.execSQL(updateTableName);
//                db.execSQL(createTable);
//                db.execSQL(importData);
//                db.execSQL(deleteTable);
//                //</editor-fold>
//                break;
//            default:
//                break;
//        }
//    }

    /**
     * add I_DownloadType and I_GroupId
     *
     * @param db 执行数据库代码
     */
//    private static void updateBiaoKaXX(int newVersion, SQLiteDatabase db) {
//        switch (newVersion) {
//            case 2:
//                //<editor-fold 任务表由1更新至2>
//                //1.将表名改为临时表
//                String updateTableName = "ALTER TABLE " + BIAOKAXXDao.TABLENAME + " RENAME TO Temp_KG_BIAOKAXX;";
//
//                //2.创建新表
//                String createTable = "CREATE TABLE " + BIAOKAXXDao.TABLENAME + "(" +
//                        "'ID' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ," + // 0: ID
//                        "'S_CH' TEXT NOT NULL ," + // 1: S_CH
//                        "'I_CENEIXH' INTEGER NOT NULL ," + // 2: I_CENEIXH
//                        "'S_CID' TEXT NOT NULL ," + // 3: S_CID
//                        "'S_KEHUBH' TEXT NOT NULL ," + // 4: S_KEHUBH
//                        "'S_KeHuMC' TEXT NOT NULL ," + // 5: S_KeHuMC
//                        "'S_ST' TEXT NOT NULL ," + // 6: S_ST
//                        "'S_DiZhi' TEXT NOT NULL ," + // 7: S_DiZhi
//                        "'S_LIANXIR' TEXT," + // 8: S_LIANXIR
//                        "'S_LIANXISJ' TEXT," + // 9: S_LIANXISJ
//                        "'S_LIANXIDH' TEXT," + // 10: S_LIANXIDH
//                        "'S_ShouFeiFS' TEXT," + // 11: S_ShouFeiFS
//                        "'S_YinHangMC' TEXT," + // 12: S_YinHangMC
//                        "'S_JianHao' TEXT NOT NULL ," + // 13: S_JianHao
//                        "'S_JianHaoMC' TEXT," + // 14: S_JianHaoMC
//                        "'I_YongHuZT' INTEGER," + // 15: I_YongHuZT
//                        "'D_LIHU' INTEGER," + // 16: D_LIHU
//                        "'S_BiaoWei' TEXT," + // 17: S_BiaoWei
//                        "'S_SHUIBIAOGYH' TEXT," + // 18: S_SHUIBIAOGYH
//                        "'S_SHUIBIAOTXM' TEXT," + // 19: S_SHUIBIAOTXM
//                        "'S_KOUJINGMC' TEXT," + // 20: S_KOUJINGMC
//                        "'I_LIANGCHENG' INTEGER," + // 21: I_LIANGCHENG
//                        "'S_BIAOXING' TEXT," + // 22: S_BIAOXING
//                        "'S_SHUIBIAOCJ' TEXT," + // 23: S_SHUIBIAOCJ
//                        "'I_ShuiBiaoFL' INTEGER," + // 24: I_ShuiBiaoFL
//                        "'S_ShuiBiaoFLMC' TEXT," + // 25: S_ShuiBiaoFLMC
//                        "'I_SHUIBIAOBL' INTEGER NOT NULL ," + // 26: I_SHUIBIAOBL
//                        "'S_KaiZhangFL' TEXT," + // 27: S_KaiZhangFL
//                        "'I_GONGNENGFL' INTEGER NOT NULL ," + // 28: I_GONGNENGFL
//                        "'I_ShiFouJHYS' INTEGER," + // 29: I_ShiFouJHYS
//                        "'I_ShiFouShouLJF' INTEGER," + // 30: I_ShiFouShouLJF
//                        "'N_LaJiFeiXS' REAL," + // 31: N_LaJiFeiXS
//                        "'I_ShiFouShouWYJ' INTEGER," + // 32: I_ShiFouShouWYJ
//                        "'I_ShiFouDEJJ' INTEGER," + // 33: I_ShiFouDEJJ
//                        "'I_DINGESL' INTEGER NOT NULL ," + // 34: I_DINGESL
//                        "'S_ZONGBIAOBH' TEXT," + // 35: S_ZONGBIAOBH
//                        "'D_ZHUANGBIAORQ' INTEGER," + // 36: D_ZHUANGBIAORQ
//                        "'D_HUANBIAORQ' INTEGER," + // 37: D_HUANBIAORQ
//                        "'I_XINBIAODM' INTEGER NOT NULL ," + // 38: I_XINBIAODM
//                        "'I_JIUBIAOCM' INTEGER," + // 39: I_JIUBIAOCM
//                        "'S_X1' TEXT," + // 40: S_X1
//                        "'S_Y1' TEXT," + // 41: S_Y1
//                        "'S_X' TEXT," + // 42: S_X
//                        "'S_Y' TEXT," + // 43: S_Y
//                        "'I_FENTANFS' INTEGER," + // 44: I_FENTANFS
//                        "'I_FENTANL' INTEGER," + // 45: I_FENTANL
//                        "'N_YUCUNKYE' REAL," + // 46: N_YuCunKYE
//                        "'I_QIANFEIZBS' INTEGER," + // 47: I_QianFeiZBS
//                        "'N_QIANFEIZJE' REAL," + // 48: N_QianFeiZJE
//                        "'S_BEIZHU' TEXT," + // 49: S_BEIZHU
//                        "'I_SHUIBIAOZT' INTEGER," + // 50: I_SHUIBIAOZT
//                        "'N_RENKOUS' REAL," + // 51: N_RENKOUS
//                        "'I_DIBAOYHSL' INTEGER," + // 52: I_DIBAOYHSL
//                        "'I_GONGCEYHSL' INTEGER," + // 53: I_GONGCEYHSL
//                        "'N_YONGSHUIZKL' REAL," + // 54: N_YONGSHUIZKL
//                        "'N_PAISHUIZKL' REAL," + // 55: N_PAISHUIZKL
//                        "'N_ZHEKOUL1' REAL," + // 56: N_ZHEKOUL1
//                        "'N_ZHEKOUL2' REAL," + // 57: N_ZHEKOUL2
//                        "'N_ZHEKOUL3' REAL," + // 58: N_ZHEKOUL3
//                        "'I_ERCIGS' INTEGER," + // 59: I_ERCIGS
//                        "'I_DIANZIZD' INTEGER," + // 60: I_DIANZIZD
//                        "'S_XINGZHENGQ' TEXT," + // 61: S_XINGZHENGQ
//                        "'S_BIAOKAZT' TEXT," + // 62: S_BIAOKAZT
//                        "'S_SHESHUIID' TEXT," + // 63: S_SHESHUIID
//                        "'N_JIAGE' REAL," + // 64: N_JIAGE
//                        "'S_SHUIBIAOLXBH' TEXT," + // 65: S_SHUIBIAOLXBH
//                        "'N_ZIZHUANGBKZXS' REAL," + // 66: N_ZIZHUANGBKZXS
//                        "'S_SHUIBIAOZL' TEXT," + // 67: S_SHUIBIAOZL
//                        "'S_SHUIBIAOFL' TEXT," + // 68: S_SHUIBIAOFL
//                        "'S_YUANCHUANID' TEXT," + // 69: S_YUANCHUANID
//                        "'S_ZHONGDUANH' TEXT," + // 70: S_ZHONGDUANH
//                        "'S_YUANCHUANCJ' TEXT," + // 71: S_YUANCHUANCJ
//                        "'S_DUORENKFA' TEXT," + // 72: S_DUORENKFA
//                        "'I_SHIFOUJT' INTEGER," + // 73: I_SHIFOUJT
//                        "'D_DUORENKJZ' INTEGER," + // 74: D_DUORENKJZ
//                        "'D_GONGSHUIHTNX' INTEGER," + // 75: D_GONGSHUIHTNX
//                        "'S_FANGDONGDH' TEXT," + // 76: S_FANGDONGDH
//                        "'S_FANGKEDH' TEXT," + // 77: S_FANGKEDH
//                        "'I_NIANLEIJ' INTEGER DEFAULT (0)," + // 78: I_NIANLEIJ
//                        "'I_HUANBIAO' INTEGER," + // 79: I_HUANBIAO
//                        "'I_QIANFEI' INTEGER," + // 80: I_QIANFEI
//                        "'I_XIUGAIBZ' INTEGER DEFAULT (0)," + // 81: I_XIUGAIBZ
//                        "'I_SHANGCHUANBZ' INTEGER DEFAULT (0)," + //82: I_SHANGCHUANBZ
//                        "'I_DownloadType' INTEGER ," +
//                        "'I_GroupId' INTEGER);";
//
//                //3.导入数据
//                String importData = "INSERT INTO " + ChaoBiaoSJDao.TABLENAME + " SELECT ID,S_CH,I_CENEIXH,S_CID,S_KEHUBH,S_KeHuMC,S_ST,S_DiZhi," +
//                        "S_LIANXIR,S_LIANXISJ,S_LIANXIDH,S_ShouFeiFS,S_YinHangMC,S_JianHao,S_JianHaoMC,I_YongHuZT,D_LIHU, S_BiaoWei,S_SHUIBIAOGYH," +
//                        "S_SHUIBIAOTXM,S_KOUJINGMC,I_LIANGCHENG,S_BIAOXING,S_SHUIBIAOCJ,I_ShuiBiaoFL,S_ShuiBiaoFLMC,I_SHUIBIAOBL,S_KaiZhangFL,I_GONGNENGFL," +
//                        "I_ShiFouJHYS,I_ShiFouShouLJF,N_LaJiFeiXS,I_ShiFouShouWYJ,I_ShiFouDEJJ,I_DINGESL,S_ZONGBIAOBH,D_ZHUANGBIAORQ,D_HUANBIAORQ,I_XINBIAODM," +
//                        "I_JIUBIAOCM,S_X1,S_Y1,S_X,S_Y,I_FENTANFS, I_FENTANL, N_YUCUNKYE, I_QIANFEIZBS,N_QIANFEIZJE,S_BEIZHU,I_SHUIBIAOZT,N_RENKOUS,I_DIBAOYHSL," +
//                        "I_GONGCEYHSL,N_YONGSHUIZKL,N_PAISHUIZKL,N_ZHEKOUL1,N_ZHEKOUL2,N_ZHEKOUL3,I_ERCIGS,I_DIANZIZD,S_XINGZHENGQ,S_BIAOKAZT,S_SHESHUIID,N_JIAGE," +
//                        "S_SHUIBIAOLXBH,N_ZIZHUANGBKZXS,S_SHUIBIAOZL,S_SHUIBIAOFL,S_YUANCHUANID,S_ZHONGDUANH,S_YUANCHUANCJ,S_DUORENKFA,I_SHIFOUJT,D_DUORENKJZ," +
//                        "D_GONGSHUIHTNX,S_FANGDONGDH,S_FANGKEDH, I_NIANLEIJ, I_HUANBIAO, I_QIANFEI, I_XIUGAIBZ, I_SHANGCHUANBZ" +
//                        "FROM Temp_KG_BIAOKAXX;";
//
//
//                //4.删除临时表
//                String deleteTable = "DROP TABLE Temp_KG_BIAOKAXX;";
//
//                db.execSQL(updateTableName);
//                db.execSQL(createTable);
//                db.execSQL(importData);
//                db.execSQL(deleteTable);
//                //</editor-fold>
//                break;
//            default:
//                break;
//        }
//    }
    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ChaoBiaoRWDao.class);
        registerDaoClass(ChaoBiaoSJDao.class);
        registerDaoClass(ChaoBiaoBZDao.class);
        registerDaoClass(ChaoBiaoGJDao.class);
        registerDaoClass(ChaoBiaoJLDao.class);
        registerDaoClass(HuanBiaoJLDao.class);
        registerDaoClass(CiYuXXDao.class);
        registerDaoClass(XinXiBGDao.class);
        registerDaoClass(FeiYongZKLDao.class);
        registerDaoClass(WordsInfoDao.class);
        registerDaoClass(DingEJJBLDao.class);
        registerDaoClass(FeiYongZCDao.class);
        registerDaoClass(ShuiLiangFTXXDao.class);
        registerDaoClass(JianHaoMXDao.class);
        registerDaoClass(ReXianGDDao.class);
        registerDaoClass(JianHaoDao.class);
        registerDaoClass(ChaoBiaoRWDao.class);
        registerDaoClass(ChaoBiaoSJDao.class);
        registerDaoClass(ChaoBiaoZTDao.class);
        registerDaoClass(ChaoBiaoZTFLDao.class);
        registerDaoClass(DuoMeiTXXDao.class);
        registerDaoClass(GuiJiDao.class);
        registerDaoClass(NeiFuBZDao.class);
        registerDaoClass(ZhuangTaiLXCSDao.class);
        registerDaoClass(BIAOKAXXDao.class);
        registerDaoClass(DengLuLSDao.class);
        registerDaoClass(MetaInfoDao.class);
        registerDaoClass(BiaoWuGDDao.class);
        registerDaoClass(RenwuXXDao.class);
        registerDaoClass(UsersDao.class);
        registerDaoClass(WaiFuGDDetailDao.class);
        registerDaoClass(WaiFuGDMainDao.class);
        registerDaoClass(WaiFuYYDao.class);
        registerDaoClass(YanChiBiaoDao.class);
        registerDaoClass(JiaoFeiXXDao.class);
        registerDaoClass(GongGaoXXDao.class);
        registerDaoClass(YuanGongXXDao.class);
        registerDaoClass(UserInfoDao.class);
        registerDaoClass(JinEXXDao.class);
        registerDaoClass(QianFeiXXDao.class);
        registerDaoClass(RushPayRWDao.class);
        registerDaoClass(JiChaRWDao.class);
        registerDaoClass(JiChaSJDao.class);
        registerDaoClass(WaiFuCBSJDao.class);
        registerDaoClass(BiaoKaBeanDao.class);
        registerDaoClass(BiaoKaListBeanDao.class);
        registerDaoClass(BiaoKaWholeEntityDao.class);
        registerDaoClass(XunJianTaskBeanDao.class);
        registerDaoClass(XJXXWordBeanDao.class);
    }

    public static SQLiteDatabase getSQLiteDatabase(String path, Context context) {
        if ((path == null) || (context == null)) {
            return null;
        }

        if (db == null) {
            db = context.openOrCreateDatabase(path, Context.MODE_PRIVATE, null);
        }
        return db;
    }

    private static void updateDuoMeiTXXSql() {
        String sql1 = "ALTER TABLE " + DuoMeiTXXDao.TABLENAME + " ADD COLUMN S_URL TEXT;";
        String sql2 = "ALTER TABLE " + DuoMeiTXXDao.TABLENAME + " ADD COLUMN S_FILEHASH TEXT;";

        db.beginTransaction();//开始事务
        try {
            db.execSQL(sql1);
            db.execSQL(sql2);
            db.setTransactionSuccessful();//调用此方法会在执行到endTransaction() 时提交当前事务，如果不调用此方法会回滚事务
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();//由事务的标志决定是提交事务，还是回滚事务
        }
    }

    private static void updateChaoBiaoSJSql(String data) {
        String sql = "ALTER TABLE " + ChaoBiaoSJDao.TABLENAME + data;

        db.beginTransaction();//开始事务
        try {
            db.execSQL(sql);
            db.setTransactionSuccessful();//调用此方法会在执行到endTransaction() 时提交当前事务，如果不调用此方法会回滚事务
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();//由事务的标志决定是提交事务，还是回滚事务
        }
    }


    private static void updateWaiFuSJSql() {
        String sql1 = "ALTER TABLE " + WaiFuCBSJDao.TABLENAME + " ADD COLUMN I_CHECKOUTSIDETYPE  INTEGER DEFAULT 0;";

        db.beginTransaction();//开始事务
        try {
            db.execSQL(sql1);
            db.setTransactionSuccessful();//调用此方法会在执行到endTransaction() 时提交当前事务，如果不调用此方法会回滚事务
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();//由事务的标志决定是提交事务，还是回滚事务
        }
    }

    private static void updateBiaoKaXXSql() {
        boolean isd = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.D_STRONGDATE);

        boolean isExistKuaiHao = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.S_KUAIHAO);
        boolean isExistPayMethod = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.I_PAYMETHOD);
        boolean isExistCaliberValue = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.I_CALIBERVALUE);
        boolean isExistMonthTotal = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.I_MONTHTOTAL);
        boolean isExistQuarterTotal = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.I_QUARTERTOTAL);
        boolean isExistYearTotal = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.I_YEARTOTAL);
        boolean isExistExtraData = checkColumnExist(db, BIAOKAXXDao.TABLENAME, BiaoKaXXColumns.S_EXTEND);
        if (isExistKuaiHao && isExistPayMethod && isExistCaliberValue && isExistMonthTotal
                && isExistQuarterTotal && isExistYearTotal && isExistExtraData) {
            return;
        }

        db.beginTransaction();//开始事务
        try {
            if (!isExistKuaiHao) {
                db.execSQL("ALTER TABLE " + BIAOKAXXDao.TABLENAME + " ADD COLUMN " + BiaoKaXXColumns.S_KUAIHAO + " TEXT;");
            }
            if (!isExistPayMethod) {
                db.execSQL("ALTER TABLE " + BIAOKAXXDao.TABLENAME + " ADD COLUMN " + BiaoKaXXColumns.I_PAYMETHOD + " INTEGER DEFAULT 0;");
            }
            if (!isExistCaliberValue) {
                db.execSQL("ALTER TABLE " + BIAOKAXXDao.TABLENAME + " ADD COLUMN " + BiaoKaXXColumns.I_CALIBERVALUE + " INTEGER DEFAULT 0;");
            }
            if (!isExistMonthTotal) {
                db.execSQL("ALTER TABLE " + BIAOKAXXDao.TABLENAME + " ADD COLUMN " + BiaoKaXXColumns.I_MONTHTOTAL + " INTEGER DEFAULT 0;");
            }
            if (!isExistQuarterTotal) {
                db.execSQL("ALTER TABLE " + BIAOKAXXDao.TABLENAME + " ADD COLUMN " + BiaoKaXXColumns.I_QUARTERTOTAL + " INTEGER DEFAULT 0;");
            }
            if (!isExistYearTotal) {
                db.execSQL("ALTER TABLE " + BIAOKAXXDao.TABLENAME + " ADD COLUMN " + BiaoKaXXColumns.I_YEARTOTAL + " INTEGER DEFAULT 0;");
            }
            if (!isExistExtraData) {
                db.execSQL("ALTER TABLE " + BIAOKAXXDao.TABLENAME + " ADD COLUMN " + BiaoKaXXColumns.S_EXTEND + " TEXT;");
            }
            db.setTransactionSuccessful();//调用此方法会在执行到endTransaction() 时提交当前事务，如果不调用此方法会回滚事务
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            db.endTransaction();//由事务的标志决定是提交事务，还是回滚事务
        }
    }

    /**
     * 方法1：检查某表列是否存在
     *
     * @param db
     * @param tableName  表名
     * @param columnName 列名
     * @return
     */
    private static boolean checkColumnExist(SQLiteDatabase db, String tableName, String columnName) {
        boolean result = false;
        Cursor cursor = null;
        try {
            //查询一行
            cursor = db.rawQuery("SELECT * FROM " + tableName + " LIMIT 0", null);
            result = cursor != null && cursor.getColumnIndex(columnName) != -1;
        } catch (Exception e) {
            Log.e("", "checkColumnExists..." + e.getMessage());
        } finally {
            if (null != cursor && !cursor.isClosed()) {
                cursor.close();
            }
        }

        return result;
    }


    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.None, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

}
