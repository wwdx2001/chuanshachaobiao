package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.serverprovider.entity.XunJianTaskBean;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "XUN_JIAN_TASK_BEAN".
*/
public class XunJianTaskBeanDao extends AbstractDao<XunJianTaskBean, Long> {

    public static final String TABLENAME = "XUN_JIAN_TASK_BEAN";

  public boolean SaveXunJianTasks(List<XunJianTaskBean> xunJianTaskBeans) {
    if (xunJianTaskBeans == null) {
      return false;
    }
      insertOrReplaceInTx(xunJianTaskBeans);

    return true;
  }

  public List<XunJianTaskBean> getloadXunJianTask() {
   return loadAll();
  }

  public List<XunJianTaskBean> getLocalXunJianTasks(String type) {
    QueryBuilder qb = this.queryBuilder();
    return qb.where(XunJianTaskBeanDao.Properties.XunjianTaskType.eq(type))
      .list();

  }

  public List<XunJianTaskBean> getXunJianTaskBean(String renwumc) {
    QueryBuilder qb = this.queryBuilder();

    return qb.where(XunJianTaskBeanDao.Properties.RENWUMC.eq(renwumc))
      .list();
  }

  public List<XunJianTaskBean> getXunJianTaskBean2(String xunjiantaskType) {
    QueryBuilder qb = this.queryBuilder();

    return qb.where(XunJianTaskBeanDao.Properties.XunjianTaskType.notEq(xunjiantaskType))
      .list();
  }



  public List<XunJianTaskBean> getXunJianFuHeTaskBean(String xunjiantaskType) {
    QueryBuilder qb = this.queryBuilder();

    return qb.where(XunJianTaskBeanDao.Properties.XunjianTaskType.eq(xunjiantaskType))
      .list();
  }

  public boolean saveXunJianTaskBean(ArrayList<XunJianTaskBean> xunjianTasks) {
    try {
      insertOrReplaceInTx(xunjianTasks);
      return true;
    }catch (Exception e){
      return false;
    }

  }

  public boolean saveXunJianTaskBean2(XunJianTaskBean xunJianTaskBean) {
    try {
      insertOrReplace(xunJianTaskBean);
      return true;
    }catch (Exception e){
      return false;
    }
  }

  /**
     * Properties of entity XunJianTaskBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property RENWUMC = new Property(1, String.class, "RENWUMC", false, "RENWUMC");
        public final static Property PAIFASJ = new Property(2, String.class, "PAIFASJ", false, "PAIFASJ");
        public final static Property ZONGHS = new Property(3, int.class, "ZONGHS", false, "ZONGHS");
        public final static Property YIWANC = new Property(4, int.class, "YIWANC", false, "YIWANC");
        public final static Property XunjianTaskType = new Property(5, String.class, "xunjianTaskType", false, "XUNJIAN_TASK_TYPE");
        public final static Property XJLX = new Property(6, String.class, "XJLX", false, "XJLX");
        public final static Property IsFinish = new Property(7, boolean.class, "isFinish", false, "IS_FINISH");
    }


    public XunJianTaskBeanDao(DaoConfig config) {
        super(config);
    }
    
    public XunJianTaskBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XUN_JIAN_TASK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"RENWUMC\" TEXT," + // 1: RENWUMC
                "\"PAIFASJ\" TEXT," + // 2: PAIFASJ
                "\"ZONGHS\" INTEGER NOT NULL ," + // 3: ZONGHS
                "\"YIWANC\" INTEGER NOT NULL ," + // 4: YIWANC
                "\"XUNJIAN_TASK_TYPE\" TEXT," + // 5: xunjianTaskType
                "\"XJLX\" TEXT," + // 6: XJLX
                "\"IS_FINISH\" INTEGER NOT NULL );"); // 7: isFinish
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XUN_JIAN_TASK_BEAN\"";
        db.execSQL(sql);
    }



    @Override
    protected final void bindValues(SQLiteStatement stmt, XunJianTaskBean entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String RENWUMC = entity.getRENWUMC();
        if (RENWUMC != null) {
            stmt.bindString(2, RENWUMC);
        }
 
        String PAIFASJ = entity.getPAIFASJ();
        if (PAIFASJ != null) {
            stmt.bindString(3, PAIFASJ);
        }
        stmt.bindLong(4, entity.getZONGHS());
        stmt.bindLong(5, entity.getYIWANC());
 
        String xunjianTaskType = entity.getXunjianTaskType();
        if (xunjianTaskType != null) {
            stmt.bindString(6, xunjianTaskType);
        }
 
        String XJLX = entity.getXJLX();
        if (XJLX != null) {
            stmt.bindString(7, XJLX);
        }
        stmt.bindLong(8, entity.getIsFinish() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public XunJianTaskBean readEntity(Cursor cursor, int offset) {
        XunJianTaskBean entity = new XunJianTaskBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // RENWUMC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PAIFASJ
            cursor.getInt(offset + 3), // ZONGHS
            cursor.getInt(offset + 4), // YIWANC
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // xunjianTaskType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // XJLX
            cursor.getShort(offset + 7) != 0 // isFinish
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XunJianTaskBean entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRENWUMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPAIFASJ(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZONGHS(cursor.getInt(offset + 3));
        entity.setYIWANC(cursor.getInt(offset + 4));
        entity.setXunjianTaskType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setXJLX(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsFinish(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(XunJianTaskBean entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(XunJianTaskBean entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }



    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
