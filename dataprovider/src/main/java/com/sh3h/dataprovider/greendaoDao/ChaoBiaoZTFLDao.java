package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoZTFL;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table CB_ChaoBiaoZTFL.
 */
public class ChaoBiaoZTFLDao extends AbstractDao<ChaoBiaoZTFL, Void> {

    public static final String TABLENAME = "CB_ChaoBiaoZTFL";

    /**
     * Properties of entity ChaoBiaoZTFL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property I_FenLeiBM = new Property(0, int.class, "I_FenLeiBM", false, "I_FenLeiBM");
        public final static Property S_FenLeiMC = new Property(1, String.class, "S_FenLeiMC", false, "S_FenLeiMC");
    };


    public ChaoBiaoZTFLDao(DaoConfig config) {
        super(config);
    }

    public ChaoBiaoZTFLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_ChaoBiaoZTFL' (" + //
                "'I_FenLeiBM' INTEGER," + // 0: I_FenLeiBM
                "'S_FenLeiMC' TEXT);"); // 1: S_FenLeiMC
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_ChaoBiaoZTFL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChaoBiaoZTFL entity) {
        stmt.clearBindings();

        int I_FenLeiBM = entity.getI_FenLeiBM();
        //if (I_FenLeiBM != null) {
            stmt.bindLong(1, I_FenLeiBM);
        //}

        String S_FenLeiMC = entity.getS_FenLeiMC();
        if (S_FenLeiMC != null) {
            stmt.bindString(2, S_FenLeiMC);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public ChaoBiaoZTFL readEntity(Cursor cursor, int offset) {
        ChaoBiaoZTFL entity = new ChaoBiaoZTFL( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // I_FenLeiBM
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // S_FenLeiMC
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChaoBiaoZTFL entity, int offset) {
        entity.setI_FenLeiBM(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setS_FenLeiMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ChaoBiaoZTFL entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(ChaoBiaoZTFL entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    /**
     * 获取所有抄表状态
     *
     * @return
     */
    public List<ChaoBiaoZTFL> getAllChaobiaoztfl() {
        return this.loadAll();
    }

    /**
     * 根据状态编码查询对应的数据，如果存在则返回true，不存在返回false
     *
     * @param fenLeiBm
     *            分类编码
     * @return boolean
     */
    public boolean existChaoBiaoZTFL(int fenLeiBm) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_FenLeiBM.eq(fenLeiBm));
        List<ChaoBiaoZTFL> list =qb.list();
        if ((list == null)||(list.size() <= 0)){
            return false;
        }else {
            return true;
        }
    }

    /**
     * 根据状态编码删除数据库中对应的数据
     */
    public void deleteChaoBiaoZTFL() {
        this.deleteAll();
    }

    /**
     * 插入数据到抄表状态数分类据库中
     *
     * @param chaoBiaoZTFL
     *            抄表状态分类数据实体
     */
    public void insertChaoBiaoZTFL(ChaoBiaoZTFL chaoBiaoZTFL) {
        if (chaoBiaoZTFL == null) {
            return;
        }
        this.insertOrReplace(chaoBiaoZTFL);
    }
}
