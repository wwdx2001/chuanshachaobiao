package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoRW;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CB_ChaoBiaoRW.
 */
public class ChaoBiaoRWDao extends AbstractDao<ChaoBiaoRW, Long> {

    public static final String TABLENAME = "CB_ChaoBiaoRW";

    /**
     * Properties of entity ChaoBiaoRW.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", true, "ID");
        public final static Property I_RenWuBH = new Property(1, int.class, "I_RenWuBH", false, "I_RENWUBH");
        public final static Property S_ChaoBiaoYBH = new Property(2, String.class, "S_ChaoBiaoYBH", false, "S_CHAOBIAOYBH");
        public final static Property S_ChaoBiaoYXM = new Property(3, String.class, "S_ChaoBiaoYXM", false, "S_CHAOBIAOYXM");
        public final static Property D_PaiFaSJ = new Property(4, long.class, "D_PaiFaSJ", false, "D_PAIFASJ");
        public final static Property I_ZhangWuNY = new Property(5, int.class, "I_ZhangWuNY", false, "I_ZHANGWUNY");
        public final static Property S_CH = new Property(6, String.class, "S_CH", false, "S_CH");
        public final static Property S_CeBenMC = new Property(7, String.class, "S_CeBenMC", false, "S_CEBENMC");
        public final static Property S_CHAOBIAOZQ = new Property(8, String.class, "S_CHAOBIAOZQ", false, "S_CHAOBIAOZQ");
        public final static Property I_GongCi = new Property(9, int.class, "I_GongCi", false, "I_GONGCI");
        public final static Property S_ST = new Property(10, String.class, "S_ST", false, "S_ST");
        public final static Property I_ZongShu = new Property(11, int.class, "I_ZongShu", false, "I_ZONGSHU");
        public final static Property I_YiChaoShu = new Property(12, int.class, "I_YiChaoShu", false, "I_YICHAOSHU");
    }

    public ChaoBiaoRWDao(DaoConfig config) {
        super(config);
    }

    public ChaoBiaoRWDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_ChaoBiaoRW' (" + //
                "'ID' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT," + // 0: ID
                "'I_RENWUBH' INTEGER," + // 1: I_RenWuBH
                "'S_CHAOBIAOYBH' TEXT," + // 2: S_ChaoBiaoYBH
                "'S_CHAOBIAOYXM' TEXT," + // 3: S_ChaoBiaoYXM
                "'D_PAIFASJ' INTEGER," + // 4: D_PaiFaSJ
                "'I_ZHANGWUNY' INTEGER NOT NULL ," + // 5: I_ZhangWuNY
                "'S_CH' TEXT NOT NULL ," + // 6: S_CH
                "'S_CEBENMC' TEXT," + // 7: S_CeBenMC
                "'S_CHAOBIAOZQ' TEXT," + // 8: S_CHAOBIAOZQ
                "'I_GONGCI' INTEGER NOT NULL ," + // 9: I_GongCi
                "'S_ST' TEXT," + // 10: S_ST
                "'I_ZONGSHU' INTEGER," + // 11: I_ZongShu
                "'I_YICHAOSHU' INTEGER);");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_ChaoBiaoRW'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChaoBiaoRW entity) {
        stmt.clearBindings();
        int id = entity.getID();
        if (id != -1) {
            stmt.bindLong(1, id);
        }

        int I_RenWuBH = entity.getI_RenWuBH();
        stmt.bindLong(2, I_RenWuBH);

        String S_ChaoBiaoYBH = entity.getS_ChaoBiaoYBH();
        if (S_ChaoBiaoYBH != null) {
            stmt.bindString(3, S_ChaoBiaoYBH);
        }

        String S_ChaoBiaoYXM = entity.getS_ChaoBiaoYXM();
        if (S_ChaoBiaoYXM != null) {
            stmt.bindString(4, S_ChaoBiaoYXM);
        }

        long D_PaiFaSJ = entity.getD_PaiFaSJ();
        stmt.bindLong(5, D_PaiFaSJ);
        stmt.bindLong(6, entity.getI_ZhangWuNY());
        stmt.bindString(7, entity.getS_CH());

        String S_CeBenMC = entity.getS_CeBenMC();
        if (S_CeBenMC != null) {
            stmt.bindString(8, S_CeBenMC);
        }

        String S_CHAOBIAOZQ = entity.getS_CHAOBIAOZQ();
        if (S_CHAOBIAOZQ != null) {
            stmt.bindString(9, S_CHAOBIAOZQ);
        }
        stmt.bindLong(10, entity.getI_GongCi());

        String S_ST = entity.getS_ST();
        if (S_ST != null) {
            stmt.bindString(11, S_ST);
        }

        int I_ZongShu = entity.getI_ZongShu();
        stmt.bindLong(12, I_ZongShu);

        int I_YiChaoShu = entity.getI_YiChaoShu();
        stmt.bindLong(13, I_YiChaoShu);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public ChaoBiaoRW readEntity(Cursor cursor, int offset) {
        ChaoBiaoRW entity = new ChaoBiaoRW( //
                cursor.getInt(offset + 0), // ID
                cursor.isNull(offset + 1) ? 0 : cursor.getInt(offset + 1), // I_RenWuBH
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_ChaoBiaoYBH
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_ChaoBiaoYXM
                cursor.isNull(offset + 4) ? 0 : cursor.getLong(offset + 4), // D_PaiFaSJ
                cursor.getInt(offset + 5), // I_ZhangWuNY
                cursor.getString(offset + 6), // S_CH
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // S_CeBenMC
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // S_CHAOBIAOZQ
                cursor.getInt(offset + 9), // I_GongCi
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // S_ST
                cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11), // I_ZongShu
                cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12) // I_YiChaoShu
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ChaoBiaoRW entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setI_RenWuBH(cursor.isNull(offset + 1) ? 0 : cursor.getInt(offset + 1));
        entity.setS_ChaoBiaoYBH(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_ChaoBiaoYXM(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setD_PaiFaSJ(cursor.isNull(offset + 4) ? 0 : cursor.getLong(offset + 4));
        entity.setI_ZhangWuNY(cursor.getInt(offset + 5));
        entity.setS_CH(cursor.getString(offset + 6));
        entity.setS_CeBenMC(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setS_CHAOBIAOZQ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setI_GongCi(cursor.getInt(offset + 9));
        entity.setS_ST(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setI_ZongShu(cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11));
        entity.setI_YiChaoShu(cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(ChaoBiaoRW entity, long rowId) {
        // Unsupported or missing PK type
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(ChaoBiaoRW entity) {
        if (entity != null) {
            return (long) entity.getID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }


    /**
     * 查询chaoBiaoRW表中任务，根据传入的since，count决定读取所需要的抄表任务
     *
     * @param chaoBiaoYBH
     * @return List<ChaoBiaoRW> 集合
     */
    public List<ChaoBiaoRW> get(String chaoBiaoYBH) {
        if (chaoBiaoYBH == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH));
        qb.orderDesc(Properties.I_ZhangWuNY);
        qb.orderAsc(Properties.S_CH);
        return qb.list();
    }

    public List<ChaoBiaoRW> get(String chaoBiaoYBH, int rwType) {
        if (chaoBiaoYBH == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH));
        qb.orderDesc(Properties.I_ZhangWuNY);
        qb.orderAsc(Properties.S_CH);
        return qb.list();
    }


    /**
     * 根据抄表员编号查询所对应的抄表任务编号
     *
     * @param chaoBiaoYBH 抄表员编号
     * @return String
     */
    public String getChaoBiaoRenWuBH(String chaoBiaoYBH) {

        if (chaoBiaoYBH == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH));
        List<ChaoBiaoRW> lists = qb.list();
        ChaoBiaoRW chaoBiaoRW = lists.get(0);
        String renWuBianHao = String.valueOf(chaoBiaoRW.getI_RenWuBH());

        return renWuBianHao;
    }

    /**
     * 根据Id获取本地数据对应的单条抄表任务
     *
     * @param id 抄表任务ID
     * @return ChaoBiaoRW实体
     */
    public ChaoBiaoRW get(int id) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.ID.eq(id));
        List<ChaoBiaoRW> chaoBiaoRWs = qb.list();
        ChaoBiaoRW chaoBiaoRW = chaoBiaoRWs.get(0);

        return chaoBiaoRW;
    }

    public ChaoBiaoRW getChaoBiaoRWByS_CH(String s_ch) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(s_ch));
        List<ChaoBiaoRW> chaoBiaoRWs = qb.list();
        ChaoBiaoRW chaoBiaoRW = chaoBiaoRWs.get(0);

        return chaoBiaoRW;
    }

    /**
     * 根据gongCi获取本地数据对应的单条抄表任务
     */
    public ChaoBiaoRW getChaoBiaoRW(String account, int taskId, String ch) {
        if ((account == null) || (taskId <= 0) || (ch == null)) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(taskId),
                Properties.S_CH.eq(ch));
        List<ChaoBiaoRW> chaoBiaoRWs = qb.list();
        if ((chaoBiaoRWs == null) || (chaoBiaoRWs.size() <= 0)) {
            return null;
        }

        return chaoBiaoRWs.get(0);
    }

    /**
     * 根据gongCi获取本地数据对应的单条抄表任务
     */
    public ChaoBiaoRW getChaoBiaoRW(String account, int taskId) {
        if ((account == null) || (taskId <= 0)) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(taskId));
        List<ChaoBiaoRW> chaoBiaoRWs = qb.list();
        if ((chaoBiaoRWs == null) || (chaoBiaoRWs.size() <= 0)) {
            return null;
        }

        return chaoBiaoRWs.get(0);
    }

    public List<ChaoBiaoRW> getChaoBiaoRWList(String account, String ids) {
        if ((account == null) || (ids == null)) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.in(ids));
        return qb.list();
    }

    /**
     * 获取抄表任务中的CH
     *
     * @return List<String>
     */
    public List<String> getCH() {
        List<ChaoBiaoRW> chaoBiaoRWs = this.loadAll();

        List<String> chs = new ArrayList<String>();

        for (ChaoBiaoRW chaoBiaoRW : chaoBiaoRWs) {
            chs.add(chaoBiaoRW.getS_CH());
        }

        return chs;
    }

    /**
     * 删除抄表任务
     */
    public boolean clear(String chaoBiaoYBH, int renWuBH) {

        if (chaoBiaoYBH == null) {
            return false;
        }
        QueryBuilder<ChaoBiaoRW> qb = this.queryBuilder();
        DeleteQuery<ChaoBiaoRW> dq = qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH), Properties.I_RenWuBH.eq(renWuBH)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
        return true;
    }

    /**
     * 修改抄表任务
     */
    public boolean updateChaoBiaoRW(ChaoBiaoRW chaoBiaoRW) {
        if (chaoBiaoRW == null) {
            return false;
        }

        if (this.insertOrReplace(chaoBiaoRW) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public boolean updateChaoBiaoRW(String account, String ch, int renwuBH, int finishednum, int flag) {
        if (account == null || ch == null) {
            return false;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.S_CH.eq(ch),
                Properties.I_RenWuBH.eq(renwuBH));
        List<ChaoBiaoRW> chaoBiaoRWs = qb.list();
        ChaoBiaoRW chaoBiaoRW = null;

        if (chaoBiaoRWs.size() == 0 || chaoBiaoRWs == null) {
            return false;
        } else {
            chaoBiaoRW = chaoBiaoRWs.get(0);
        }

        if (flag == 0) {
            chaoBiaoRW.setI_YiChaoShu(finishednum);
        } else if (flag == 1) {
            chaoBiaoRW.setI_ZongShu(chaoBiaoRW.getI_ZongShu() - finishednum);
            if (chaoBiaoRW.getI_YiChaoShu() > chaoBiaoRW.getI_ZongShu()) {
                chaoBiaoRW.setI_YiChaoShu(chaoBiaoRW.getI_ZongShu());
            } else {
            }
        } else {
        }


        if (this.insertOrReplace(chaoBiaoRW) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public boolean updateChaoBiaoRW(String account, int renwuBH, String ch, boolean needSync) {
        if (account == null || ch == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(renwuBH),
                Properties.S_CH.eq(ch));
        List<ChaoBiaoRW> chaoBiaoRWList = qb.list();
        if ((chaoBiaoRWList == null) || (chaoBiaoRWList.size() != 1)) {
            return false;
        }

        ChaoBiaoRW chaoBiaoRW = chaoBiaoRWList.get(0);
        update(chaoBiaoRW);
        return true;
    }


    public boolean updateChaoBiaoRW(String account, int renwuBH,boolean needSync,int typeRM) {
        if (account == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(renwuBH));
        List<ChaoBiaoRW> chaoBiaoRWList = qb.list();
        if ((chaoBiaoRWList == null) || (chaoBiaoRWList.size() != 1)) {
            return false;
        }

        ChaoBiaoRW chaoBiaoRW = chaoBiaoRWList.get(0);
        update(chaoBiaoRW);
        return true;
    }

    public boolean updateChaoBiaoRW(String account, int renwuBH, String ch, int yichaos) {
        if ((account == null) || (ch == null)) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(renwuBH),
                Properties.S_CH.eq(ch));
        List<ChaoBiaoRW> chaoBiaoRWList = qb.list();
        if ((chaoBiaoRWList == null) || (chaoBiaoRWList.size() != 1)) {
            return false;
        }

        ChaoBiaoRW chaoBiaoRW = chaoBiaoRWList.get(0);
        chaoBiaoRW.setI_YiChaoShu(yichaos);
        update(chaoBiaoRW);
        return true;
    }

    /**
     * 添加抄表任务
     */
    public boolean insertData(ChaoBiaoRW chaoBiaoRW) {
        if (chaoBiaoRW == null) {
            return false;
        }

        List<ChaoBiaoRW> chaoBiaoRWList = queryBuilder()
                .where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoRW.getS_ChaoBiaoYBH()),
                Properties.I_RenWuBH.eq(chaoBiaoRW.getI_RenWuBH()),
                Properties.S_CH.eq(chaoBiaoRW.getS_CH())).list();
        if ((chaoBiaoRWList != null) && (chaoBiaoRWList.size() > 0)) {//再次从服务器下载任务时，更新已存在任务的总数、已抄数
            ChaoBiaoRW mChaoBiaoRW = chaoBiaoRWList.get(0);
            mChaoBiaoRW.setI_ZongShu(chaoBiaoRW.getI_ZongShu());
            mChaoBiaoRW.setI_YiChaoShu(chaoBiaoRW.getI_YiChaoShu());
            update(mChaoBiaoRW);
            return true;
        }

        chaoBiaoRW.setID(-1);
        return insert(chaoBiaoRW) != 0;
    }


    /**
     * 根据任务编号删除不存在renWuBHAll中的抄表任务
     *
     * @param chaoBiaoYBH renWuBHAll
     * @return
     */
    public void delectChaoBiaoRW(String chaoBiaoYBH, String renWuBHAll) {
        if (chaoBiaoYBH == null || renWuBHAll == null) {
            return;
        }
        QueryBuilder<ChaoBiaoRW> qb = this.queryBuilder();
        DeleteQuery<ChaoBiaoRW> dq = qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH), Properties.I_RenWuBH.eq(renWuBHAll)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
    }

    public boolean deleteChaoBiaoRW(String account, int taskId, String ch) {
        if (account == null || ch == null) {
            return false;
        }

        QueryBuilder<ChaoBiaoRW> qb = this.queryBuilder();
        DeleteQuery<ChaoBiaoRW> dq = qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(taskId), Properties.S_CH.eq(ch)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
        return true;
    }

    public boolean deleteChaoBiaoRW(String account, int taskId, int groupId) {
        if (account == null || groupId <=0) {
            return false;
        }

        QueryBuilder<ChaoBiaoRW> qb = this.queryBuilder();
        DeleteQuery<ChaoBiaoRW> dq = qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.eq(taskId)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
        return true;
    }



    public List<ChaoBiaoRW> getRemovedChaoBiaoRW(String account, List<String> renWuBHList) {
        if (account == null || renWuBHList == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ChaoBiaoYBH.eq(account),
                Properties.I_RenWuBH.notIn(renWuBHList));
        return qb.list();
    }

    /**
     * 根据任务编号查找renWuBHAll不存在本地的任务
     *
     * @param chaoBiaoYBH,renWuBHAll
     * @return
     */
    public String selectNonentityChaoBiaoRW(String chaoBiaoYBH,
                                            String renWuBHAll) {
        if (renWuBHAll == null)
            return null;
        else if (renWuBHAll.equals("")) {
            QueryBuilder<ChaoBiaoRW> qb = this.queryBuilder();
            DeleteQuery<ChaoBiaoRW> dq = qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH)).buildDelete();
            dq.executeDeleteWithoutDetachingEntities();
            return null;
        }
        String[] renWuBH = renWuBHAll.split(",");

        StringBuilder nonentityRenWuBH = new StringBuilder();

        for (int i = 0; i < renWuBH.length; i++) {
            if (renWuBH[i] != "") {
                String[] selectionArgs = new String[]{
                        chaoBiaoYBH, renWuBH[i]
                };
                QueryBuilder qb = this.queryBuilder();
                qb.where(Properties.S_ChaoBiaoYBH.eq(chaoBiaoYBH), Properties.I_RenWuBH.eq(renWuBH));
//                List<ChaoBiaoRW> chaoBiaoRWs = qb.list();
                if (qb.count() == 0) {
                    nonentityRenWuBH.append(renWuBH[i] + ",");
                }
            }
        }
        return nonentityRenWuBH.length() == 0 ? nonentityRenWuBH.toString()
                : nonentityRenWuBH.substring(0, nonentityRenWuBH.length() - 1)
                .toString();
    }


}
