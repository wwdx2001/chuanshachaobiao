package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoInfo;
import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoSJ;
import com.sh3h.dataprovider.schema.BiaoKaXXColumns;
import com.sh3h.dataprovider.schema.ChaoBiaoSJColumns;
import com.sh3h.dataprovider.schema.ChaoBiaoZTColumns;
import com.sh3h.dataprovider.schema.Tables;
import com.sh3h.mobileutil.util.TextUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.DeleteQuery;
import de.greenrobot.dao.query.QueryBuilder;
import de.greenrobot.dao.query.WhereCondition;

//import com.sh3h.dataprovider.core.DBHelper;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CB_ChaoBiaoSJ.
 */
public class ChaoBiaoSJDao extends AbstractDao<ChaoBiaoSJ, Long> {


    public static final String TABLENAME = "CB_CHAOBIAOSJ";
    public static final int ALLWORK = 6;

    /**
     * 查找量高抄表数据
     */
    public static final int HIGHAMOUNT = 7;

    /**
     * 查找量低抄表数据
     */
    public static final int LOWAMOUNT = 8;
    public static final int NORMAL = 9;
    public static final int UNNORMAL = 10;


    /**
     * 查找未完成任务
     */
    public static final int NOWORK = 0;
    /**
     * 查找已抄任务
     */
    public static final int FINISHWORK = 1;
    /**
     * 开账
     */
    public static final int NORMALWORK = 2;
    /**
     * 3延迟
     */
    public static final int YANCHILX_YC = 3;
    /**
     * 4外复延迟
     */
    public static final int YANCHILX_WF = 4;

    /**
     * 异常抄表数据
     */
    public static final int UNNORMALWORK = 3;

    /**
     * 抄表量低抄表数据
     */
    public static final int CB_LIANGDI_SJ = 2;


    /**
     * 抄表数据
     */
    public static final String CB_CHAOBIAOSJ = "CB_CHAOBIAOSJ";

    /**
     * 抄表状态
     */
    public static final String CB_ChaoBiaoZT = "CB_ChaoBiaoZT";

    private final String WEICHAO = "未抄";
    /**
     * Properties of entity ChaoBiaoSJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    private SQLiteDatabase _db = null;


    public static class Properties {
        public final static Property ID = new Property(0, long.class, "ID", true, "ID");
        public final static Property I_RenWuBH = new Property(1, int.class, "I_RenWuBH", false, "I_RenWuBH");
        public final static Property S_CH = new Property(2, String.class, "S_CH", false, "S_CH");
        public final static Property I_CENEIXH = new Property(3, int.class, "I_CENEIXH", false, "I_CENEIXH");
        public final static Property S_CID = new Property(4, String.class, "S_CID", false, "S_CID");
        public final static Property S_ST = new Property(5, String.class, "S_ST", false, "S_ST");
        public final static Property I_CHAOBIAON = new Property(6, int.class, "I_CHAOBIAON", false, "I_CHAOBIAON");
        public final static Property I_CHAOBIAOY = new Property(7, int.class, "I_CHAOBIAOY", false, "I_CHAOBIAOY");
        public final static Property I_CC = new Property(8, int.class, "I_CC", false, "I_CC");
        public final static Property D_CHAOBIAORQ = new Property(9, long.class, "D_CHAOBIAORQ", false, "D_CHAOBIAORQ");
        public final static Property I_SHANGCICM = new Property(10, int.class, "I_SHANGCICM", false, "I_SHANGCICM");
        public final static Property I_BENCICM = new Property(11, int.class, "I_BENCICM", false, "I_BENCICM");
        public final static Property I_CHAOJIANSL = new Property(12, long.class, "I_CHAOJIANSL", false, "I_CHAOJIANSL");
        public final static Property I_ZHUANGTAIBM = new Property(13, int.class, "I_ZHUANGTAIBM", false, "I_ZHUANGTAIBM");
        public final static Property S_ZHUANGTAIMC = new Property(14, String.class, "S_ZHUANGTAIMC", false, "S_ZHUANGTAIMC");
        public final static Property D_SHANGCICBRQ = new Property(15, long.class, "D_SHANGCICBRQ", false, "D_SHANGCICBRQ");
        public final static Property I_SHANGCIZTBM = new Property(16, long.class, "I_SHANGCIZTBM", false, "I_SHANGCIZTBM");
        public final static Property S_ShangCiZTMC = new Property(17, String.class, "S_ShangCiZTMC", false, "S_SHANGCIZTMC");
        public final static Property I_ShangCiCJSL = new Property(18, int.class, "I_ShangCiCJSL", false, "I_SHANGCICJSL");
        public final static Property I_SHANGCIZTLXS = new Property(19, int.class, "I_SHANGCIZTLXS", false, "I_SHANGCIZTLXS");
        public final static Property I_PINGJUNL1 = new Property(20, int.class, "I_PINGJUNL1", false, "I_PINGJUNL1");
        public final static Property I_PINGJUNL2 = new Property(21, int.class, "I_PINGJUNL2", false, "I_PINGJUNL2");
        public final static Property I_PINGJUNL3 = new Property(22, int.class, "I_PINGJUNL3", false, "I_PINGJUNL3");
        public final static Property N_JE = new Property(23, double.class, "N_JE", false, "N_JE");
        public final static Property S_ZONGBIAOCID = new Property(24, String.class, "S_ZONGBIAOCID", false, "S_ZONGBIAOCID");
        public final static Property S_CHAOBIAOY = new Property(25, String.class, "S_CHAOBIAOY", false, "S_CHAOBIAOY");
        public final static Property I_CHAOBIAOBZ = new Property(26, int.class, "I_CHAOBIAOBZ", false, "I_CHAOBIAOBZ");
        public final static Property I_JIUBIAOCM = new Property(27, int.class, "I_JIUBIAOCM", false, "I_JIUBIAOCM");
        public final static Property I_XINBIAODM = new Property(28, int.class, "I_XINBIAODM", false, "I_XINBIAODM");
        public final static Property D_HUANBIAORQ = new Property(29, long.class, "D_HUANBIAORQ", false, "D_HUANBIAORQ");
        public final static Property I_FANGSHIBM = new Property(30, int.class, "I_FANGSHIBM", false, "I_FANGSHIBM");
        public final static Property I_LIANGGAOLDYYBM = new Property(31, int.class, "I_LIANGGAOLDYYBM", false, "I_LIANGGAOLDYYBM");
        public final static Property I_CHAOBIAOID = new Property(32, int.class, "I_CHAOBIAOID", false, "I_CHAOBIAOID");
        public final static Property I_ZHUANGTAILXS = new Property(33, int.class, "I_ZHUANGTAILXS", false, "I_ZHUANGTAILXS");
        public final static Property I_SHUIBIAOBL = new Property(34, int.class, "I_SHUIBIAOBL", false, "I_SHUIBIAOBL");
        public final static Property N_YONGSHUIZKL = new Property(35, double.class, "N_YONGSHUIZKL", false, "N_YONGSHUIZKL");
        public final static Property N_PAISHUIZKL = new Property(36, double.class, "N_PAISHUIZKL", false, "N_PAISHUIZKL");
        public final static Property I_TIAOJIAH = new Property(37, int.class, "I_TIAOJIAH", false, "I_TIAOJIAH");
        public final static Property S_JianHao = new Property(38, String.class, "S_JianHao", false, "S_JianHao");
        public final static Property D_XIAZAISJ = new Property(39, long.class, "D_XIAZAISJ", false, "D_XIAZAISJ");
        public final static Property I_LINGYONGSLSM = new Property(40, int.class, "I_LINGYONGSLSM", false, "I_LINGYONGSLSM");
        public final static Property I_LIANGGAOSL = new Property(41, int.class, "I_LIANGGAOSL", false, "I_LIANGGAOSL");
        public final static Property I_LIANGDISL = new Property(42, int.class, "I_LIANGDISL", false, "I_LIANGDISL");
        public final static Property S_X1 = new Property(43, String.class, "S_X1", false, "S_X1");
        public final static Property S_Y1 = new Property(44, String.class, "S_Y1", false, "S_Y1");
        public final static Property S_X = new Property(45, String.class, "S_X", false, "S_X");
        public final static Property S_Y = new Property(46, String.class, "S_Y", false, "S_Y");
        public final static Property S_CHAOBIAOBZ = new Property(47, String.class, "S_CHAOBIAOBZ", false, "S_CHAOBIAOBZ");
        public final static Property I_CeNeiPX = new Property(48, int.class, "I_CeNeiPX", false, "I_CENEIPX");
        public final static Property I_XiaZaiCS = new Property(49, int.class, "I_XiaZaiCS", false, "I_XIAZAICS");
        public final static Property D_ZuiHouYCXZSJ = new Property(50, long.class, "D_ZuiHouYCXZSJ", false, "D_ZUIHOUYCXZSJ");
        public final static Property D_ZuiHouYCSCSJ = new Property(51, long.class, "D_ZuiHouYCSCSJ", false, "D_ZUIHOUYCSCSJ");
        public final static Property I_ShangChuanBZ = new Property(52, int.class, "I_ShangChuanBZ", false, "I_SHANGCHUANBZ");
        public final static Property I_ShenHeBZ = new Property(53, int.class, "I_ShenHeBZ", false, "I_SHENHEBZ");
        public final static Property I_KaiZhangBZ = new Property(54, int.class, "I_KaiZhangBZ", false, "I_KAIZHANGBZ");
        public final static Property I_DiaoDongBZ = new Property(55, int.class, "I_DiaoDongBZ", false, "I_DIAODONGBZ");
        public final static Property I_WaiFuYYBH = new Property(56, int.class, "I_WaiFuYYBH", false, "I_WAIFUYYBH");
        public final static Property S_JIETITS = new Property(57, String.class, "S_JIETITS", false, "S_JIETITS");
        public final static Property S_YANCIYY = new Property(58, String.class, "S_YANCIYY", false, "S_YANCIYY");
        public final static Property I_SHANGGEDBZQTS = new Property(59, int.class, "I_SHANGGEDBZQTS", false, "I_SHANGGEDBZQTS");
        public final static Property D_SHANGSHANGGYCBRQ = new Property(60, long.class, "D_SHANGSHANGGYCBRQ", false, "D_SHANGSHANGGYCBRQ");
    }

    public ChaoBiaoSJDao(DaoConfig config) {
        super(config);
    }

    public ChaoBiaoSJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_ChaoBiaoSJ' (" + //
                "'ID' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT," + // 0: ID
                "'I_RENWUBH' INTEGER," + // 1: I_RenWuBH
                "'S_CH' TEXT NOT NULL ," + // 2: S_CH
                "'I_CENEIXH' INTEGER NOT NULL ," + // 3: I_CENEIXH
                "'S_CID' TEXT NOT NULL ," + // 4: S_CID
                "'S_ST' TEXT NOT NULL ," + // 5: S_ST
                "'I_CHAOBIAON' INTEGER NOT NULL ," + // 6: I_CHAOBIAON
                "'I_CHAOBIAOY' INTEGER NOT NULL ," + // 7: I_CHAOBIAOY
                "'I_CC' INTEGER NOT NULL ," + // 8: I_CC
                "'D_CHAOBIAORQ' INTEGER," + // 9: D_CHAOBIAORQ
                "'I_SHANGCICM' INTEGER NOT NULL ," + // 10: I_SHANGCICM
                "'I_BENCICM' INTEGER," + // 11: I_BENCICM
                "'I_CHAOJIANSL' INTEGER," + // 12: I_CHAOJIANSL
                "'I_ZHUANGTAIBM' INTEGER," + // 13: I_ZHUANGTAIBM
                "'S_ZHUANGTAIMC' TEXT," + // 14: S_ZHUANGTAIMC
                "'D_SHANGCICBRQ' INTEGER," + // 15: D_SHANGCICBRQ
                "'I_SHANGCIZTBM' INTEGER," + // 16: I_SHANGCIZTBM
                "'S_SHANGCIZTMC' TEXT," + // 17: S_ShangCiZTMC
                "'I_SHANGCICJSL' INTEGER," + // 18: I_ShangCiCJSL
                "'I_SHANGCIZTLXS' INTEGER," + // 19: I_SHANGCIZTLXS
                "'I_PINGJUNL1' INTEGER," + // 20: I_PINGJUNL1
                "'I_PINGJUNL2' INTEGER," + // 21: I_PINGJUNL2
                "'I_PINGJUNL3' INTEGER," + // 22: I_PINGJUNL3
                "'N_JE' REAL," + // 23: N_JE
                "'S_ZONGBIAOCID' TEXT," + // 24: S_ZONGBIAOCID
                "'S_CHAOBIAOY' TEXT," + // 25: S_CHAOBIAOY
                "'I_CHAOBIAOBZ' INTEGER," + // 26: I_CHAOBIAOBZ
                "'I_JIUBIAOCM' INTEGER," + // 27: I_JIUBIAOCM
                "'I_XINBIAODM' INTEGER," + // 28: I_XINBIAODM
                "'D_HUANBIAORQ' INTEGER," + // 29: D_HUANBIAORQ
                "'I_FANGSHIBM' INTEGER," + // 30: I_FANGSHIBM
                "'I_LIANGGAOLDYYBM' INTEGER," + // 31: I_LIANGGAOLDYYBM
                "'I_CHAOBIAOID' INTEGER," + // 32: I_CHAOBIAOID
                "'I_ZHUANGTAILXS' INTEGER," + // 33: I_ZHUANGTAILXS
                "'I_SHUIBIAOBL' INTEGER," + // 34: I_SHUIBIAOBL
                "'N_YONGSHUIZKL' REAL," + // 35: N_YONGSHUIZKL
                "'N_PAISHUIZKL' REAL," + // 36: N_PAISHUIZKL
                "'I_TIAOJIAH' INTEGER," + // 37: I_TIAOJIAH
                "'S_JIANHAO' TEXT NOT NULL ," + // 38: S_JianHao
                "'D_XIAZAISJ' INTEGER NOT NULL ," + // 39: D_XIAZAISJ
                "'I_LINGYONGSLSM' INTEGER," + // 40: I_LINGYONGSLSM
                "'I_LIANGGAOSL' INTEGER," + // 41: I_LIANGGAOSL
                "'I_LIANGDISL' INTEGER," + // 42: I_LIANGDISL
                "'S_X1' TEXT," + // 43: S_X1
                "'S_Y1' TEXT," + // 44: S_Y1
                "'S_X' TEXT," + // 45: S_X
                "'S_Y' TEXT," + // 46: S_Y
                "'S_CHAOBIAOBZ' TEXT," + // 47: S_CHAOBIAOBZ
                "'I_CENEIPX' INTEGER," + // 48: I_CeNeiPX
                "'I_XIAZAICS' INTEGER," + // 49: I_XiaZaiCS
                "'D_ZUIHOUYCXZSJ' INTEGER," + // 50: D_ZuiHouYCXZSJ
                "'D_ZUIHOUYCSCSJ' INTEGER," + // 51: D_ZuiHouYCSCSJ
                "'I_SHANGCHUANBZ' INTEGER," + // 52: I_ShangChuanBZ
                "'I_SHENHEBZ' INTEGER," + // 53: I_ShenHeBZ
                "'I_KAIZHANGBZ' INTEGER," + // 54: I_KaiZhangBZ
                "'I_DIAODONGBZ' INTEGER," + // 55: I_DiaoDongBZ
                "'I_WAIFUYYBH' INTEGER," + // 56: I_WaiFuYYBH
                "'S_JIETITS' TEXT," + // 57: S_JIETITS
                "'S_YANCIYY' TEXT," + // 58: S_YANCIYY
                "'I_SHANGGEDBZQTS' INTEGER," + // 59
                "'D_SHANGSHANGGYCBRQ' INTEGER" + // 60
                ");");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_ChaoBiaoSJ'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChaoBiaoSJ entity) {
        stmt.clearBindings();
        int id = entity.getID();
        if (id != -1){
            stmt.bindLong(1, id);
        }

        int I_RenWuBH = entity.getI_RenWuBH();
        //if (I_RenWuBH != null) {
        stmt.bindLong(2, I_RenWuBH);
        //}
        stmt.bindString(3, entity.getS_CH());
        stmt.bindLong(4, entity.getI_CENEIXH());
        stmt.bindString(5, entity.getS_CID());
        stmt.bindString(6, entity.getS_ST());
        stmt.bindLong(7, entity.getI_CHAOBIAON());
        stmt.bindLong(8, entity.getI_CHAOBIAOY());
        stmt.bindLong(9, entity.getI_CC());

        long D_CHAOBIAORQ = entity.getD_CHAOBIAORQ();
        //if (D_CHAOBIAORQ != null) {
        stmt.bindLong(10, D_CHAOBIAORQ);
        //}
        stmt.bindLong(11, entity.getI_SHANGCICM());

        int I_BENCICM = entity.getI_BENCICM();
        //if (I_BENCICM != null) {
        stmt.bindLong(12, I_BENCICM);
        //}

        int I_CHAOJIANSL = entity.getI_CHAOJIANSL();
        //if (I_CHAOJIANSL != null) {
        stmt.bindLong(13, I_CHAOJIANSL);
        //}

        int I_ZHUANGTAIBM = entity.getI_ZHUANGTAIBM();
        //if (I_ZHUANGTAIBM != null) {
        stmt.bindLong(14, I_ZHUANGTAIBM);
        //}

        String S_ZHUANGTAIMC = entity.getS_ZHUANGTAIMC();
        if (S_ZHUANGTAIMC != null) {
            stmt.bindString(15, S_ZHUANGTAIMC);
        }

        long D_SHANGCICBRQ = entity.getD_SHANGCICBRQ();
        //if (D_SHANGCICBRQ != null) {
        stmt.bindLong(16, D_SHANGCICBRQ);
        //}

        int I_SHANGCIZTBM = entity.getI_SHANGCIZTBM();
        //if (I_SHANGCIZTBM != null) {
        stmt.bindLong(17, I_SHANGCIZTBM);
        //}

        String S_ShangCiZTMC = entity.getS_ShangCiZTMC();
        //if (S_ShangCiZTMC != null) {
        stmt.bindString(18, S_ShangCiZTMC);
        //}

        int I_ShangCiCJSL = entity.getI_ShangCiCJSL();
        //if (I_ShangCiCJSL != null) {
        stmt.bindLong(19, I_ShangCiCJSL);
        //}

        int I_SHANGCIZTLXS = entity.getI_SHANGCIZTLXS();
        //if (I_SHANGCIZTLXS != null) {
        stmt.bindLong(20, I_SHANGCIZTLXS);
        //}

        int I_PINGJUNL1 = entity.getI_PINGJUNL1();
        //if (I_PINGJUNL1 != null) {
        stmt.bindLong(21, I_PINGJUNL1);
        //}

        int I_PINGJUNL2 = entity.getI_PINGJUNL2();
        //if (I_PINGJUNL2 != null) {
        stmt.bindLong(22, I_PINGJUNL2);
        //}

        int I_PINGJUNL3 = entity.getI_PINGJUNL3();
        //if (I_PINGJUNL3 != null) {
        stmt.bindLong(23, I_PINGJUNL3);
        //}

        double N_JE = entity.getN_JE();
        //if (N_JE != null) {
        stmt.bindDouble(24, N_JE);
        //}

        String S_ZONGBIAOCID = entity.getS_ZONGBIAOCID();
        if (S_ZONGBIAOCID != null) {
            stmt.bindString(25, S_ZONGBIAOCID);
        }

        String S_CHAOBIAOY = entity.getS_CHAOBIAOY();
        if (S_CHAOBIAOY != null) {
            stmt.bindString(26, S_CHAOBIAOY);
        }

        int I_CHAOBIAOBZ = entity.getI_CHAOBIAOBZ();
        //if (I_CHAOBIAOBZ != null) {
        stmt.bindLong(27, I_CHAOBIAOBZ);
        //}

        int I_JIUBIAOCM = entity.getI_JIUBIAOCM();
        //if (I_JIUBIAOCM != null) {
        stmt.bindLong(28, I_JIUBIAOCM);
        //}

        int I_XINBIAODM = entity.getI_XINBIAODM();
        //if (I_XINBIAODM != null) {
        stmt.bindLong(29, I_XINBIAODM);
        //}

        long D_HUANBIAORQ = entity.getD_HUANBIAORQ();
        //if (D_HUANBIAORQ != null) {
        stmt.bindLong(30, D_HUANBIAORQ);
        //}

        int I_FANGSHIBM = entity.getI_FANGSHIBM();
        //if (I_FANGSHIBM != null) {
        stmt.bindLong(31, I_FANGSHIBM);
        //}

        int I_LIANGGAOLDYYBM = entity.getI_LIANGGAOLDYYBM();
        //if (I_LIANGGAOLDYYBM != null) {
        stmt.bindLong(32, I_LIANGGAOLDYYBM);
        //}

        int I_CHAOBIAOID = entity.getI_CHAOBIAOID();
        //if (I_CHAOBIAOID != null) {
        stmt.bindLong(33, I_CHAOBIAOID);
        //}

        int I_ZHUANGTAILXS = entity.getI_ZHUANGTAILXS();
        //if (I_ZHUANGTAILXS != null) {
        stmt.bindLong(34, I_ZHUANGTAILXS);
        //}

        int I_SHUIBIAOBL = entity.getI_SHUIBIAOBL();
        //if (I_SHUIBIAOBL != null) {
        stmt.bindLong(35, I_SHUIBIAOBL);
        //}

        double N_YONGSHUIZKL = entity.getN_YONGSHUIZKL();
        //if (N_YONGSHUIZKL != null) {
        stmt.bindDouble(36, N_YONGSHUIZKL);
        //}

        double N_PAISHUIZKL = entity.getN_PAISHUIZKL();
        //if (N_PAISHUIZKL != null) {
        stmt.bindDouble(37, N_PAISHUIZKL);
        //}

        int I_TIAOJIAH = entity.getI_TIAOJIAH();
        //if (I_TIAOJIAH != null) {
        stmt.bindLong(38, I_TIAOJIAH);
        //}
        stmt.bindString(39, entity.getS_JianHao());
        stmt.bindLong(40, entity.getD_XIAZAISJ());

        int I_LINGYONGSLSM = entity.getI_LINGYONGSLSM();
        //if (I_LINGYONGSLSM != null) {
        stmt.bindLong(41, I_LINGYONGSLSM);
        //}

        int I_LIANGGAOSL = entity.getI_LIANGGAOSL();
        //if (I_LIANGGAOSL != null) {
        stmt.bindLong(42, I_LIANGGAOSL);
        //}

        int I_LIANGDISL = entity.getI_LIANGDISL();
        //if (I_LIANGDISL != null) {
        stmt.bindLong(43, I_LIANGDISL);
        //}

        String S_X1 = entity.getS_X1();
        if (S_X1 != null) {
            stmt.bindString(44, S_X1);
        }

        String S_Y1 = entity.getS_Y1();
        if (S_Y1 != null) {
            stmt.bindString(45, S_Y1);
        }

        String S_X = entity.getS_X();
        if (S_X != null) {
            stmt.bindString(46, S_X);
        }

        String S_Y = entity.getS_Y();
        if (S_Y != null) {
            stmt.bindString(47, S_Y);
        }

        String S_CHAOBIAOBZ = entity.getS_CHAOBIAOBZ();
        if (S_CHAOBIAOBZ != null) {
            stmt.bindString(48, S_CHAOBIAOBZ);
        }

        int I_CeNeiPX = entity.getI_CeNeiPX();
        //if (I_CeNeiPX != null) {
        stmt.bindLong(49, I_CeNeiPX);
        //}

        int I_XiaZaiCS = entity.getI_XiaZaiCS();
        //if (I_XiaZaiCS != null) {
        stmt.bindLong(50, I_XiaZaiCS);
        //}

        long D_ZuiHouYCXZSJ = entity.getD_ZuiHouYCXZSJ();
        //if (D_ZuiHouYCXZSJ != null) {
        stmt.bindLong(51, D_ZuiHouYCXZSJ);
        //}

        long D_ZuiHouYCSCSJ = entity.getD_ZuiHouYCSCSJ();
        //if (D_ZuiHouYCSCSJ != null) {
        stmt.bindLong(52, D_ZuiHouYCSCSJ);
        //}

        int I_ShangChuanBZ = entity.getI_ShangChuanBZ();
        //if (I_ShangChuanBZ != null) {
        stmt.bindLong(53, I_ShangChuanBZ);
        //}

        int I_ShenHeBZ = entity.getI_ShenHeBZ();
        //if (I_ShenHeBZ != null) {
        stmt.bindLong(54, I_ShenHeBZ);
        //}

        int I_KaiZhangBZ = entity.getI_KaiZhangBZ();
        //if (I_KaiZhangBZ != null) {
        stmt.bindLong(55, I_KaiZhangBZ);
        //}

        int I_DiaoDongBZ = entity.getI_DiaoDongBZ();
        //if (I_DiaoDongBZ != null) {
        stmt.bindLong(56, I_DiaoDongBZ);
        //}

        int I_WaiFuYYBH = entity.getI_WaiFuYYBH();
        //if (I_WaiFuYYBH != null) {
        stmt.bindLong(57, I_WaiFuYYBH);
        //}

        String S_JIETITS = entity.getS_JIETITS();
        if (S_JIETITS != null) {
            stmt.bindString(58, S_JIETITS);
        }

        String S_YANCIYY = entity.getS_YANCIYY();
        if (S_YANCIYY != null) {
            stmt.bindString(59, S_YANCIYY);
        }
        stmt.bindLong(60, entity.getI_SHANGGEDBZQTS());
        stmt.bindLong(61, entity.getD_SHANGSHANGGYCBRQ());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public ChaoBiaoSJ readEntity(Cursor cursor, int offset) {
        ChaoBiaoSJ entity = new ChaoBiaoSJ( //
                cursor.getInt(offset + 0), // ID
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // I_RenWuBH
                cursor.getString(offset + 2), // S_CH
                cursor.getInt(offset + 3), // I_CENEIXH
                cursor.getString(offset + 4), // S_CID
                cursor.getString(offset + 5), // S_ST
                cursor.getInt(offset + 6), // I_CHAOBIAON
                cursor.getInt(offset + 7), // I_CHAOBIAOY
                cursor.getInt(offset + 8), // I_CC
                cursor.isNull(offset + 9) ? 0 : cursor.getLong(offset + 9), // D_CHAOBIAORQ
                cursor.getInt(offset + 10), // I_SHANGCICM
                cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11), // I_BENCICM
                cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12), // I_CHAOJIANSL
                cursor.isNull(offset + 13) ? 0 : cursor.getInt(offset + 13), // I_ZHUANGTAIBM
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // S_ZHUANGTAIMC
                cursor.isNull(offset + 15) ? 0 : cursor.getLong(offset + 15), // D_SHANGCICBRQ
                cursor.isNull(offset + 16) ? 0 : cursor.getInt(offset + 16), // I_SHANGCIZTBM
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // S_ShangCiZTMC
                cursor.isNull(offset + 18) ? 0 : cursor.getInt(offset + 18), // I_ShangCiCJSL
                cursor.isNull(offset + 19) ? 0 : cursor.getInt(offset + 19), // I_SHANGCIZTLXS
                cursor.isNull(offset + 20) ? 0 : cursor.getInt(offset + 20), // I_PINGJUNL1
                cursor.isNull(offset + 21) ? 0 : cursor.getInt(offset + 21), // I_PINGJUNL2
                cursor.isNull(offset + 22) ? 0 : cursor.getInt(offset + 22), // I_PINGJUNL3
                cursor.isNull(offset + 23) ? 0 : cursor.getDouble(offset + 23), // N_JE
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // S_ZONGBIAOCID
                cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // S_CHAOBIAOY
                cursor.isNull(offset + 26) ? 0 : cursor.getInt(offset + 26), // I_CHAOBIAOBZ
                cursor.isNull(offset + 27) ? 0 : cursor.getInt(offset + 27), // I_JIUBIAOCM
                cursor.isNull(offset + 28) ? 0 : cursor.getInt(offset + 28), // I_XINBIAODM
                cursor.isNull(offset + 29) ? 0 : cursor.getLong(offset + 29), // D_HUANBIAORQ
                cursor.isNull(offset + 30) ? 0 : cursor.getInt(offset + 30), // I_FANGSHIBM
                cursor.isNull(offset + 31) ? 0 : cursor.getInt(offset + 31), // I_LIANGGAOLDYYBM
                cursor.isNull(offset + 32) ? 0 : cursor.getInt(offset + 32), // I_CHAOBIAOID
                cursor.isNull(offset + 33) ? 0 : cursor.getInt(offset + 33), // I_ZHUANGTAILXS
                cursor.isNull(offset + 34) ? 0 : cursor.getInt(offset + 34), // I_SHUIBIAOBL
                cursor.isNull(offset + 35) ? 0 : cursor.getDouble(offset + 35), // N_YONGSHUIZKL
                cursor.isNull(offset + 36) ? 0 : cursor.getDouble(offset + 36), // N_PAISHUIZKL
                cursor.isNull(offset + 37) ? 0 : cursor.getInt(offset + 37), // I_TIAOJIAH
                cursor.getString(offset + 38), // S_JianHao
                cursor.getLong(offset + 39), // D_XIAZAISJ
                cursor.isNull(offset + 40) ? 0 : cursor.getInt(offset + 40), // I_LINGYONGSLSM
                cursor.isNull(offset + 41) ? 0 : cursor.getInt(offset + 41), // I_LIANGGAOSL
                cursor.isNull(offset + 42) ? 0 : cursor.getInt(offset + 42), // I_LIANGDISL
                cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // S_X1
                cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // S_Y1
                cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // S_X
                cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // S_Y
                cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // S_CHAOBIAOBZ
                cursor.isNull(offset + 48) ? 0 : cursor.getInt(offset + 48), // I_CeNeiPX
                cursor.isNull(offset + 49) ? 0 : cursor.getInt(offset + 49), // I_XiaZaiCS
                cursor.isNull(offset + 50) ? 0 : cursor.getLong(offset + 50), // D_ZuiHouYCXZSJ
                cursor.isNull(offset + 51) ? 0 : cursor.getLong(offset + 51), // D_ZuiHouYCSCSJ
                cursor.isNull(offset + 52) ? 0 : cursor.getInt(offset + 52), // I_ShangChuanBZ
                cursor.isNull(offset + 53) ? 0 : cursor.getInt(offset + 53), // I_ShenHeBZ
                cursor.isNull(offset + 54) ? 0 : cursor.getInt(offset + 54), // I_KaiZhangBZ
                cursor.isNull(offset + 55) ? 0 : cursor.getInt(offset + 55), // I_DiaoDongBZ
                cursor.isNull(offset + 56) ? 0 : cursor.getInt(offset + 56), // I_WaiFuYYBH
                cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // S_JIETITS
                cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // S_YANCIYY
                cursor.isNull(offset + 59) ? 0 :cursor.getInt(offset + 59),
                cursor.isNull(offset + 60) ? 0 :cursor.getLong(offset + 60)
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ChaoBiaoSJ entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setI_RenWuBH(cursor.isNull(offset + 1) ? 0 : cursor.getInt(offset + 1));
        entity.setS_CH(cursor.getString(offset + 2));
        entity.setI_CENEIXH(cursor.getInt(offset + 3));
        entity.setS_CID(cursor.getString(offset + 4));
        entity.setS_ST(cursor.getString(offset + 5));
        entity.setI_CHAOBIAON(cursor.getInt(offset + 6));
        entity.setI_CHAOBIAOY(cursor.getInt(offset + 7));
        entity.setI_CC(cursor.getInt(offset + 8));
        entity.setD_CHAOBIAORQ(cursor.isNull(offset + 9) ? 0 : cursor.getLong(offset + 9));
        entity.setI_SHANGCICM(cursor.getInt(offset + 10));
        entity.setI_BENCICM(cursor.isNull(offset + 11) ? 0 : cursor.getInt(offset + 11));
        entity.setI_CHAOJIANSL(cursor.isNull(offset + 12) ? 0 : cursor.getInt(offset + 12));
        entity.setI_ZHUANGTAIBM(cursor.isNull(offset + 13) ? 0 : cursor.getInt(offset + 13));
        entity.setS_ZHUANGTAIMC(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setD_SHANGCICBRQ(cursor.isNull(offset + 15) ? 0 : cursor.getLong(offset + 15));
        entity.setI_SHANGCIZTBM(cursor.isNull(offset + 16) ? 0 : cursor.getInt(offset + 16));
        entity.setS_ShangCiZTMC(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setI_ShangCiCJSL(cursor.isNull(offset + 18) ? 0 : cursor.getInt(offset + 18));
        entity.setI_SHANGCIZTLXS(cursor.isNull(offset + 19) ? 0 : cursor.getInt(offset + 19));
        entity.setI_PINGJUNL1(cursor.isNull(offset + 20) ? 0 : cursor.getInt(offset + 20));
        entity.setI_PINGJUNL2(cursor.isNull(offset + 21) ? 0 : cursor.getInt(offset + 21));
        entity.setI_PINGJUNL3(cursor.isNull(offset + 22) ? 0 : cursor.getInt(offset + 22));
        entity.setN_JE(cursor.isNull(offset + 23) ? 0 : cursor.getDouble(offset + 23));
        entity.setS_ZONGBIAOCID(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setS_CHAOBIAOY(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setI_CHAOBIAOBZ(cursor.isNull(offset + 26) ? 0 : cursor.getInt(offset + 26));
        entity.setI_JIUBIAOCM(cursor.isNull(offset + 27) ? 0 : cursor.getInt(offset + 27));
        entity.setI_XINBIAODM(cursor.isNull(offset + 28) ? 0 : cursor.getInt(offset + 28));
        entity.setD_HUANBIAORQ(cursor.isNull(offset + 29) ? 0 : cursor.getLong(offset + 29));
        entity.setI_FANGSHIBM(cursor.isNull(offset + 30) ? 0 : cursor.getInt(offset + 30));
        entity.setI_LIANGGAOLDYYBM(cursor.isNull(offset + 31) ? 0 : cursor.getInt(offset + 31));
        entity.setI_CHAOBIAOID(cursor.isNull(offset + 32) ? 0 : cursor.getInt(offset + 32));
        entity.setI_ZHUANGTAILXS(cursor.isNull(offset + 33) ? 0 : cursor.getInt(offset + 33));
        entity.setI_SHUIBIAOBL(cursor.isNull(offset + 34) ? 0 : cursor.getInt(offset + 34));
        entity.setN_YONGSHUIZKL(cursor.isNull(offset + 35) ? 0 : cursor.getDouble(offset + 35));
        entity.setN_PAISHUIZKL(cursor.isNull(offset + 36) ? 0 : cursor.getDouble(offset + 36));
        entity.setI_TIAOJIAH(cursor.isNull(offset + 37) ? 0 : cursor.getInt(offset + 37));
        entity.setS_JianHao(cursor.getString(offset + 38));
        entity.setD_XIAZAISJ(cursor.getLong(offset + 39));
        entity.setI_LINGYONGSLSM(cursor.isNull(offset + 40) ? 0 : cursor.getInt(offset + 40));
        entity.setI_LIANGGAOSL(cursor.isNull(offset + 41) ? 0 : cursor.getInt(offset + 41));
        entity.setI_LIANGDISL(cursor.isNull(offset + 42) ? 0 : cursor.getInt(offset + 42));
        entity.setS_X1(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setS_Y1(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setS_X(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setS_Y(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setS_CHAOBIAOBZ(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setI_CeNeiPX(cursor.isNull(offset + 48) ? 0 : cursor.getInt(offset + 48));
        entity.setI_XiaZaiCS(cursor.isNull(offset + 49) ? 0 : cursor.getInt(offset + 49));
        entity.setD_ZuiHouYCXZSJ(cursor.isNull(offset + 50) ? 0 : cursor.getLong(offset + 50));
        entity.setD_ZuiHouYCSCSJ(cursor.isNull(offset + 51) ? 0 : cursor.getLong(offset + 51));
        entity.setI_ShangChuanBZ(cursor.isNull(offset + 52) ? 0 : cursor.getInt(offset + 52));
        entity.setI_ShenHeBZ(cursor.isNull(offset + 53) ? 0 : cursor.getInt(offset + 53));
        entity.setI_KaiZhangBZ(cursor.isNull(offset + 54) ? 0 : cursor.getInt(offset + 54));
        entity.setI_DiaoDongBZ(cursor.isNull(offset + 55) ? 0 : cursor.getInt(offset + 55));
        entity.setI_WaiFuYYBH(cursor.isNull(offset + 56) ? 0 : cursor.getInt(offset + 56));
        entity.setS_JIETITS(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setS_YANCIYY(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setI_SHANGGEDBZQTS(cursor.isNull(offset + 59) ? 0 : cursor.getInt(offset + 59));
        entity.setD_SHANGSHANGGYCBRQ(cursor.isNull(offset + 60) ? 0 : cursor.getLong(offset + 60));
    }

    /**-
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(ChaoBiaoSJ entity, long rowId) {
        // Unsupported or missing PK type
        //entity.setID(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(ChaoBiaoSJ entity) {
        if (entity != null) {
            return (long) entity.getID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }


    /**
     * 查询chaoBiaoSJ表中任务,根据册本号查询
     *
     * @param cH       册本号
     * @param sortType 筛选条件(全部/未抄)
     * @return List<ChaoBiaoSJ> 集合
     */
    public List<ChaoBiaoSJ> getList(String cH, int sortType) {
        List<ChaoBiaoSJ> list = new ArrayList<ChaoBiaoSJ>();
        QueryBuilder qb = this.queryBuilder();
        switch (sortType) {
            case ALLWORK:
                qb.where(Properties.S_CH.eq(cH));
                //qb.limit(number);
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case NOWORK:
                qb.where(Properties.S_CH.eq(cH), Properties.I_CHAOBIAOBZ.eq(NOWORK));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case FINISHWORK:
                qb.where(Properties.S_CH.eq(cH), Properties.I_CHAOBIAOBZ.in(1, 2, 3, 4));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case NORMALWORK:
                qb.where(Properties.S_CH.eq("cH"),
                        Properties.I_ZHUANGTAIBM.notIn(4, 3, 6, 14, 8),
                        Properties.I_LIANGGAOLDYYBM.eq(0),
                        qb.or(Properties.I_CHAOBIAOBZ.isNull(), Properties.I_CHAOBIAOBZ.notEq("%开单%")));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case UNNORMALWORK:
                qb.where(Properties.S_CH.eq("cH"),
                        qb.or(Properties.I_ZHUANGTAIBM.in(4, 3, 6, 14, 8),
                                Properties.I_CHAOBIAOBZ.notEq(0),
                                Properties.I_CHAOBIAOBZ.like("%开单%")));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            default:
                break;
        }

        return list;
    }

    public List<ChaoBiaoSJ> getLgldChaoBiaoSJ(String account, int sortType) {
        if (TextUtil.isNullOrEmpty(account)){
            return null;
        }

        switch (sortType){
            case HIGHAMOUNT:
                return queryBuilder().where(Properties.I_LIANGGAOLDYYBM.gt(0))
                        .orderAsc(Properties.I_CENEIXH).list();
            case LOWAMOUNT:
                return queryBuilder().where(Properties.I_LIANGGAOLDYYBM.lt(0))
                        .orderAsc(Properties.I_CENEIXH).list();
            default:
                return null;
        }
    }

    public List<ChaoBiaoSJ> getList(int taskId, String cH, int sortType) {
        if (cH == null) {
            return null;
        }

        List<ChaoBiaoSJ> list = null;
        QueryBuilder<ChaoBiaoSJ> qb = this.queryBuilder();
        String sql = String.format("S_CID in (select %s from %s where %s = \"%s\")",
                BIAOKAXXDao.Properties.S_CID.columnName, BIAOKAXXDao.TABLENAME,
                BIAOKAXXDao.Properties.S_CH.columnName, cH);
        switch (sortType) {
            case ALLWORK: // 全部
                qb.where(Properties.S_CH.eq(cH),
                        Properties.I_RenWuBH.eq(taskId),
                        new WhereCondition.StringCondition(sql));
                //qb.limit(number);
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case NOWORK: // 未抄
                qb.where(Properties.S_CH.eq(cH),
                        Properties.I_CHAOBIAOBZ.eq(0),
                        Properties.I_RenWuBH.eq(taskId),
                        new WhereCondition.StringCondition(sql));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case FINISHWORK: // 已抄
                qb.where(Properties.S_CH.eq(cH),
                        Properties.I_CHAOBIAOBZ.gt(0),
                        Properties.I_RenWuBH.eq(taskId),
                        new WhereCondition.StringCondition(sql));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case NORMAL:
                qb.where(Properties.S_CH.eq(cH),
                        Properties.I_ZHUANGTAIBM.notIn(4, 3, 6, 14, 8),
                        Properties.I_LIANGGAOLDYYBM.eq(0),
                        qb.or(Properties.I_CHAOBIAOBZ.isNull(), Properties.I_CHAOBIAOBZ.notEq("%开单%")));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case UNNORMAL:
                qb.where(Properties.S_CH.eq(cH),
                        qb.or(Properties.I_ZHUANGTAIBM.in(4, 3, 6, 14, 8),
                                Properties.I_CHAOBIAOBZ.notEq(0),
                                Properties.I_CHAOBIAOBZ.like("%开单%")));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            default:
                break;
        }

        return list;
    }

    public List<ChaoBiaoSJ> getList(int taskId, String cH, int sortType, double waterHighN) {
        if (cH == null) {
            return null;
        }
        List<ChaoBiaoSJ> list = null;
        QueryBuilder qb = this.queryBuilder();
        switch (sortType) {
            case HIGHAMOUNT:
                list = new ArrayList<>();
                qb.where(Properties.S_CH.eq(cH),
                        Properties.I_CHAOBIAOBZ.gt(0),
                        Properties.I_RenWuBH.eq(taskId));
                qb.orderAsc(Properties.I_CENEIXH);
                List<ChaoBiaoSJ> listTemporary = qb.list();
                for (ChaoBiaoSJ chaoBiaoSJ : listTemporary) {
                    if (isWaterHigh(chaoBiaoSJ.getI_CHAOJIANSL(), chaoBiaoSJ.getI_PINGJUNL1(), waterHighN)) {
                        list.add(chaoBiaoSJ);
                    }
                }
                break;
            case LOWAMOUNT:
                list = new ArrayList<>();
                qb.where(Properties.S_CH.eq(cH),
                        Properties.I_CHAOBIAOBZ.gt(0),
                        Properties.I_RenWuBH.eq(taskId));
                qb.orderAsc(Properties.I_CENEIXH);
                List<ChaoBiaoSJ> listTemporaryOne = qb.list();
                for (ChaoBiaoSJ chaoBiaoSJ : listTemporaryOne) {
                    if (isWaterLow(chaoBiaoSJ.getI_CHAOJIANSL(), chaoBiaoSJ.getI_PINGJUNL1())) {
                        list.add(chaoBiaoSJ);
                    }
                }
                break;
            default:
                break;
        }

        return list;
    }

    private boolean isWaterHigh(int waterNumber, int averageNumber, double N) {
        if (0 <= waterNumber && waterNumber < 50) {
            if (waterNumber - averageNumber >= 35) {
                return true;
            }
        } else if (50 <= waterNumber && waterNumber < 100) {
            if (waterNumber - averageNumber >= 50) {
                return true;
            }
        } else if (100 <= waterNumber && waterNumber <= 200) {
            if (waterNumber - averageNumber >= 70) {
                return true;
            }
        } else if (waterNumber > 200) {
            if (waterNumber / averageNumber > N) {
                return true;
            }
        }
        return false;
    }

    private boolean isWaterLow(int waterNumber, int averageNumber) {
        if (0 <= waterNumber && waterNumber < 50) {
            if (averageNumber - waterNumber >= 35) {
                return true;
            }
        } else if (50 <= waterNumber && waterNumber < 100) {
            if (averageNumber - waterNumber >= 50) {
                return true;
            }
        } else if (100 <= waterNumber && waterNumber <= 200) {
            if (averageNumber - waterNumber >= 70) {
                return true;
            }
        }
        return false;
    }

    public int getChaoJianS(String account, int taskId, String volume, String chaoJianZTS) {
        if ((account == null) || (volume == null) || (chaoJianZTS == null)) {
            return 0;
        }

        String[] array = chaoJianZTS.split(",");
        if (array.length <= 0) {
            return 0;
        }

        List<String> list = Arrays.asList(array);
        if (list.size() <= 0) {
            return 0;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(taskId),
                Properties.S_CH.eq(volume),
                Properties.I_CHAOBIAOBZ.eq(1),
                Properties.I_ZHUANGTAIBM.in(list));
        return (int) qb.buildCount().count();
    }

    /**
     * 修改本次抄码
     *
     * @param benCiCM 本次抄码
     * @param CID     用户号
     * @return boolean
     */
    public boolean updateChaoMa(int benCiCM, String CID) {
        if (CID == null) {
            return false;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(CID));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        ChaoBiaoSJ chaoBiaoSJ = chaoBiaoSJs.get(0);
        chaoBiaoSJ.setI_BENCICM(benCiCM);

        return this.insertOrReplace(chaoBiaoSJ) > 0 ? true : false;
    }


    /**
     * 根据CID(用户号)获取本地数据对应的单条抄表任务
     *
     * @param S_CID
     * @return ChaoBiaoSJ实体
     */
    public ChaoBiaoSJ get(int taskId, String cH, String S_CID) {
        if (S_CID == null || cH == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(S_CID), Properties.I_RenWuBH.eq(taskId), Properties.S_CH.eq(cH));
        List<ChaoBiaoSJ> chaoBiaoSJlist = qb.list();
        if ((chaoBiaoSJlist == null) || (chaoBiaoSJlist.size() <= 0)) {
            return null;
        }
        return chaoBiaoSJlist.get(0);
    }

    public ChaoBiaoSJ getChaoBiaoSJByGroupId(int taskId, int groupId, String S_CID) {
        if (S_CID == null || groupId <= 0) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(S_CID), Properties.I_RenWuBH.eq(taskId));
        List<ChaoBiaoSJ> chaoBiaoSJlist = qb.list();
        if ((chaoBiaoSJlist == null) || (chaoBiaoSJlist.size() <= 0)) {
            return null;
        }
        return chaoBiaoSJlist.get(0);
    }


    public ChaoBiaoSJ getChaoBiaoSJByID(int id) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.ID.eq(id));
        List<ChaoBiaoSJ> chaoBiaoSJlist = qb.list();
        if ((chaoBiaoSJlist == null) || (chaoBiaoSJlist.size() <= 0)) {
            return null;
        }
        return chaoBiaoSJlist.get(0);
    }


    public List<ChaoBiaoSJ> get(int taskId, String ch, List<String> cids) {
        if ((ch == null) || (cids == null)) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(ch), Properties.S_CID.in(cids), Properties.I_RenWuBH.eq(taskId));
        qb.orderAsc(Properties.I_CENEIXH);
        List<ChaoBiaoSJ> list = qb.list();

        return list;
    }

    public List<ChaoBiaoSJ> get(int taskId, int groupId, List<String> cids) {
        if ((groupId <= 0) || (cids == null)) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.in(cids), Properties.I_RenWuBH.eq(taskId));
        List<ChaoBiaoSJ> list = qb.list();

        return list;
    }

    /**
     * 修改备注
     *
     * @param s_cid
     * @param beiZhu
     */
    public void updateChaoBiaoBeiZhu(String s_cid, String beiZhu) {

        if (s_cid == null || beiZhu == null) {
            return;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(s_cid));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        ChaoBiaoSJ chaoBiaoSJ = chaoBiaoSJs.get(0);
        chaoBiaoSJ.setS_CHAOBIAOBZ(beiZhu);
        insertOrReplace(chaoBiaoSJ);

    }

    // ok
    public ChaoBiaoSJ getNextChaoBiaoSJ(int taskId, String ch, long ceneixh, boolean isNotReading) {
        if (ch == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        if (isNotReading) {
            qb.where(Properties.S_CH.eq(ch),
                    Properties.I_CENEIXH.gt(ceneixh),
                    Properties.I_RenWuBH.eq(taskId),
                    Properties.I_CHAOBIAOBZ.eq(0));
        } else {
            qb.where(Properties.S_CH.eq(ch),
                    Properties.I_CENEIXH.gt(ceneixh),
                    Properties.I_RenWuBH.eq(taskId));
        }
        qb.orderAsc(Properties.I_CENEIXH);
        List<ChaoBiaoSJ> chaoBiaoSJList = qb.list();
        if ((chaoBiaoSJList == null) || (chaoBiaoSJList.size() <= 0)) {
            return null;
        }

        return chaoBiaoSJList.get(0);
    }

    public List<ChaoBiaoSJ> getNextUnfinishedChaoBiaoSJWithCeNeiXH(int renWuBH, String ch) {
        if (ch == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RenWuBH.eq(renWuBH),
                Properties.S_CH.eq(ch));
        qb.orderAsc(Properties.I_CENEIXH);
        List<ChaoBiaoSJ> srcChaoBiaoSJList = qb.list();
        if ((srcChaoBiaoSJList == null) || (srcChaoBiaoSJList.size() <= 0)) {
            return null;
        }

        List<ChaoBiaoSJ> destChaoBiaoSJList = new ArrayList<>();
        for (ChaoBiaoSJ chaoBiaoSJ : srcChaoBiaoSJList) {
            if (chaoBiaoSJ.getI_CHAOBIAOBZ() == 0) {
                destChaoBiaoSJList.add(chaoBiaoSJ);
                break;
            }
        }

        if (destChaoBiaoSJList.size() <= 0) {
            destChaoBiaoSJList.add(srcChaoBiaoSJList.get(0));
        }

        destChaoBiaoSJList.add(srcChaoBiaoSJList.get(0));
        destChaoBiaoSJList.add(srcChaoBiaoSJList.get(srcChaoBiaoSJList.size() - 1));
        return destChaoBiaoSJList;
    }

    // ok
    public ChaoBiaoSJ getNextChaoBiaoSJNew(String account, int taskId, String S_CID, boolean isNotReading) {
        if (account == null || S_CID == null) {
            return null;
        }

        List<ChaoBiaoSJ> chaoBiaoSJList = getAllChaoBiaoSJ(account, taskId, false);

        if (isNotReading) {
            List<ChaoBiaoSJ> chaoBiaoSJListNotRead = new ArrayList<>();
            int index = -1;
            for (int i = 0; i < chaoBiaoSJList.size(); i++) {
                if (chaoBiaoSJList.get(i).getS_CID().equals(S_CID)) {
                    index = i;
                    break;
                }
            }
            for (int i = index + 1; i < chaoBiaoSJList.size(); i++) {
                if (chaoBiaoSJList.get(i).getI_CHAOBIAOBZ() == 0) {
                    chaoBiaoSJListNotRead.add(chaoBiaoSJList.get(i));
                }
            }
            if (chaoBiaoSJListNotRead.size() == 0) {
                return null;
            }
            return chaoBiaoSJListNotRead.get(0);
        }

        ChaoBiaoSJ chaoBiaoNext = null;
        for (int i = 0; i < chaoBiaoSJList.size(); i++) {
            if (chaoBiaoSJList.get(i).getS_CID().equals(S_CID)) {
                chaoBiaoNext = chaoBiaoSJList.get(i + 1);
                break;
            }
        }

        if (chaoBiaoNext == null) {
            if (chaoBiaoSJList.get(chaoBiaoSJList.size() - 1).getS_CID().equals(S_CID)) {
                return null;
            }
            return chaoBiaoSJList.get(0);

        }
        return chaoBiaoNext;
    }


    public ChaoBiaoSJ getPreviousChaoBiaoSJ(int taskId, String ch, long ceneixh, boolean isNotReading) {
        if (ch == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        if (isNotReading) {
            qb.where(Properties.S_CH.eq(ch),
                    Properties.I_CENEIXH.lt(ceneixh),
                    Properties.I_RenWuBH.eq(taskId),
                    Properties.I_CHAOBIAOBZ.eq(0));
        } else {
            qb.where(Properties.S_CH.eq(ch),
                    Properties.I_CENEIXH.lt(ceneixh),
                    Properties.I_RenWuBH.eq(taskId));
        }
        qb.orderDesc(Properties.I_CENEIXH);
        List<ChaoBiaoSJ> chaoBiaoSJList = qb.list();
        if ((chaoBiaoSJList == null) || (chaoBiaoSJList.size() <= 0)) {
            return null;
        }
        return chaoBiaoSJList.get(0);
    }

    public ChaoBiaoSJ getPreviousChaoBiaoSJNew(String account, int taskId, String S_CID, boolean isNotReading) {
        if (account == null || S_CID == null) {
            return null;
        }

        List<ChaoBiaoSJ> chaoBiaoSJList = getAllChaoBiaoSJ(account, taskId, false);

        if (isNotReading) {
            List<ChaoBiaoSJ> chaoBiaoSJListNotRead = new ArrayList<>();
            for (ChaoBiaoSJ chaoBiaoSJ : chaoBiaoSJList) {

                if (chaoBiaoSJ.getS_CID().equals(S_CID)) {
                    break;
                }

                if (chaoBiaoSJ.getI_CHAOBIAOBZ() == 0) {
                    chaoBiaoSJListNotRead.add(chaoBiaoSJ);
                }
            }
            if (chaoBiaoSJListNotRead.size() == 0) {
                return null;
            }
            return chaoBiaoSJListNotRead.get(chaoBiaoSJListNotRead.size() - 1);
        }

        ChaoBiaoSJ chaoBiaoSJPrevious = null;
        for (int i = 0; i < chaoBiaoSJList.size(); i++) {
            if (chaoBiaoSJList.get(i).getS_CID().equals(S_CID)) {
                chaoBiaoSJPrevious = chaoBiaoSJList.get(i - 1);
                break;
            }
        }
        if (chaoBiaoSJPrevious == null) {
            if (chaoBiaoSJList.get(0).getS_CID().equals(S_CID)) {
                return null;
            }
            return chaoBiaoSJList.get(chaoBiaoSJList.size() - 1);

        }

        return chaoBiaoSJPrevious;
    }

    public List<ChaoBiaoSJ> getAllChaoBiaoSJ(String account, int taskId, boolean isNotReading) {
        if (account == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        if (isNotReading) {
            qb.where(Properties.S_CHAOBIAOY.eq(account),
                    Properties.I_RenWuBH.eq(taskId),
                    Properties.I_CHAOBIAOBZ.eq(0));
        } else {
            qb.where(Properties.S_CHAOBIAOY.eq(account),
                    Properties.I_RenWuBH.eq(taskId));
        }

        return qb.list();
    }


    /**
     * 获取量高量低抄表数据
     *
     * @param account  操作员
     * @param loadType 获取类型
     * @return List<ChaoBiaoSJ>
     */
    public List<ChaoBiaoSJ> getLiangGaoLiangDiChaoBiaoSJ(String account,
                                                         int loadType) {
        List<ChaoBiaoSJ> dataList = new ArrayList<ChaoBiaoSJ>();
        String selection = "";
        QueryBuilder qb = this.queryBuilder();
        if (loadType == CB_LIANGDI_SJ) {
            qb.where(Properties.I_LIANGGAOLDYYBM.lt(String.valueOf(0)), Properties.I_CHAOBIAOBZ.eq(String.valueOf(1)));
            dataList = qb.list();
        } else {
            qb.where(Properties.I_LIANGGAOLDYYBM.gt(String.valueOf(0)), Properties.I_CHAOBIAOBZ.eq(String.valueOf(1)));
            dataList = qb.list();
        }

        return dataList;

    }


    /**
     * 通过册本号，抄表员，获取册本下所有的册内序号
     *
     * @param ch      册本号
     * @param account 抄表员
     * @return Map<Integer, Integer> key：index，values：册内序号
     */
    public List<Integer> getCeNetXH(String ch, String account) {

        if (ch == null || account == null) {
            return null;
        }
        List<Integer> list = new ArrayList<Integer>();
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(ch), Properties.S_CHAOBIAOY.eq(account));
        qb.orderAsc(Properties.I_CeNeiPX);
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        if (chaoBiaoSJs.size() > 0) {
            for (ChaoBiaoSJ chaoBiaoSJ : chaoBiaoSJs) {
                list.add(chaoBiaoSJ.getI_CENEIXH());
            }
            return list;

        }

        return null;
    }

    /**
     * 根据CH(册本号)获取本地数据对应的单条未完成抄表任务
     *
     * @param CH 册本号
     * @return ChaoBiaoSJ实体
     */
    public ChaoBiaoSJ getFirstUnWorkChaoBiaoSJ(String CH) {

        if (CH == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(CH), Properties.I_CHAOBIAOBZ.eq(NOWORK));
        qb.orderAsc(Properties.I_CeNeiPX);
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();

        return chaoBiaoSJs.get(0);
    }


    public List<ChaoBiaoInfo> getchaoBiaoPieSJ(int chaoBiaoBZ, String cH,
                                               String chaoBiaoY) {
        String count = "count";
        _db = this.session.getDatabase();
        String sql = "select count(*) as " + count + " ,zt."
                + ChaoBiaoZTColumns.S_ZHUANGTAIMC + " from "
                + CB_CHAOBIAOSJ + " sj," + CB_ChaoBiaoZT
                + " zt where sj." + ChaoBiaoSJColumns.CH + " = '" + cH
                + "' and  sj." + ChaoBiaoSJColumns.CHAOBIAOBIAOZHI + " =  "
                + chaoBiaoBZ + " and sj." + ChaoBiaoSJColumns.CHAOBIAOYUAN
                + " = '" + chaoBiaoY + "' and zt."
                + ChaoBiaoZTColumns.I_ZHUANGTAIBM + "= sj."
                + ChaoBiaoSJColumns.ZHUANGTAIBM + " group by sj."
                + ChaoBiaoSJColumns.ZHUANGTAIBM;

        List<ChaoBiaoInfo> cBList = new ArrayList<ChaoBiaoInfo>();
        String sqlCount = "select count(*) as " + count + " from "
                + CB_CHAOBIAOSJ + " where "
                + ChaoBiaoSJColumns.CHAOBIAOBIAOZHI + " = 0 and "
                + ChaoBiaoSJColumns.CH + " ='" + cH + "'";

        _db.beginTransaction();
        Cursor cursorCount = _db.rawQuery(sqlCount, null);
        if (cursorCount.moveToNext()) {
            ChaoBiaoInfo info = new ChaoBiaoInfo();
            info.setCount(cursorCount.getInt(cursorCount.getColumnIndex(count)));
            info.setContent(WEICHAO);
            cBList.add(info);
        }
        Cursor cursor = this._db.rawQuery(sql, null);
        while (cursor.moveToNext()) {
            ChaoBiaoInfo info = new ChaoBiaoInfo();
            info.setCount(cursor.getInt(cursor.getColumnIndex(count)));
            info.setContent(cursor.getString(cursor
                    .getColumnIndex("S_ZHUANGTAIMC")));
            cBList.add(info);
        }
        _db.setTransactionSuccessful();
        _db.endTransaction();

        cursorCount.close();
        cursor.close();
        return cBList;
    }

    /**
     * 获取册本对应的未抄的数据总条数
     *
     * @param cH 册本号
     * @return int
     */
    public int getChaoBiaoPillarWCSJ(String cH, String chaoBiaoY) {

        if (cH == null || chaoBiaoY == null) {
            return 0;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(cH), Properties.I_CHAOBIAOBZ.eq(0), Properties.S_CHAOBIAOY.eq(chaoBiaoY));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();

        return (int) qb.count();
    }

    /**
     * 获取册本对应的估抄数据，根据传入的估抄数据状态码
     *
     * @param cH       册本号
     * @param guSuanBM 估抄状态码
     * @return int
     */
    public int getChaoBiaoPillarYCSJ(String cH, String guSuanBM,
                                     String chaoBiaoY) {
        String[] gs = guSuanBM.split(",");
        if (cH == null || guSuanBM == null || chaoBiaoY == null) {
            return 0;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_ZHUANGTAIBM.in((Object[]) gs), Properties.S_CH.eq(cH.trim()), Properties.S_CHAOBIAOY.eq(chaoBiaoY.trim()));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        return chaoBiaoSJs.size();
    }

    /**
     * 获取册本对应的超标数据总条数
     *
     * @param cH 册本号
     * @return int
     */
    public int getChaoBiaoPillarSJ(String cH, String chaoBiaoY) {

        if (cH == null || chaoBiaoY == null) {
            return 0;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(cH), Properties.S_CHAOBIAOY.eq(chaoBiaoY));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        if (chaoBiaoSJs.size() <= 0 || qb.list() == null) {
            return 0;
        }
        return (int) qb.count();

    }


    /**
     * 根据册本号获取册本下表卡数
     *
     * @param s_ch
     * @return
     */
    public int getBiaoKaCount(String s_ch) {

        if (s_ch == null) {
            return 0;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(s_ch));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        if (chaoBiaoSJs.size() <= 0 || qb.list() == null) {
            return 0;
        }
        return chaoBiaoSJs.size();

    }

    /**
     * 根据用户号返回根据册内序号排序的抄表数据列表
     *
     * @param s_cid
     * @return
     */
    public HashMap<ChaoBiaoSJ, Integer> getChaobiaoSJRowNum(int taskId, String cH, String s_cid) {
        if (s_cid == null || cH == null) {
            return null;
        }
        Integer num = 1;
        HashMap<ChaoBiaoSJ, Integer> s_cids = new HashMap<ChaoBiaoSJ, Integer>();
        ChaoBiaoSJ chaobiaosj = new ChaoBiaoSJ();
        chaobiaosj = get(taskId, cH, s_cid);

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(chaobiaosj.getS_CH()));
        qb.orderAsc(Properties.I_CENEIXH);
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        for (ChaoBiaoSJ chaoBiaoSJ : chaoBiaoSJs) {
            s_cids.put(chaoBiaoSJ, num);
            num++;
        }

        return s_cids;

    }

    /**
     * 根据输入内容模糊查询
     */
    public List<ChaoBiaoSJ> getSelectChaoBiaoSJ(String str, String S_CH) {
        _db = session.getDatabase();
        List<ChaoBiaoSJ> list = new ArrayList<ChaoBiaoSJ>();
        String selection = ChaoBiaoSJColumns.CID + " in (select S_CID from "
                + Tables.KG_BiaoKaXX + " where " + BiaoKaXXColumns.S_DIZHI
                + " like ? or " + BiaoKaXXColumns.S_KEHUMC + " like ? or "
                + BiaoKaXXColumns.S_LIANXIDH + " like ? or "
                + BiaoKaXXColumns.S_LIANXISJ + " like ? or "
                + BiaoKaXXColumns.S_CID + " like ? or "
                + BiaoKaXXColumns.S_JIANHAO + " like ? or "
                + BiaoKaXXColumns.S_SHUIBIAOGYH + " like ? ) and "
                + BiaoKaXXColumns.S_CH + " = ? order by "
                + ChaoBiaoSJColumns.CENEIPX + " ASC ";
        String[] selectionArgs = new String[]{"%" + str + "%",
                "%" + str + "%", "%" + str + "%", "%" + str + "%",
                "%" + str + "%", "%" + str + "%", "%" + str + "%", S_CH};
        Cursor cursor = _db.query(Tables.CB_CHAOBIAOSJ, null, selection,
                selectionArgs, null, null, null);
        ChaoBiaoSJ chaoBiaoSJ = null;

        while (cursor.moveToNext()) {
            chaoBiaoSJ = this.analyze(cursor);
            list.add(chaoBiaoSJ);
        }
        cursor.close();
        return list;


    }

    /**
     * 根据册本号 册内排序号 返回抄表数据实体
     *
     * @param S_CH
     * @param I_CeNeiPX
     * @return
     */
    public ChaoBiaoSJ getChaoBSJBySCHAndCeNeiPX(String S_CH, int I_CeNeiPX) {

        if (S_CH == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(S_CH), Properties.I_CeNeiPX.eq(I_CeNeiPX));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        return chaoBiaoSJs.get(0);

    }


    /**
     * 未改动
     * 更新抄表数据
     *
     * @param S_CID
     * @param I_ZhuangTaiBM
     * @param S_ZhuangTaiMC
     * @param I_BenCiCM
     * @param I_ChaoJianSL
     * @param N_JE
     * @param S_CH
     * @return
     */
//    public boolean updateChaobiaoSJ(String S_CID, int I_ZhuangTaiBM,
//                                    String S_ZhuangTaiMC, int I_BenCiCM, int I_ChaoJianSL, double N_JE,
//                                    String S_CH, int I_LiangGaoLDYYBM, String S_ChaoBiaoBeiZhu,
//                                    double x1, double y1, int chaoBiaoBiaoZhi, String jieTiTS) {
//
//        _db = DBHelper.getSQLiteDatabase();
//        ContentValues values = new ContentValues();
//        values.put(ChaoBiaoSJColumns.CHAOBIAOBIAOZHI, chaoBiaoBiaoZhi); // ChaoBiaoSJColumns.FINISHWORK
//        values.put(ChaoBiaoSJColumns.ZHUANGTAIBM, I_ZhuangTaiBM);
//        values.put(ChaoBiaoSJColumns.ZHUANGTAIMC, S_ZhuangTaiMC);
//        values.put(ChaoBiaoSJColumns.BENCICM, I_BenCiCM);
//        values.put(ChaoBiaoSJColumns.CHAOJIANSL, I_ChaoJianSL);
//        values.put(ChaoBiaoSJColumns.CHAOBIAORQ, new Date().getTime());
//        values.put(ChaoBiaoSJColumns.JE, N_JE);
//        values.put(ChaoBiaoSJColumns.LIANGGAOLDYYBM, I_LiangGaoLDYYBM);
//        // values.put(ChaoBiaoSJColumns.CHAOBIAOBEIZHU, S_ChaoBiaoBeiZhu);
//        values.put(ChaoBiaoSJColumns.X1, x1);
//        values.put(ChaoBiaoSJColumns.Y1, y1);
//        values.put(ChaoBiaoSJColumns.S_JIETITS, jieTiTS);
//
//        if (chaoBiaoBiaoZhi == ChaoBiaoSJColumns.BILLWORK) {
//            values.put(ChaoBiaoSJColumns.I_SHANGCHUANBZ, 1);
//        } else {
//            values.put(ChaoBiaoSJColumns.I_SHANGCHUANBZ, 0);
//        }
//
//        String sql = "update " + Tables.CB_CHAOBIAORW + " set "
//                + ChaoBiaoRWColumns.I_YICHAOSHU + "= "
//                + "(select count(s_ch) from " + Tables.CB_CHAOBIAOSJ
//                + " cbsj where cbsj." + ChaoBiaoSJColumns.CH + "="
//                + Tables.CB_CHAOBIAORW + "." + ChaoBiaoRWColumns.S_CH
//                + " and cbsj." + ChaoBiaoSJColumns.CHAOBIAOBIAOZHI + ">0) "
//                + "where " + ChaoBiaoSJColumns.CH + "=?";
//
//        try {
//
//            String whereClause = ChaoBiaoSJColumns.CID + "=?";
//            String[] whereArgs = new String[]{S_CID};
//
//            _db.beginTransaction();
//            // 更新抄表数据
//            this._db.update(Tables.CB_CHAOBIAOSJ, values, whereClause,
//                    whereArgs);
//            // 更新已抄数
//            this._db.execSQL(sql, new Object[]{S_CH});
//
//            _db.setTransactionSuccessful();
//            _db.endTransaction();
//
//            return true;
//        } catch (Exception e) {
//            e.printStackTrace();
//
//            return false;
//        }
//    }


    /**
     * 根据抄表标志，任务编号，上传标志条件获取相对应的抄表数据
     *
     * @param chaoBiaoBZ    抄表标志
     * @param shangChuanBZ
     * @param chaobiaoRWAll 任务编号 上传标志
     * @return List<ChaoBiaoSJ>
     */
    public List<ChaoBiaoSJ> getChaoBiaoSJ(int chaoBiaoBZ, int shangChuanBZ,
                                          String chaobiaoRWAll) {

        if (chaobiaoRWAll == null) {
            return null;
        }

        QueryBuilder qb = queryBuilder();
        String[] split = chaobiaoRWAll.split(",");


        if (split.length == 1) {
            qb.where(Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ), Properties.I_ShangChuanBZ.eq(shangChuanBZ), Properties.I_RenWuBH.eq(split[0]));
            qb.or(Properties.I_RenWuBH.eq(split[0]), Properties.I_RenWuBH.eq(split[1]));
        } else if (split.length == 2) {
            qb.where(Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ), Properties.I_ShangChuanBZ.eq(shangChuanBZ));
            qb.or(Properties.I_RenWuBH.eq(split[0]), Properties.I_RenWuBH.eq(split[1]));
        } else {
            qb.where(Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ), Properties.I_ShangChuanBZ.eq(shangChuanBZ));
        }

        return qb.list();
    }


    /**
     * 根据抄表标志，任务编号，上传标志条件获取相对应的抄表数据
     *
     * @param chaoBiaoBZ   抄表标志
     * @param shangChuanBZ
     * @param renWuBH      任务编号 上传标志
     * @param flag         查询范围（0任意抄表状态，1已抄+延迟+外复延迟）
     * @return List<ChaoBiaoSJ>
     */
    public List<ChaoBiaoSJ> getChaoBiaoSJRenWuBH(int chaoBiaoBZ,
                                                 int shangChuanBZ, int renWuBH, int flag) {
        QueryBuilder qb = this.queryBuilder();
        switch (flag) {
            case 0:
                qb.where(Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ), Properties.I_ShangChuanBZ.eq(shangChuanBZ), Properties.I_RenWuBH.eq(renWuBH));
                break;
            case 1:
                qb.where(Properties.I_CHAOBIAOBZ.in(FINISHWORK, YANCHILX_WF, YANCHILX_YC),
                        Properties.I_ShangChuanBZ.eq(shangChuanBZ), Properties.I_RenWuBH.eq(renWuBH));
                break;
            default:
                break;
        }
        return qb.list();
    }


    /**
     * 根据抄表标志，抄表员，上传标志条件获取相对应的抄表数据
     */
    public List<ChaoBiaoSJ> getChaoBiaoSJCBY(String chaoBiaoY,
                                             int renWuBH,
                                             String ch,
                                             int chaoBiaoBZ,
                                             int shangChuanBZ,
                                             Integer[] chaoBiaoSjType) {
        if (chaoBiaoY == null) {
            return null;
        }

        List<Integer> arrayList = Arrays.asList(chaoBiaoSjType);
        QueryBuilder qb = this.queryBuilder();
        if (renWuBH <= 0) {
            qb.where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                    Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ),
                    Properties.I_ShangChuanBZ.eq(shangChuanBZ));
        } else if (ch != null) {
            qb.where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                    Properties.I_RenWuBH.eq(renWuBH),
                    Properties.S_CH.eq(ch),
                    Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ),
                    Properties.I_ShangChuanBZ.eq(shangChuanBZ));
        } else {
            qb.where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                    Properties.I_RenWuBH.eq(renWuBH),
                    Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ),
                    Properties.I_ShangChuanBZ.eq(shangChuanBZ));
        }
        qb.orderAsc(Properties.I_RenWuBH);

//        if (qb.list() == null || qb.list().size() == 0) {
//            return null;
//        }

        return qb.list();
    }

    public List<ChaoBiaoSJ> getNotUploadChaoBiaoSJ(String chaoBiaoY, int renWuBH, String ch) {
        long count = queryBuilder().where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                Properties.I_RenWuBH.eq(renWuBH),
                Properties.S_CH.eq(ch),
                Properties.I_CHAOBIAOBZ.eq(0))
                .count();
        if (count > 0){
            return null;
        }

        return queryBuilder().where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                Properties.I_RenWuBH.eq(renWuBH),
                Properties.S_CH.eq(ch),
                Properties.I_ShangChuanBZ.eq(0),
                Properties.I_CHAOBIAOBZ.eq(1))
                .list();
    }

    public List<ChaoBiaoSJ> getAllChaoBiaoSJCBY(String chaoBiaoY,
                                                int renWuBH,
                                                String ch,
                                                int chaoBiaoBZ) {
        if (chaoBiaoY == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        if (renWuBH <= 0) {
            qb.where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                    Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ));
        } else if (ch != null) {
            qb.where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                    Properties.I_RenWuBH.eq(renWuBH),
                    Properties.S_CH.eq(ch),
                    Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ));
        } else {
            qb.where(Properties.S_CHAOBIAOY.eq(chaoBiaoY),
                    Properties.I_RenWuBH.eq(renWuBH),
                    Properties.I_CHAOBIAOBZ.eq(chaoBiaoBZ));
        }
        qb.orderAsc(Properties.I_RenWuBH);

        if (qb.list() == null || qb.list().size() == 0) {
            return null;
        }

        return qb.list();
    }


    /**
     * 更改抄表数据延迟原因
     *
     * @param cid      用户号
     * @param yanChiYY 延迟 原因
     * @return boolean
     */
    public boolean updateChaoBiaoSjYanChiYY(String cid, String yanChiYY) {

        if (cid == null || yanChiYY == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(cid));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        ChaoBiaoSJ chaoBiaoSJ = chaoBiaoSJs.get(0);
        chaoBiaoSJ.setS_YANCIYY(yanChiYY);
        insertOrReplace(chaoBiaoSJ);

        return insertOrReplace(chaoBiaoSJ) > 0 ? true : false;


    }

    /**
     * 获取该册本下所有的抄表数据
     *
     * @param ch 册号
     * @return List<ChaoBiaoSJ>
     */
    public List<ChaoBiaoSJ> getNextChaoBiaoSJList(String ch) {

        if (ch == null) {
            return null;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(ch));
        qb.orderAsc(Properties.I_CENEIXH);

        if (qb.list() == null || qb.list().size() == 0) {
            return null;
        }

        return qb.list();

    }


    /**
     * 更新金额
     *
     * @param S_CID
     * @param N_JE
     * @return
     */
    public boolean updateNJE(int taskId, String cH, String S_CID, double N_JE) {
        if (S_CID == null || cH == null) {
            return false;
        }

        ChaoBiaoSJ chaoBiaoSJ = get(taskId, cH, S_CID);
        chaoBiaoSJ.setN_JE(N_JE);
        return insertOrReplace(chaoBiaoSJ) > 0;

    }


    /**
     * 更新抄表数据
     *
     * @param chaoBiaoSJ
     */
    public void updateChaoBiaoSJ(ChaoBiaoSJ chaoBiaoSJ) {
        if (chaoBiaoSJ == null) {
            return;
        }

        this.update(chaoBiaoSJ);
    }

    public void updateChaoBiaoSJList(List<ChaoBiaoSJ> chaoBiaoSJList) {
        if (chaoBiaoSJList == null) {
            return;
        }

        updateInTx(chaoBiaoSJList);
    }

    /**
     * 根据任务编号删除对应的抄表数据
     *
     * @param renWuBH 任务编号
     */
    public void deleteChaoBiaoSJ(int renWuBH, String chaoBiaoYuan) {

        QueryBuilder<ChaoBiaoSJ> qb = this.queryBuilder();
        DeleteQuery<ChaoBiaoSJ> dq = qb.where(Properties.I_RenWuBH.eq(renWuBH), Properties.S_CHAOBIAOY.eq(chaoBiaoYuan)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
    }

    public boolean deleteChaoBiaoSJ(String account, int renWuBH, String ch) {
        if ((account == null) || (ch == null)) {
            return false;
        }

        QueryBuilder<ChaoBiaoSJ> qb = this.queryBuilder();
        DeleteQuery<ChaoBiaoSJ> dq = qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(renWuBH), Properties.S_CH.eq(ch)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
        return true;
    }

    public List<ChaoBiaoSJ> getVolumnChaoBiaoSJ(String account, int renWuBH, String ch){
        if ((account == null) || (ch == null)) {
            return null;
        }

        return queryBuilder().where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(renWuBH), Properties.S_CH.eq(ch)).build().list();
    }

    public boolean deleteChaoBiaoSJ(String account, int renWuBH, int groupId) {
        if ((account == null) || (groupId <= 0)) {
            return false;
        }

        QueryBuilder<ChaoBiaoSJ> qb = this.queryBuilder();
        DeleteQuery<ChaoBiaoSJ> dq = qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(renWuBH)).buildDelete();
        dq.executeDeleteWithoutDetachingEntities();
        return true;
    }


    /**
     * 更改上传状态
     *
     * @param cid 用户号
     */
    public void UpdateShangChuanBIaoZhi(int taskId, String cH, String cid, int shangchuanBZ) {

        if (cid == null) {
            return;
        }

        ChaoBiaoSJ chaoBiaoSJ = get(taskId, cH, cid);
        chaoBiaoSJ.setI_ShangChuanBZ(shangchuanBZ);
        insertOrReplace(chaoBiaoSJ);
    }

    /**
     * 根据任务编号删除不存在renWuBHAll中的抄表任务
     *
     * @param renWuBHAll
     * @return
     */
    public void delectChaoBiaoSJ(String renWuBHAll, String chaoBiaoYBH) {

        if (renWuBHAll == null)
            return;

        else if (renWuBHAll.equals("")) {
            QueryBuilder qb = this.queryBuilder();
            qb.where(Properties.S_CHAOBIAOY.eq(chaoBiaoYBH)).buildDelete().executeDeleteWithoutDetachingEntities();
            return;


        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RenWuBH.notIn(renWuBHAll), Properties.S_CHAOBIAOY.eq(chaoBiaoYBH)).buildDelete()
                .executeDeleteWithoutDetachingEntities();

    }


    /**
     * 未改动
     * 上报延迟，修改延迟标志
     */
    public boolean updateYanChiBZ(String S_CID, int yanChiLX, String S_CH,
                                  String chaoBiaoBZ) {
//        _db = DBHelper.getSQLiteDatabase();
//        ContentValues values = new ContentValues();
//        values.put(ChaoBiaoSJColumns.I_SHANGCHUANBZ, 0);
//        values.put(ChaoBiaoSJColumns.CHAOBIAOBIAOZHI, 3);
//        values.put(ChaoBiaoSJColumns.CHAOBIAOBEIZHU, chaoBiaoBZ);
//        values.put(ChaoBiaoSJColumns.ZHUANGTAIMC, "延迟");
//
//        String sql = "update " + Tables.CB_CHAOBIAORW + " set "
//                + ChaoBiaoRWColumns.I_YICHAOSHU + "= "
//                + "(select count(s_ch) from " + Tables.CB_CHAOBIAOSJ
//                + " cbsj where cbsj." + ChaoBiaoSJColumns.CH + "="
//                + Tables.CB_CHAOBIAORW + "." + ChaoBiaoRWColumns.S_CH
//                + " and cbsj." + ChaoBiaoSJColumns.CHAOBIAOBIAOZHI + ">0) "
//                + "where " + ChaoBiaoSJColumns.CH + "=?";
//
//        try {
//
//            String whereClause = ChaoBiaoSJColumns.CID + "=? ";
//            String[] whereArgs = new String[]{S_CID};
//
//            _db.beginTransaction();
//            // 更新抄表数据
//            this._db.update(Tables.CB_CHAOBIAOSJ, values, whereClause,
//                    whereArgs);
//            // 更新已抄数
//            this._db.execSQL(sql, new Object[]{S_CH});
//
//            _db.setTransactionSuccessful();
//            _db.endTransaction();
//
//            return true;
//        } catch (Exception e) {
//            e.printStackTrace();
//            return false;
//        }
        return false;
    }

    /**
     * 插入新的数据到抄表数据中
     *
     * @param chaoBiaoSJ 抄表数据实体
     */
    public void insertChaoBiaoSJ(ChaoBiaoSJ chaoBiaoSJ) {
        if (chaoBiaoSJ == null) {
            return;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RenWuBH.eq(chaoBiaoSJ.getI_RenWuBH()),
                Properties.S_CH.eq(chaoBiaoSJ.getS_CH()),
                Properties.S_CID.eq(chaoBiaoSJ.getS_CID()),
                Properties.I_CHAOBIAOY.eq(chaoBiaoSJ.getI_CHAOBIAOY()),
                Properties.S_CHAOBIAOY.eq(chaoBiaoSJ.getS_CHAOBIAOY()));
        if ((qb.list() != null) && (qb.list().size() > 0)) {
//            ChaoBiaoSJ cbsj = (ChaoBiaoSJ)qb.list().get(0);
//            if ((cbsj.getI_CHAOBIAOBZ() > 0) && (cbsj.getI_ShangChuanBZ() == 0)) {
//                return;
//            }
//            chaoBiaoSJ.setID(cbsj.getID());
            return;
        } else {
            chaoBiaoSJ.setID(-1);
        }

        this.insertOrReplace(chaoBiaoSJ);
    }

    /**
     * 插入多条新的数据到抄表数据中
     *
     * @param chaoBiaoSJList 抄表数据实体
     */
    public void insertChaoBiaoSJList(List<ChaoBiaoSJ> chaoBiaoSJList, boolean needDeletingFirstly) {
        if ((chaoBiaoSJList == null) || (chaoBiaoSJList.size() <= 0)) {
            return;
        }

        if (needDeletingFirstly) {
            List<ChaoBiaoSJ> destChaoBiaoSJList = new ArrayList<>();
            for (ChaoBiaoSJ chaoBiaoSJ : chaoBiaoSJList) {
//                QueryBuilder qb = this.queryBuilder();
//                qb.where(Properties.S_CID.eq(chaoBiaoSJ.getS_CID()),
//                        Properties.I_CHAOBIAOBZ.eq(0));
//                qb.buildDelete().executeDeleteWithoutDetachingEntities();

                QueryBuilder qb = this.queryBuilder();
                qb.where(Properties.S_CID.eq(chaoBiaoSJ.getS_CID()));
                List<ChaoBiaoSJ> tmpList = qb.list();
                if ((tmpList == null) || (tmpList.size() <= 0)) {
                    destChaoBiaoSJList.add(chaoBiaoSJ);
                }
            }

            chaoBiaoSJList = destChaoBiaoSJList;
        }

        List<String> chList = new ArrayList<>();
        boolean found;
        for (ChaoBiaoSJ chaoBiaoSJ : chaoBiaoSJList) {
            found = false;
            for (String ch : chList) {
                if (ch.equals(chaoBiaoSJ.getS_CH())) {
                    found = true;
                    break;
                }
            }

            if (!found) {
                chList.add(chaoBiaoSJ.getS_CH());
            }
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.in(chList));
        List<ChaoBiaoSJ> chaoBiaoSJs = qb.list();
        List<ChaoBiaoSJ> destChaoBiaoSJList = new ArrayList<>();
        if (chaoBiaoSJs == null) {
            for (ChaoBiaoSJ chaoBiaoSJ : chaoBiaoSJList) {
                chaoBiaoSJ.setID(-1);
                destChaoBiaoSJList.add(chaoBiaoSJ);
            }
        } else {
            for (ChaoBiaoSJ chaoBiaoSJ1 : chaoBiaoSJList) {
                found = false;
                for (ChaoBiaoSJ chaoBiaoSJ2 : chaoBiaoSJs) {
                    if ((chaoBiaoSJ1.getI_RenWuBH() == chaoBiaoSJ2.getI_RenWuBH())
                            && (chaoBiaoSJ1.getS_CH().equals(chaoBiaoSJ2.getS_CH()))
                            && (chaoBiaoSJ1.getS_CID().equals(chaoBiaoSJ2.getS_CID()))
                            && (chaoBiaoSJ1.getI_CHAOBIAOY() == chaoBiaoSJ2.getI_CHAOBIAOY())
                            && (chaoBiaoSJ1.getS_CHAOBIAOY().equals(chaoBiaoSJ2.getS_CHAOBIAOY()))) {
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    chaoBiaoSJ1.setID(-1);
                    destChaoBiaoSJList.add(chaoBiaoSJ1);
                }
            }
        }

        if (destChaoBiaoSJList.size() > 0) {
            insertOrReplaceInTx(destChaoBiaoSJList);
        }
    }


    /**
     * 根据条件获取所有已抄记录
     *
     * @param taskId
     * @param volume
     * @param account
     * @param chaobiaobzYichao
     * @return
     */
    public List<ChaoBiaoSJ> getAllFinishedChaoBiaoSJ(int taskId, String volume, String account, int chaobiaobzYichao) {
        if (taskId < 0 || volume == null || account == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_RenWuBH.eq(taskId),
                Properties.S_CH.eq(volume),
                Properties.S_CHAOBIAOY.eq(account),
                Properties.I_CHAOBIAOBZ.eq(chaobiaobzYichao));

        List<ChaoBiaoSJ> list = qb.list();
        if (list == null) {
            return null;
        }

        return list;
    }


    /**
     * 根据操作员编号获取本地所有的抄表事件
     *
     * @param account
     * @return
     */
    public List<ChaoBiaoSJ> getAllChaoBiaoSJ(String account) {
        if (account == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CHAOBIAOY.eq(account));

        return qb.list() == null ? null : qb.list();
    }


    /**
     * 根据获取本地所有的临时抄表数据
     *
     * @return
     */
    public List<ChaoBiaoSJ> getTemporaryChaoBiaoSJ(String account) {
        if (account == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CHAOBIAOY.eq(account), Properties.I_RenWuBH.eq(-1))
                .orderAsc(Properties.I_CENEIXH);
        return qb.list();
    }

    public void deleteTemporaryChaoBiaoSJ(String account) {
        if (account == null) {
            return;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(-1));
        qb.buildDelete().executeDeleteWithoutDetachingEntities();
    }

    public List<ChaoBiaoSJ> getAllChaoBiaoSJ(String account, int taskId, String volume) {
        if ((account == null) || (volume == null)) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(taskId),
                Properties.S_CH.eq(volume))
                .orderAsc(Properties.I_CENEIXH);
        return qb.list();
    }

    public List<ChaoBiaoSJ> getAllChaoBiaoSJ(String account, int taskId) {
        if (account == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(taskId))
                .orderAsc(Properties.I_CENEIXH);
        return qb.list();
    }


    /**
     * 根据抄表员编号，册本号，任务编号删除记录
     *
     * @param account
     * @param taskId
     * @param volume
     * @return
     */
    public boolean deleteRecords(String account, int taskId, String volume, String cid) {
        if (account == null || volume == null || taskId < 0 || cid == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(taskId),
                Properties.S_CH.eq(volume),
                Properties.S_CID.eq(cid));

        qb.buildDelete().executeDeleteWithoutDetachingEntities();

        return true;
    }


    public void deleteChaoBiaoSJByTaskId(String account, String taskIdsArr) {
//        if(account == null || taskIdsArr == null){
//            return;
//        }
//
//        String[] taskIds = taskIdsArr.split(",");
//
//        QueryBuilder qb = this.queryBuilder();
//        qb.where(Properties.S_CHAOBIAOY.eq(account),
//                Properties.I_RenWuBH.in(taskIds));
//
//        qb.buildDelete().executeDeleteWithoutDetachingEntities();
    }

    /**
     * 分页查询
     *
     * @param account
     * @param taskId
     * @param volume
     * @param orderNumber
     * @return
     */
    public List<ChaoBiaoSJ> getAllChaoBiaoSJWithLimit(String account, int taskId, String volume, long orderNumber) {
        if (account == null || volume == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder().limit(10).offset((int) orderNumber);
        qb.where(Properties.S_CHAOBIAOY.eq(account),
                Properties.I_RenWuBH.eq(taskId),
                Properties.S_CH.eq(volume));
        qb.orderAsc(Properties.I_CENEIXH);

        return qb.list() == null ? null : qb.list();
    }

    /**
     * 分页获取数据
     *
     * @param taskId
     * @param volume
     * @param type
     * @param cIds
     * @param orderNumber
     * @return
     */
    public List<ChaoBiaoSJ> getListChaoBiaoSJWithLimit(int taskId, String volume, int type, List<String> cIds, long orderNumber) {
        if ((volume == null) || (cIds == null)) {
            return null;
        }

        List<ChaoBiaoSJ> list = null;
        QueryBuilder qb = this.queryBuilder().limit(10).offset((int) orderNumber);
        switch (type) {
            case ALLWORK: // 全部
                qb.where(Properties.S_CH.eq(volume), Properties.S_CID.in(cIds), Properties.I_RenWuBH.eq(taskId));
                //qb.limit(number);
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case NOWORK: // 未抄
                qb.where(Properties.S_CH.eq(volume),
                        Properties.I_CHAOBIAOBZ.eq(0),
                        Properties.S_CID.in(cIds), Properties.I_RenWuBH.eq(taskId));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
            case FINISHWORK: // 已抄
                qb.where(Properties.S_CH.eq(volume),
                        Properties.I_CHAOBIAOBZ.gt(0),
                        Properties.S_CID.in(cIds), Properties.I_RenWuBH.eq(taskId));
                qb.orderAsc(Properties.I_CENEIXH);
                list = qb.list();
                break;
//            case NORMALWORK:
//                qb.where(Properties.S_CH.eq("cH"),
//                        Properties.I_ZHUANGTAIBM.notIn(4, 3, 6, 14, 8),
//                        Properties.I_LIANGGAOLDYYBM.eq(0),
//                        Properties.S_CID.in(cids),
//                        qb.or(Properties.I_CHAOBIAOBZ.isNull(), Properties.I_CHAOBIAOBZ.notEq("%开单%")));
//                qb.orderAsc(Properties.I_CENEIXH);
//                list = qb.list();
//                break;
//            case UNNORMALWORK:
//                qb.where(Properties.S_CH.eq("cH"),
//                        Properties.S_CID.in(cids),
//                        qb.or(Properties.I_ZHUANGTAIBM.in(4, 3, 6, 14, 8),
//                                Properties.I_CHAOBIAOBZ.notEq(0),
//                                Properties.I_CHAOBIAOBZ.like("%开单%")));
//                qb.orderAsc(Properties.I_CENEIXH);
//                list = qb.list();
//                break;
            default:
                break;
        }

        if (list == null) {
            return null;
        }

        return list;
    }

    /**
     * 分页获取数据 SEARCH_LIMIT
     *
     * @param taskId
     * @param volume
     * @param userIds
     * @param orderNumber
     * @return
     */
    public List<ChaoBiaoSJ> getChaoBiaoSJListWithLimit(int taskId, String volume, List<String> userIds, long orderNumber) {
        if ((volume == null) || (userIds == null)) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder().limit(10).offset((int) orderNumber);
        qb.where(Properties.S_CH.eq(volume), Properties.S_CID.in(userIds), Properties.I_RenWuBH.eq(taskId));
        qb.orderAsc(Properties.I_CENEIXH);

        return qb.list() == null ? null : qb.list();
    }


    /**
     * 解析ChaoBiaoSJ实体数据
     *
     * @param cursor 本地数据库chaoBiaoSJ实体结果集
     * @return ChaoBiaoSJ 实体
     */
    private ChaoBiaoSJ analyze(Cursor cursor) {

        ChaoBiaoSJ chaoBiaoSJ = new ChaoBiaoSJ();

        chaoBiaoSJ.setID(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.ID)));

        chaoBiaoSJ.setI_RenWuBH(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.I_RENWUBH)));

        chaoBiaoSJ.setS_CH(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CH)));

        chaoBiaoSJ.setI_CENEIXH(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CENETXH)));

        chaoBiaoSJ.setS_CID(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CID)));

        chaoBiaoSJ.setS_ST(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.ST)));

        chaoBiaoSJ.setI_CHAOBIAON(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOBIAON)));

        chaoBiaoSJ.setI_CHAOBIAOY(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOBIAOYUE)));

        chaoBiaoSJ.setI_CC(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOCI)));

        chaoBiaoSJ.setD_CHAOBIAORQ(cursor.getLong(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOBIAORQ)));

        chaoBiaoSJ.setI_SHANGCICM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.SHANGCICM)));

        chaoBiaoSJ.setI_BENCICM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.BENCICM)));

        chaoBiaoSJ.setI_CHAOJIANSL(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOJIANSL)));

        chaoBiaoSJ.setI_ZHUANGTAIBM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.ZHUANGTAIBM)));

        chaoBiaoSJ.setS_ZHUANGTAIMC(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.ZHUANGTAIMC)));

        chaoBiaoSJ.setD_SHANGCICBRQ(cursor.getLong(cursor
                .getColumnIndex(ChaoBiaoSJColumns.SHANGCICBRQ)));

        chaoBiaoSJ.setI_SHANGCIZTBM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.SHANGCIZTBM)));

        chaoBiaoSJ.setS_ShangCiZTMC(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.SHANGCIZTMC)));

        chaoBiaoSJ.setI_ShangCiCJSL(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.SHANGCICJSL)));

        chaoBiaoSJ.setI_SHANGCIZTLXS(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.SHANGCIZTLXS)));

        chaoBiaoSJ.setI_PINGJUNL1(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.PINGJUN1)));

        chaoBiaoSJ.setI_PINGJUNL2(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.PINGJUN2)));

        chaoBiaoSJ.setI_PINGJUNL3(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.PINGJUN3)));

        chaoBiaoSJ.setN_JE(cursor.getDouble(cursor
                .getColumnIndex(ChaoBiaoSJColumns.JE)));

        chaoBiaoSJ.setS_ZONGBIAOCID(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.ZONGBIAOCID)));

        chaoBiaoSJ.setS_CHAOBIAOY(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOBIAOYUAN)));

        chaoBiaoSJ.setI_CHAOBIAOBZ(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOBIAOBIAOZHI)));

        chaoBiaoSJ.setI_JIUBIAOCM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.JIUBIAOCM)));

        chaoBiaoSJ.setI_XINBIAODM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.XINBIAODM)));

        chaoBiaoSJ.setD_HUANBIAORQ(cursor.getLong(cursor
                .getColumnIndex(ChaoBiaoSJColumns.HUANBIAORQ)));

        chaoBiaoSJ.setI_FANGSHIBM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.FANGSHIBM)));

        chaoBiaoSJ.setI_LIANGGAOLDYYBM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.LIANGGAOLDYYBM)));

        chaoBiaoSJ.setI_CHAOBIAOID(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOBIAO_ID)));

        chaoBiaoSJ.setI_ZHUANGTAILXS(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.ZHUANGTAILXS)));

        chaoBiaoSJ.setI_SHUIBIAOBL(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.SHUIBIAOBL)));

        chaoBiaoSJ.setN_YONGSHUIZKL(cursor.getDouble(cursor
                .getColumnIndex(ChaoBiaoSJColumns.YONGSHUIZKL)));

        chaoBiaoSJ.setN_PAISHUIZKL(cursor.getDouble(cursor
                .getColumnIndex(ChaoBiaoSJColumns.PAISHUIZKL)));

        chaoBiaoSJ.setI_TIAOJIAH(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.TIAOJIAH)));

        chaoBiaoSJ.setS_JianHao(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.JIANHAO)));

        chaoBiaoSJ.setD_XIAZAISJ(cursor.getLong(cursor
                .getColumnIndex(ChaoBiaoSJColumns.XIAZAISJ)));

        chaoBiaoSJ.setI_LINGYONGSLSM(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.LINGYONGSLSM)));

        chaoBiaoSJ.setI_LIANGGAOSL(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.LIANGGAOSL)));

        chaoBiaoSJ.setI_LIANGDISL(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.LIANGDISL)));

        chaoBiaoSJ.setS_X1(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.X1)));

        chaoBiaoSJ.setS_Y1(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.Y1)));

        chaoBiaoSJ.setS_X(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.X)));

        chaoBiaoSJ.setS_Y(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.Y)));

        chaoBiaoSJ.setS_CHAOBIAOBZ(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CHAOBIAOBEIZHU)));

        chaoBiaoSJ.setI_CeNeiPX(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.CENEIPX)));

        chaoBiaoSJ.setI_XiaZaiCS(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.I_XIAZAICS)));

        chaoBiaoSJ.setD_ZuiHouYCSCSJ(cursor.getLong(cursor
                .getColumnIndex(ChaoBiaoSJColumns.D_ZUIHOUYICSCSJ)));

        chaoBiaoSJ.setD_ZuiHouYCXZSJ(cursor.getLong(cursor
                .getColumnIndex(ChaoBiaoSJColumns.D_ZUIHOUYICXZSJ)));

        chaoBiaoSJ.setI_ShangChuanBZ(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.I_SHANGCHUANBZ)));

        chaoBiaoSJ.setI_ShenHeBZ(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.I_SHENHEBZ)));

        chaoBiaoSJ.setI_KaiZhangBZ(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.I_KaiZhangBZ)));

        chaoBiaoSJ.setS_JIETITS(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.S_JIETITS)));
        chaoBiaoSJ.setS_YANCIYY(cursor.getString(cursor
                .getColumnIndex(ChaoBiaoSJColumns.S_YANCIYY)));

        chaoBiaoSJ.setI_SHANGGEDBZQTS(cursor.getInt(cursor
                .getColumnIndex(ChaoBiaoSJColumns.I_SHANGGEDBZQTS)));

        chaoBiaoSJ.setD_SHANGSHANGGYCBRQ(cursor.getLong(cursor
                .getColumnIndex(ChaoBiaoSJColumns.D_SHANGSHANGGYCBRQ)));

        return chaoBiaoSJ;
    }

    public int weiShangchuanRecordCount(long time, String account) {
        if (time == 0) {
            return 0;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(
                Properties.D_CHAOBIAORQ.lt(time),
                Properties.S_CHAOBIAOY.eq(account),
                Properties.I_ShangChuanBZ.eq(0),
                Properties.I_CHAOBIAOBZ.eq(FINISHWORK)

        );
        List<ChaoBiaoSJ> chaoBiaoSJList = qb.list();
        return chaoBiaoSJList == null ? 0 : chaoBiaoSJList.size();
    }

    public boolean isUpload(String account, String ch){
        return !TextUtil.isNullOrEmpty(account) &&
                !TextUtil.isNullOrEmpty(ch) &&
                queryBuilder().where(Properties.S_CH.eq(ch),
                        Properties.S_CHAOBIAOY.eq(account),
                        Properties.I_ShangChuanBZ.eq(0))
                        .count() == 0;
    }


}
