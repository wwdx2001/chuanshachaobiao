package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoGJ;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CB_ChaoBiaoGJ.
*/
public class ChaoBiaoGJDao extends AbstractDao<ChaoBiaoGJ, Void> {

    public static final String TABLENAME = "CB_ChaoBiaoGJ";

    /**
     * Properties of entity ChaoBiaoGJ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, int.class, "ID", false, "ID");
        public final static Property S_CH = new Property(1, String.class, "S_CH", false, "S_CH");
        public final static Property S_CID = new Property(2, String.class, "S_CID", false, "S_CID");
        public final static Property S_CENEIXH = new Property(3, String.class, "S_CENEIXH", false, "S_CENEIXH");
        public final static Property D_CHAOBIAOSJ = new Property(4, int.class, "D_CHAOBIAOSJ", false, "D_CHAOBIAOSJ");
        public final static Property I_TYPE = new Property(5, int.class, "I_TYPE", false, "I_TYPE");
        public final static Property S_X = new Property(6, String.class, "S_X", false, "S_X");
        public final static Property S_Y = new Property(7, String.class, "S_Y", false, "S_Y");
        public final static Property S_X1 = new Property(8, String.class, "S_X1", false, "S_X1");
        public final static Property S_Y1 = new Property(9, int.class, "S_Y1", false, "S_Y1");

    };


    public ChaoBiaoGJDao(DaoConfig config) {
        super(config);
    }
    
    public ChaoBiaoGJDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_ChaoBiaoGJ' (" + //
                "'ID' INTEGER NOT NULL ," + // 0: ID
                "'S_CH' TEXT NOT NULL ," + // 1: S_CH
                "'S_CID' TEXT NOT NULL ," + // 2: S_CID
                "'S_CENEIXH' TEXT NOT NULL ," + // 3: S_CENEIXH
                "'D_CHAOBIAOSJ' INTEGER NOT NULL ," + // 4: D_CHAOBIAOSJ
                "'I_TYPE' INTEGER NOT NULL ," + // 5: I_TYPE
                "'S_X' TEXT NOT NULL ," + // 6: S_X
                "'S_Y' TEXT NOT NULL," + // 7: S_Y
                "'S_X1' TEXT NOT NULL," + //8: S_X1
                "'S_Y1' TEXT NOT NULL );"); //9: S_Y1
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_ChaoBiaoGJ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChaoBiaoGJ entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
        stmt.bindString(2, entity.getS_CH());
        stmt.bindString(3, entity.getS_CID());
        stmt.bindString(4, entity.getS_CENEIXH());
        stmt.bindLong(5, entity.getD_CHAOBIAOSJ());
        stmt.bindLong(6, entity.getI_TYPE());
        stmt.bindString(7, entity.getS_X());
        stmt.bindString(8, entity.getS_Y());
        stmt.bindString(9,entity.getS_X1());
        stmt.bindString(10, entity.getS_Y1());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ChaoBiaoGJ readEntity(Cursor cursor, int offset) {
        ChaoBiaoGJ entity = new ChaoBiaoGJ( //
            cursor.getInt(offset + 0), // ID
            cursor.getString(offset + 1), // S_CH
            cursor.getString(offset + 2), // S_CID
            cursor.getString(offset + 3), // S_CENEIXH
            cursor.getInt(offset + 4), // D_CHAOBIAOSJ
            cursor.getInt(offset + 5), // I_TYPE
            cursor.getString(offset + 6), // S_X
            cursor.getString(offset + 7), // S_Y
            cursor.getString(offset + 8), // S_ACCOUNT
            cursor.getString(offset + 9)//I_RENWUBH
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChaoBiaoGJ entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setS_CH(cursor.getString(offset + 1));
        entity.setS_CID(cursor.getString(offset + 2));
        entity.setS_CENEIXH(cursor.getString(offset + 3));
        entity.setD_CHAOBIAOSJ(cursor.getInt(offset + 4));
        entity.setI_TYPE(cursor.getInt(offset + 5));
        entity.setS_X(cursor.getString(offset + 6));
        entity.setS_Y(cursor.getString(offset + 7));
        entity.setS_X1(cursor.getString(offset + 8));
        entity.setS_Y1(cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ChaoBiaoGJ entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ChaoBiaoGJ entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 插入轨迹
     *
     */
    public boolean insertChaoBiaoGJ(ChaoBiaoGJ chaoBiaoGJ) {

        if(chaoBiaoGJ  == null){
            return false;
        }
        if (insertOrReplace(chaoBiaoGJ) == 0){
            return  false;
        }else{
            return true;
        }
    }
    /**
     * 更新轨迹
     *
     */
    public boolean updateChaoBiaoGJ(ChaoBiaoGJ chaoBiaoGJ) {

        if(chaoBiaoGJ  == null){
            return false;
        }
        if (insertOrReplace(chaoBiaoGJ) == 0){
            return  false;
        }else{
            return true;
        }
    }

    /**
     * 获得轨迹
     */
    public ChaoBiaoGJ getChaoBiaoGJ(String ch, String cid, int type) {

        if (ch == null || cid == null){
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(ch),Properties.S_CID.eq(cid),Properties.I_TYPE.eq(type));
        List<ChaoBiaoGJ> chaoBiaoGJs = qb.list();
        ChaoBiaoGJ chaoBiaoGJ = chaoBiaoGJs.get(0);
        return chaoBiaoGJ;
    }

    /**
     * 获得轨迹
     * @param account
     * @return
     */
    public List<ChaoBiaoGJ> getChaoBiaoGJList(String account){
        if (account == null ){
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        List<ChaoBiaoGJ> chaoBiaoGJs = qb.list();
        return chaoBiaoGJs;
    }

    /**
     * 获得轨迹
     * @param account
     * @param renwuBH
     * @param ch
     * @return
     */
    public List<ChaoBiaoGJ> getChaoBiaoGJList(String account, int renwuBH, String ch) {
        if (account == null || ch == null){
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(ch));
        List<ChaoBiaoGJ> chaoBiaoGJs = qb.list();
        return chaoBiaoGJs;
    }


    /**
     * 获得轨迹
     * type: xxx(001: chaobiao; 010: yanchi; 100: yanchi chaobiao)
     */
    public List<ChaoBiaoGJ> getChaoBiaoGJList(String ch, int type) {
        List<ChaoBiaoGJ> chaoBiaoGJList = new ArrayList<ChaoBiaoGJ>();
        if (ch == null) {
            return chaoBiaoGJList;
        }

        int tmp = type & 0x1;
        if (tmp == 1) {
            fillChaoBiaoGJList(ch, 0, chaoBiaoGJList);
        }

        tmp = (type >> 1) & 0x1;
        if (tmp == 1) {
            fillChaoBiaoGJList(ch, 1, chaoBiaoGJList);
        }

        tmp = (type >> 2) & 0x1;
        if (tmp == 1) {
            fillChaoBiaoGJList(ch, 2, chaoBiaoGJList);
        }

        return chaoBiaoGJList;
    }

    private void fillChaoBiaoGJList(String ch, int type, List<ChaoBiaoGJ> chaoBiaoGJList) {
        if ((ch == null) || (chaoBiaoGJList == null)) {
            return;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(ch), Properties.I_TYPE.eq(type));
        chaoBiaoGJList = qb.list();
    }

}
