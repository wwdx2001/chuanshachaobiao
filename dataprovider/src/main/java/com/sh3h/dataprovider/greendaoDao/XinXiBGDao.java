package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.XinXiBG;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table KG_XinXiBG.
 */
public class XinXiBGDao extends AbstractDao<XinXiBG, Void> {

    public static final String TABLENAME = "KG_XinXiBG";

    /**
     * Properties of entity XinXiBG.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Integer.class, "ID", false, "ID");
        public final static Property S_CH = new Property(1, String.class, "S_CH", false, "S_CH");
        public final static Property S_CID = new Property(2, String.class, "S_CID", false, "S_CID");
        public final static Property S_KeHuBH = new Property(3, String.class, "S_KeHuBH", false, "S_KEHUBH");
        public final static Property S_KeHuMC = new Property(4, String.class, "S_KeHuMC", false, "S_KEHUMC");
        public final static Property S_ST = new Property(5, String.class, "S_ST", false, "S_ST");
        public final static Property S_DiZhi = new Property(6, String.class, "S_DiZhi", false, "S_DIZHI");
        public final static Property S_LianXiR = new Property(7, String.class, "S_LianXiR", false, "S_LIANXIR");
        public final static Property S_LIANXISJ = new Property(8, String.class, "S_LIANXISJ", false, "S_LIANXISJ");
        public final static Property S_LianXiDH = new Property(9, String.class, "S_LianXiDH", false, "S_LIANXIDH");
        public final static Property S_ShouFeiFS = new Property(10, String.class, "S_ShouFeiFS", false, "S_SHOUFEIFS");
        public final static Property S_JianHao = new Property(11, String.class, "S_JianHao", false, "S_JIANHAO");
        public final static Property S_JianHaoMC = new Property(12, String.class, "S_JianHaoMC", false, "S_JIANHAOMC");
        public final static Property S_BiaoWei = new Property(13, String.class, "S_BiaoWei", false, "S_BIAOWEI");
        public final static Property D_ShenQingRQ = new Property(14, Integer.class, "D_ShenQingRQ", false, "D_SHENQINGRQ");
        public final static Property S_ShenQingR = new Property(15, String.class, "S_ShenQingR", false, "S_SHENQINGR");
        public final static Property S_BEIZHU = new Property(16, String.class, "S_BEIZHU", false, "S_BEIZHU");
        public final static Property I_ShangChuanBZ = new Property(17, Integer.class, "I_ShangChuanBZ", false, "I_SHANGCHUANBZ");
    }

    ;


    public XinXiBGDao(DaoConfig config) {
        super(config);
    }

    public XinXiBGDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'KG_XinXiBG' (" + //
                "'ID' INTEGER," + // 0: ID
                "'S_CH' TEXT," + // 1: S_CH
                "'S_CID' TEXT," + // 2: S_CID
                "'S_KEHUBH' TEXT," + // 3: S_KeHuBH
                "'S_KEHUMC' TEXT," + // 4: S_KeHuMC
                "'S_ST' TEXT," + // 5: S_ST
                "'S_DIZHI' TEXT," + // 6: S_DiZhi
                "'S_LIANXIR' TEXT," + // 7: S_LianXiR
                "'S_LIANXISJ' TEXT," + // 8: S_LIANXISJ
                "'S_LIANXIDH' TEXT," + // 9: S_LianXiDH
                "'S_SHOUFEIFS' TEXT," + // 10: S_ShouFeiFS
                "'S_JIANHAO' TEXT," + // 11: S_JianHao
                "'S_JIANHAOMC' TEXT," + // 12: S_JianHaoMC
                "'S_BIAOWEI' TEXT," + // 13: S_BiaoWei
                "'D_SHENQINGRQ' INTEGER," + // 14: D_ShenQingRQ
                "'S_SHENQINGR' TEXT," + // 15: S_ShenQingR
                "'S_BEIZHU' TEXT," + // 16: S_BEIZHU
                "'I_SHANGCHUANBZ' INTEGER);"); // 17: I_ShangChuanBZ
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KG_XinXiBG'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, XinXiBG entity) {
        stmt.clearBindings();

        Integer ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }

        String S_CH = entity.getS_CH();
        if (S_CH != null) {
            stmt.bindString(2, S_CH);
        }

        String S_CID = entity.getS_CID();
        if (S_CID != null) {
            stmt.bindString(3, S_CID);
        }

        String S_KeHuBH = entity.getS_KeHuBH();
        if (S_KeHuBH != null) {
            stmt.bindString(4, S_KeHuBH);
        }

        String S_KeHuMC = entity.getS_KeHuMC();
        if (S_KeHuMC != null) {
            stmt.bindString(5, S_KeHuMC);
        }

        String S_ST = entity.getS_ST();
        if (S_ST != null) {
            stmt.bindString(6, S_ST);
        }

        String S_DiZhi = entity.getS_DiZhi();
        if (S_DiZhi != null) {
            stmt.bindString(7, S_DiZhi);
        }

        String S_LianXiR = entity.getS_LianXiR();
        if (S_LianXiR != null) {
            stmt.bindString(8, S_LianXiR);
        }

        String S_LIANXISJ = entity.getS_LIANXISJ();
        if (S_LIANXISJ != null) {
            stmt.bindString(9, S_LIANXISJ);
        }

        String S_LianXiDH = entity.getS_LianXiDH();
        if (S_LianXiDH != null) {
            stmt.bindString(10, S_LianXiDH);
        }

        String S_ShouFeiFS = entity.getS_ShouFeiFS();
        if (S_ShouFeiFS != null) {
            stmt.bindString(11, S_ShouFeiFS);
        }

        String S_JianHao = entity.getS_JianHao();
        if (S_JianHao != null) {
            stmt.bindString(12, S_JianHao);
        }

        String S_JianHaoMC = entity.getS_JianHaoMC();
        if (S_JianHaoMC != null) {
            stmt.bindString(13, S_JianHaoMC);
        }

        String S_BiaoWei = entity.getS_BiaoWei();
        if (S_BiaoWei != null) {
            stmt.bindString(14, S_BiaoWei);
        }

        Integer D_ShenQingRQ = entity.getD_ShenQingRQ();
        if (D_ShenQingRQ != null) {
            stmt.bindLong(15, D_ShenQingRQ);
        }

        String S_ShenQingR = entity.getS_ShenQingR();
        if (S_ShenQingR != null) {
            stmt.bindString(16, S_ShenQingR);
        }

        String S_BEIZHU = entity.getS_BEIZHU();
        if (S_BEIZHU != null) {
            stmt.bindString(17, S_BEIZHU);
        }

        Integer I_ShangChuanBZ = entity.getI_ShangChuanBZ();
        if (I_ShangChuanBZ != null) {
            stmt.bindLong(18, I_ShangChuanBZ);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public XinXiBG readEntity(Cursor cursor, int offset) {
        XinXiBG entity = new XinXiBG( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_CH
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_CID
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_KeHuBH
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // S_KeHuMC
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // S_ST
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // S_DiZhi
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // S_LianXiR
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // S_LIANXISJ
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // S_LianXiDH
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // S_ShouFeiFS
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // S_JianHao
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // S_JianHaoMC
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // S_BiaoWei
                cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // D_ShenQingRQ
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // S_ShenQingR
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // S_BEIZHU
                cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // I_ShangChuanBZ
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, XinXiBG entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setS_CH(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setS_CID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_KeHuBH(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setS_KeHuMC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_ST(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setS_DiZhi(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setS_LianXiR(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setS_LIANXISJ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setS_LianXiDH(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setS_ShouFeiFS(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setS_JianHao(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setS_JianHaoMC(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setS_BiaoWei(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setD_ShenQingRQ(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setS_ShenQingR(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setS_BEIZHU(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setI_ShangChuanBZ(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(XinXiBG entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(XinXiBG entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 插入信息变更数据
     *
     * @param xinxi
     * @return
     */
    public int InsertXinXiBG(XinXiBG xinxi) {
        return 1;
    }


    /**
     * 根据ID查询变更内容
     *
     * @param ID
     * @return
     */
    public XinXiBG SelectXinXiBGByID(int ID) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.ID.eq(ID));
        List<XinXiBG> xinxis = qb.list();
        if (xinxis == null || xinxis.size() <= 0) {
            return null;
        }

        return xinxis.get(0);
    }

    /**
     * 更新上传标志
     *
     * @param S_CID
     * @return
     */
    public int UpdateXinXiShangChuanBZ(String S_CID, String S_JIANHAO, String S_LIANXIDH, String S_LIANXISJ, String S_BEIZHU) {

        if (S_CID == null || S_JIANHAO == null || S_LIANXIDH == S_LIANXIDH || S_LIANXISJ == S_LIANXISJ||S_BEIZHU==null) {
            return 0;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(S_CID));
        List<XinXiBG> xinXiBGs = qb.list();
        if (xinXiBGs == null || xinXiBGs.size() <= 0) {
            return 0;
        }
        XinXiBG xinXiBG = xinXiBGs.get(0);
        xinXiBG.setS_JianHao(S_JIANHAO);
        xinXiBG.setS_LianXiDH(S_LIANXIDH);
        xinXiBG.setS_LIANXISJ(S_LIANXISJ);
        xinXiBG.setS_BEIZHU(S_BEIZHU);

        return  Integer.valueOf(String.valueOf(this.insertOrReplace(xinXiBG)));
    }

}
