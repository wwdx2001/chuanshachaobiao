package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.JianHao;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table JG_JianHao.
 */
public class JianHaoDao extends AbstractDao<JianHao, Void> {

    public static final String TABLENAME = "JG_JianHao";

    /**
     * Properties of entity JianHao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, int.class, "ID", false, "ID");
        public final static Property I_TIAOJIAH = new Property(1, int.class, "I_TIAOJIAH", false, "I_TIAOJIAH");
        public final static Property S_DALEI = new Property(2, String.class, "S_DALEI", false, "S_DALEI");
        public final static Property S_ZHONGLEI = new Property(3, String.class, "S_ZHONGLEI", false, "S_ZHONGLEI");
        public final static Property S_XIAOLEI = new Property(4, String.class, "S_XIAOLEI", false, "S_XIAOLEI");
        public final static Property S_JIANHAO = new Property(5, String.class, "S_JIANHAO", false, "S_JIANHAO");
        public final static Property I_JIETIS = new Property(6, Integer.class, "I_JIETIS", false, "I_JIETIS");
        public final static Property S_BEIZHU = new Property(7, String.class, "S_BEIZHU", false, "S_BEIZHU");
    }

    ;


    public JianHaoDao(DaoConfig config) {
        super(config);
    }

    public JianHaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'JG_JianHao' (" + //
                "'ID' INTEGER NOT NULL ," + // 0: ID
                "'I_TIAOJIAH' INTEGER NOT NULL ," + // 1: I_TIAOJIAH
                "'S_DALEI' TEXT," + // 2: S_DALEI
                "'S_ZHONGLEI' TEXT," + // 3: S_ZHONGLEI
                "'S_XIAOLEI' TEXT," + // 4: S_XIAOLEI
                "'S_JIANHAO' TEXT NOT NULL ," + // 5: S_JIANHAO
                "'I_JIETIS' INTEGER," + // 6: I_JIETIS
                "'S_BEIZHU' TEXT);"); // 7: S_BEIZHU
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JG_JianHao'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, JianHao entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
        stmt.bindLong(2, entity.getI_TIAOJIAH());

        String S_DALEI = entity.getS_DALEI();
        if (S_DALEI != null) {
            stmt.bindString(3, S_DALEI);
        }

        String S_ZHONGLEI = entity.getS_ZHONGLEI();
        if (S_ZHONGLEI != null) {
            stmt.bindString(4, S_ZHONGLEI);
        }

        String S_XIAOLEI = entity.getS_XIAOLEI();
        if (S_XIAOLEI != null) {
            stmt.bindString(5, S_XIAOLEI);
        }
        stmt.bindString(6, entity.getS_JIANHAO());

        Integer I_JIETIS = entity.getI_JIETIS();
        if (I_JIETIS != null) {
            stmt.bindLong(7, I_JIETIS);
        }

        String S_BEIZHU = entity.getS_BEIZHU();
        if (S_BEIZHU != null) {
            stmt.bindString(8, S_BEIZHU);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public JianHao readEntity(Cursor cursor, int offset) {
        JianHao entity = new JianHao( //
                cursor.getInt(offset + 0), // ID
                cursor.getInt(offset + 1), // I_TIAOJIAH
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // S_DALEI
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_ZHONGLEI
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // S_XIAOLEI
                cursor.getString(offset + 5), // S_JIANHAO
                cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6), // I_JIETIS
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // S_BEIZHU
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, JianHao entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setI_TIAOJIAH(cursor.getInt(offset + 1));
        entity.setS_DALEI(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setS_ZHONGLEI(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setS_XIAOLEI(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setS_JIANHAO(cursor.getString(offset + 5));
        entity.setI_JIETIS(cursor.isNull(offset + 6) ? 0 : cursor.getInt(offset + 6));
        entity.setS_BEIZHU(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(JianHao entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(JianHao entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }


    public JianHao get(String strZhongLei) {

        if (strZhongLei == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_ZHONGLEI.eq(strZhongLei));
        List<JianHao> jianHaos = qb.list();

        if (jianHaos == null || jianHaos.size() <= 0) {
            return null;
        }

        return jianHaos.get(0);

    }

    public List<JianHao> getList() {

        return this.loadAll();

    }

    /**
     * 根据简号id查询对应的数据，如果存在则返回true，不存在返回false
     *
     * @param id 简号id
     * @return boolean
     */
    public boolean existJianhao(int id) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.ID.eq(id));

        return qb.list().size() > 0 ? true : false;
    }

    /**
     * 删除数据库中数据
     */
    public void deleteJianHao() {
        this.deleteAll();
        //this.queryBuilder().buildDelete().executeDeleteWithoutDetachingEntities();
    }

    /**
     * 插入数据到简号数据库中
     *
     * @param Jianhao
     *            简号数据实体
     */
    public void insertJianHao(JianHao Jianhao) {

        insertOrReplace(Jianhao);

    }

}
