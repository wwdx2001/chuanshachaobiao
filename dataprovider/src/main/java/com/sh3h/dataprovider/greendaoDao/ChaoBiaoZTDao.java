package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoZT;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CB_ChaoBiaoZT.
 */
public class ChaoBiaoZTDao extends AbstractDao<ChaoBiaoZT, Void> {

    public static final String TABLENAME = "CB_ChaoBiaoZT";

    /**
     * Properties of entity ChaoBiaoZT.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property I_ZHUANGTAIBM = new Property(0, int.class, "I_ZHUANGTAIBM", false, "I_ZHUANGTAIBM");
        public final static Property I_SHUILIANGSFBM = new Property(1, int.class, "I_SHUILIANGSFBM", false, "I_SHUILIANGSFBM");
        public final static Property I_ZHUANGTAIFLBM = new Property(2, int.class, "I_ZHUANGTAIFLBM", false, "I_ZHUANGTAIFLBM");
        public final static Property S_ZHUANGTAIMC = new Property(3, String.class, "S_ZHUANGTAIMC", false, "S_ZHUANGTAIMC");
        public final static Property S_KUAIJIEJPC = new Property(4, String.class, "S_KUAIJIEJPC", false, "S_KUAIJIEJPC");
    }

    ;


    public ChaoBiaoZTDao(DaoConfig config) {
        super(config);
    }

    public ChaoBiaoZTDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_ChaoBiaoZT' (" + //
                "'I_ZHUANGTAIBM' INTEGER NOT NULL ," + // 0: I_ZHUANGTAIBM
                "'I_SHUILIANGSFBM' INTEGER NOT NULL ," + // 1: I_SHUILIANGSFBM
                "'I_ZHUANGTAIFLBM' INTEGER NOT NULL ," + // 2: I_ZHUANGTAIFLBM
                "'S_ZHUANGTAIMC' TEXT NOT NULL ," + // 3: S_ZHUANGTAIMC
                "'S_KUAIJIEJPC' TEXT);"); // 4: S_KUAIJIEJPC
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_ChaoBiaoZT'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChaoBiaoZT entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getI_ZHUANGTAIBM());
        stmt.bindLong(2, entity.getI_SHUILIANGSFBM());
        stmt.bindLong(3, entity.getI_ZHUANGTAIFLBM());
        stmt.bindString(4, entity.getS_ZHUANGTAIMC());

        String S_KUAIJIEJPC = entity.getS_KUAIJIEJPC();
        if (S_KUAIJIEJPC != null) {
            stmt.bindString(5, S_KUAIJIEJPC);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public ChaoBiaoZT readEntity(Cursor cursor, int offset) {
        ChaoBiaoZT entity = new ChaoBiaoZT( //
                cursor.getInt(offset + 0), // I_ZHUANGTAIBM
                cursor.getInt(offset + 1), // I_SHUILIANGSFBM
                cursor.getInt(offset + 2), // I_ZHUANGTAIFLBM
                cursor.getString(offset + 3), // S_ZHUANGTAIMC
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // S_KUAIJIEJPC
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ChaoBiaoZT entity, int offset) {
        entity.setI_ZHUANGTAIBM(cursor.getInt(offset + 0));
        entity.setI_SHUILIANGSFBM(cursor.getInt(offset + 1));
        entity.setI_ZHUANGTAIFLBM(cursor.getInt(offset + 2));
        entity.setS_ZHUANGTAIMC(cursor.getString(offset + 3));
        entity.setS_KUAIJIEJPC(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(ChaoBiaoZT entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(ChaoBiaoZT entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 根据抄表状态编码查询抄表状态信息
     *
     * @param i_chaobiaoztbm
     * @return
     */
    public ChaoBiaoZT getChaoBiaoZT(int i_chaobiaoztbm) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_ZHUANGTAIBM.eq(i_chaobiaoztbm));
        List<ChaoBiaoZT> list = qb.list();
        if ((list == null) || (list.size() <= 0)) {
            return null;
        } else {
            return list.get(0);
        }
    }

    /**
     * 根据状态编码查询对应的数据，如果存在则返回true，不存在返回false
     *
     * @param zhuangTaiBM 状态编码
     * @return boolean
     */
    public boolean existChaoBiaoZT(int zhuangTaiBM) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_ZHUANGTAIBM.eq(zhuangTaiBM));
        List<ChaoBiaoZT> list = qb.list();
        if ((list == null) || (list.size() <= 0)) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * 根据状态编码删除数据库中对应的数据
     */
    public void deleteChaoBiaoZT() {
        this.deleteAll();
    }

    /**
     * 插入数据到抄表状态数据库中
     *
     * @param chaoBiaoZT 抄表状态数据实体
     */
    public void insertChaoBiaoZT(ChaoBiaoZT chaoBiaoZT) {
        if (chaoBiaoZT == null) {
            return;
        }
        this.insertOrReplace(chaoBiaoZT);
    }


    /**
     * 根据对应的状态分类编码获取所对应的的状态编码的内容
     *
     * @param zhuangtaiFLBM
     * @return List<ChaoBiaoZT>
     */
    public List<ChaoBiaoZT> getChaoBiaoZTFL(int zhuangtaiFLBM) {

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_ZHUANGTAIBM.eq(zhuangtaiFLBM));
        List<ChaoBiaoZT> list = qb.list();
        if ((list == null) || (list.size() <= 0)) {
            return null;
        } else {
            return list;
        }
    }

    /**
     * 获取所有抄表状态
     *
     * @return
     */
    public List<ChaoBiaoZT> getAllChaobiaozt() {
        return this.loadAll();
    }

    /**
     * 获取所有抄表状态
     *
     * @return
     */
    public List<ChaoBiaoZT> getAllChaobiaozt(String chaoBiaoBM) {
        String[] strings = chaoBiaoBM.split(",");
        if (strings.length <= 0) {
            return new ArrayList<>();
        }

        List<String> stringList = Arrays.asList(strings);
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.I_ZHUANGTAIBM.in(stringList));
        List<ChaoBiaoZT> list = qb.list();
        List<ChaoBiaoZT> returnList = new ArrayList<>();
        if ((list != null) && (list.size() > 0)) {
            int statusIndex;
            for (String statusBM : stringList) {
                statusIndex = Integer.parseInt(statusBM);
                for (ChaoBiaoZT status : list) {
                    if (statusIndex == status.getI_ZHUANGTAIBM()) {
                        returnList.add(status);
                        break;
                    }
                }
            }
        }

        return returnList;
    }
}
