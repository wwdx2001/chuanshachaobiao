package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.GuiJi;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table CB_GuiJi.
 */
public class GuiJiDao extends AbstractDao<GuiJi, Void> {

    public static final String TABLENAME = "CB_GuiJi";

    /**
     * Properties of entity GuiJi.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, int.class, "ID", false, "ID");
        public final static Property S_CH = new Property(1, String.class, "S_CH", false, "S_CH");
        public final static Property I_CENEIXH = new Property(2, Integer.class, "I_CENEIXH", false, "I_CENEIXH");
        public final static Property S_X = new Property(3, String.class, "S_X", false, "S_X");
        public final static Property S_Y = new Property(4, String.class, "S_Y", false, "S_Y");
    };


    public GuiJiDao(DaoConfig config) {
        super(config);
    }

    public GuiJiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_GuiJi' (" + //
                "'ID' INTEGER NOT NULL ," + // 0: ID
                "'S_CH' TEXT NOT NULL ," + // 1: S_CH
                "'I_CENEIXH' INTEGER," + // 2: I_CENEIXH
                "'S_X' TEXT," + // 3: S_X
                "'S_Y' TEXT);"); // 4: S_Y
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_GuiJi'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GuiJi entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getID());
        stmt.bindString(2, entity.getS_CH());

        Integer I_CENEIXH = entity.getI_CENEIXH();
        if (I_CENEIXH != null) {
            stmt.bindLong(3, I_CENEIXH);
        }

        String S_X = entity.getS_X();
        if (S_X != null) {
            stmt.bindString(4, S_X);
        }

        String S_Y = entity.getS_Y();
        if (S_Y != null) {
            stmt.bindString(5, S_Y);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public GuiJi readEntity(Cursor cursor, int offset) {
        GuiJi entity = new GuiJi( //
                cursor.getInt(offset + 0), // ID
                cursor.getString(offset + 1), // S_CH
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // I_CENEIXH
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // S_X
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // S_Y
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GuiJi entity, int offset) {
        entity.setID(cursor.getInt(offset + 0));
        entity.setS_CH(cursor.getString(offset + 1));
        entity.setI_CENEIXH(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setS_X(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setS_Y(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(GuiJi entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(GuiJi entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    /**
     * 插入轨迹
     *
     */
    public boolean insertGuiJiData(List<GuiJi> guiJiList) {
        Boolean flag = false;
        if (guiJiList == null){
            return flag;
        }
        for (GuiJi guiJi : guiJiList) {
            flag = this.insertOrReplace(guiJi)> 0;
        }
        return flag;
    }
    /**
     * 删除轨迹
     */
    public void deleteGuiJiData() {
        this.deleteAll();
    }

    /**
     * 获得轨迹
     */
    public List<GuiJi> getGuiJiData(String ch) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CH.eq(ch));
        List<GuiJi> list =qb.list();
        return list;
    }
}
