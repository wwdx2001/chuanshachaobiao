package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.FeiYongZKL;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table KG_FeiYongZKL.
 */
public class FeiYongZKLDao extends AbstractDao<FeiYongZKL, Void> {

    public static final String TABLENAME = "KG_FeiYongZKL";

    /**
     * Properties of entity FeiYongZKL.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property S_CID = new Property(0, String.class, "S_CID", false, "S_CID");
        public final static Property S_JianHao = new Property(1, String.class, "S_JianHao", false, "S_JIANHAO");
        public final static Property I_FEIYONGDLBH = new Property(2, int.class, "I_FEIYONGDLBH", false, "I_FEIYONGDLBH");
        public final static Property N_ZheKouL = new Property(3, double.class, "N_ZheKouL", false, "N_ZHEKOUL");
    }

    ;


    public FeiYongZKLDao(DaoConfig config) {
        super(config);
    }

    public FeiYongZKLDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'KG_FeiYongZKL' (" + //
                "'S_CID' TEXT," + // 0: S_CID
                "'S_JIANHAO' TEXT," + // 1: S_JianHao
                "'I_FEIYONGDLBH' INTEGER," + // 2: I_FEIYONGDLBH
                "'N_ZHEKOUL' REAL);"); // 3: N_ZheKouL
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KG_FeiYongZKL'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, FeiYongZKL entity) {
        stmt.clearBindings();

        String S_CID = entity.getS_CID();
        if (S_CID != null) {
            stmt.bindString(1, S_CID);
        }

        String S_JianHao = entity.getS_JianHao();
        if (S_JianHao != null) {
            stmt.bindString(2, S_JianHao);
        }

        int I_FeiYongDLBH = entity.getI_FeiYongDLBH();
        //if (I_FeiYongDLBH != null) {
        stmt.bindLong(3, I_FeiYongDLBH);
        //}

        double N_ZheKouL = entity.getN_ZheKouL();
        //if (N_ZheKouL != null) {
        stmt.bindDouble(4, N_ZheKouL);
        //}
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public FeiYongZKL readEntity(Cursor cursor, int offset) {
        FeiYongZKL entity = new FeiYongZKL( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // S_CID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_JianHao
                cursor.isNull(offset + 2) ? 0 : cursor.getInt(offset + 2), // I_FeiYongDLBH
                cursor.isNull(offset + 3) ? 0 : cursor.getDouble(offset + 3) // N_ZheKouL
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, FeiYongZKL entity, int offset) {
        entity.setS_CID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setS_JianHao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setI_FeiYongDLBH(cursor.isNull(offset + 2) ? 0 : cursor.getInt(offset + 2));
        entity.setN_ZheKouL(cursor.isNull(offset + 3) ? 0 : cursor.getDouble(offset + 3));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(FeiYongZKL entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(FeiYongZKL entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 插入费用折扣率到数据库
     */
    public boolean insertFeiYongZKL(FeiYongZKL feiYongZKL) {
        if (feiYongZKL == null) {
            return false;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(feiYongZKL.getS_CID()),
                Properties.S_JianHao.eq(feiYongZKL.getS_JianHao()),
                Properties.I_FEIYONGDLBH.eq(feiYongZKL.getI_FeiYongDLBH()));
        List<FeiYongZKL> feiYongZKLList = qb.list();
        if ((feiYongZKLList != null) && (feiYongZKLList.size() > 0)) {
            return true;
        }

        return insert(feiYongZKL) > 0;
    }

    /**
     * 插入费用折扣率列表到数据库
     */

    public void insertFeiYongZKLList(List<FeiYongZKL> feiYongZKLList) {
        if ((feiYongZKLList == null) || (feiYongZKLList.size() <= 0)) {
            return;
        }

        for (FeiYongZKL feiYongZKL : feiYongZKLList) {
            insertOrReplace(feiYongZKL);
        }

    }

    /**
     * 删除费用折扣率
     */
    public boolean clearFeiYongZKL(String S_CID, String jianHao, int feiYongDLBH) {
        if (S_CID == null || jianHao == null) {
            return false;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(S_CID), Properties.S_JianHao.eq(jianHao), Properties.I_FEIYONGDLBH.eq(feiYongDLBH))
                .buildDelete().executeDeleteWithoutDetachingEntities();
        return true;

    }


    /**
     * 删除费用折扣率
     */
    public void delectFeiYongZKL(String cidAll) {
        String[] str = cidAll.split(",");
        String sqlite_delete = null;
        if (cidAll == null || cidAll.equals("")) {
            return;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.in((Object[]) str)).buildDelete().executeDeleteWithoutDetachingEntities();

    }

    /**
     * 根据用户号、简号、费用大类编号查询用户的费用折扣率
     *
     * @param S_CID
     * @param S_JH
     * @param I_FeiYongDLBH
     * @return
     */
    public FeiYongZKL getFeiYongZKL(String S_CID, int I_FeiYongDLBH, String S_JH) {


        if (S_CID == null || S_JH == null) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(S_CID), Properties.S_JianHao.eq(I_FeiYongDLBH)
                , Properties.I_FEIYONGDLBH.eq(I_FeiYongDLBH));
        List<FeiYongZKL> feiYongZKLs = qb.list();
        if (feiYongZKLs == null || feiYongZKLs.size() <= 0) {
            return null;
        }
        return feiYongZKLs.get(0);

    }


    /**
     * 根据用户号、简号、费用大类编号查询用户的费用折扣率情况
     *
     * @param S_CID
     * @param S_JH
     * @param I_FeiYongDLBH
     * @return
     */
    public double getFeiYongZKL(String S_CID, String S_JH, int I_FeiYongDLBH) {

        if (S_CID == null || S_JH == null) {
            return 0.0;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(S_CID), Properties.S_JianHao.eq(S_JH), Properties.I_FEIYONGDLBH.eq(I_FeiYongDLBH));
        List<FeiYongZKL> feiYongZKLs = qb.list();
        if (feiYongZKLs == null || feiYongZKLs.size() <= 0) {
            return 0.0;
        }

        Double zkl = feiYongZKLs.get(0).getN_ZheKouL();
        return zkl;
    }


}
