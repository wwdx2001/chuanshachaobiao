package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.ShuiLiangFTXX;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table KG_ShuiLiangFTXX.
 */
public class ShuiLiangFTXXDao extends AbstractDao<ShuiLiangFTXX, Void> {

    public static final String TABLENAME = "KG_ShuiLiangFTXX";

    /**
     * Properties of entity ShuiLiangFTXX.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property S_CID = new Property(0, String.class, "S_CID", false, "S_CID");
        public final static Property S_JianHao = new Property(1, String.class, "S_JianHao", false, "S_JIANHAO");
        public final static Property I_FenTanFS = new Property(2, int.class, "I_FenTanFS", false, "I_FENTANFS");
        public final static Property I_FenTanL = new Property(3, double.class, "I_FenTanL", false, "I_FENTANL");
        public final static Property I_PaiXu = new Property(4, int.class, "I_PaiXu", false, "I_PAIXU");
    }

    ;


    public ShuiLiangFTXXDao(DaoConfig config) {
        super(config);
    }

    public ShuiLiangFTXXDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'KG_ShuiLiangFTXX' (" + //
                "'S_CID' TEXT NOT NULL ," + // 0: S_CID
                "'S_JIANHAO' TEXT NOT NULL ," + // 1: S_JianHao
                "'I_FENTANFS' INTEGER NOT NULL ," + // 2: I_FenTanFS
                "'I_FENTANL' REAL NOT NULL ," + // 3: I_FenTanL
                "'I_PAIXU' INTEGER NOT NULL );"); // 4: I_PaiXu
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'KG_ShuiLiangFTXX'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShuiLiangFTXX entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getS_CID());
        stmt.bindString(2, entity.getS_JianHao());
        stmt.bindLong(3, entity.getI_FenTanFS());
        stmt.bindDouble(4, entity.getI_FenTanL());
        stmt.bindLong(5, entity.getI_PaiXu());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public ShuiLiangFTXX readEntity(Cursor cursor, int offset) {
        ShuiLiangFTXX entity = new ShuiLiangFTXX( //
                cursor.getString(offset + 0), // S_CID
                cursor.getString(offset + 1), // S_JianHao
                cursor.getInt(offset + 2), // I_FenTanFS
                cursor.getDouble(offset + 3), // I_FenTanL
                cursor.getInt(offset + 4) // I_PaiXu
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, ShuiLiangFTXX entity, int offset) {
        entity.setS_CID(cursor.getString(offset + 0));
        entity.setS_JianHao(cursor.getString(offset + 1));
        entity.setI_FenTanFS(cursor.getInt(offset + 2));
        entity.setI_FenTanL(cursor.getDouble(offset + 3));
        entity.setI_PaiXu(cursor.getInt(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(ShuiLiangFTXX entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(ShuiLiangFTXX entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * 删除数据
     */
    public void deleteShuiLiangFTXX(String CIDAll) {
        String[] str = CIDAll.split(",");
        if (CIDAll == null || CIDAll.equals("")) {
            return;
        }
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.in((Object[])str)).buildDelete().executeDeleteWithoutDetachingEntities();

    }

    /**
     * 插入数据
     */
    public boolean insertShuiLiangFTXX(ShuiLiangFTXX shuiLiangFTXX) {
        if (shuiLiangFTXX == null) {
            return false;
        }

        QueryBuilder qb = queryBuilder();
        qb.where(Properties.S_CID.eq(shuiLiangFTXX.getS_CID()),
                Properties.S_JianHao.eq(shuiLiangFTXX.getS_JianHao()),
                Properties.I_FenTanFS.eq(shuiLiangFTXX.getI_FenTanFS()));
        List<ShuiLiangFTXX> shuiLiangFTXXList = qb.list();
        if ((shuiLiangFTXXList != null) && (shuiLiangFTXXList.size() > 0)) {
            return true;
        }

        return insert(shuiLiangFTXX) > 0;
    }

    /**
     * 插入数据列表
     */
    public void insertOrUpdateShuiLiangFTXXList(List<ShuiLiangFTXX> shuiLiangFTXXList) {

        if ((shuiLiangFTXXList == null) || (shuiLiangFTXXList.size() <= 0)) {
            return;
        }

        for (ShuiLiangFTXX shuiLiangFTXX : shuiLiangFTXXList) {
            insertOrReplace(shuiLiangFTXX);

        }

    }

    /**
     * 修改数据
     */
    public boolean updateShuiLiangFTXX(ShuiLiangFTXX shuiLiangFTXX) {

        if (shuiLiangFTXX == null) {
            return false;
        }
        QueryBuilder qb = queryBuilder();
        qb.where(Properties.S_CID.eq(shuiLiangFTXX.getS_CID()));
        List<ShuiLiangFTXX> shuiLiangFTXXes = qb.list();

        if (shuiLiangFTXXes == null || shuiLiangFTXXes.size() <= 0) {
            return false;
        }

        return insertOrReplace(shuiLiangFTXXes.get(0)) > 0 ? true : false;
    }

    /**
     * 根据用户号查询混合用水分摊情况
     *
     * @param s_cid
     * @return
     */
    public List<ShuiLiangFTXX> getShuiLiangFenTXX(String s_cid) {

        if (s_cid == null || s_cid.equals("")) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_CID.eq(s_cid));
        qb.orderAsc(Properties.I_PaiXu);
        List<ShuiLiangFTXX> shuiLiangFTXX = qb.list();

        if (shuiLiangFTXX == null || shuiLiangFTXX.size() <= 0) {
            return null;
        }

        return shuiLiangFTXX;

    }

}
