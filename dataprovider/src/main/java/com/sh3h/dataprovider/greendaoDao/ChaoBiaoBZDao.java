package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sh3h.dataprovider.greendaoEntity.ChaoBiaoBZ;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CB_ChaoBiaoBZ.
*/
public class ChaoBiaoBZDao extends AbstractDao<ChaoBiaoBZ, Void> {

    public static final String TABLENAME = "CB_ChaoBiaoBZ";

    /**
     * Properties of entity ChaoBiaoBZ.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property S_CID = new Property(0, String.class, "S_CID", false, "S_CID");
        public final static Property S_BEIZHU = new Property(1, String.class, "S_BEIZHU", false, "S_BEIZHU");
    };


    public ChaoBiaoBZDao(DaoConfig config) {
        super(config);
    }
    
    public ChaoBiaoBZDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CB_ChaoBiaoBZ' (" + //
                "'S_CID' TEXT NOT NULL ," + // 0: S_CID
                "'S_BEIZHU' TEXT);"); // 1: S_BEIZHU
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CB_ChaoBiaoBZ'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChaoBiaoBZ entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getS_CID());
 
        String S_BEIZHU = entity.getS_BEIZHU();
        if (S_BEIZHU != null) {
            stmt.bindString(2, S_BEIZHU);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ChaoBiaoBZ readEntity(Cursor cursor, int offset) {
        ChaoBiaoBZ entity = new ChaoBiaoBZ( //
            cursor.getString(offset + 0), // S_CID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // S_BEIZHU
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChaoBiaoBZ entity, int offset) {
        entity.setS_CID(cursor.getString(offset + 0));
        entity.setS_BEIZHU(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ChaoBiaoBZ entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ChaoBiaoBZ entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }


    /**
     * 获取所有抄表备注信息
     *
     * @return List<ChaoBiaoBZ>
     */
    public List<ChaoBiaoBZ> getChaoBiaoBZList() {
        return this.loadAll();
    }


    
}
