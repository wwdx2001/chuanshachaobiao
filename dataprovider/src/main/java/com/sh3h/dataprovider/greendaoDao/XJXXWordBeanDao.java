package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.sh3h.mobileutil.util.TextUtil;
import com.sh3h.serverprovider.entity.XJXXWordBean;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "XJXXWORD_BEAN".
*/
public class XJXXWordBeanDao extends AbstractDao<XJXXWordBean, Long> {

    public static final String TABLENAME = "XJXXWORD_BEAN";

  public boolean insertXunjianWord(List<XJXXWordBean> data) {
    if (data == null) {
      return false;
    }

    insertOrReplaceInTx(data);
    return true;
  }

  public boolean deleteXunjianWord() {
    deleteAll();
    return true;
  }

    public List<XJXXWordBean> getXunJianWord(String type) {
        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.MMODULE.eq(type));
        return qb.list();
    }

    public List<XJXXWordBean> getHotlineWordData(String type) {
        QueryBuilder qb = this.queryBuilder();
        return qb.where(Properties.MMODULE.eq(type)).list();
    }

    public List<XJXXWordBean> getHotlineWordData(String type, String yongshuixz) {
        QueryBuilder qb = this.queryBuilder();
        return qb.where(XJXXWordBeanDao.Properties.MMODULE.eq(type))
            .where(XJXXWordBeanDao.Properties.MVALUE.eq(yongshuixz))
            .list();
    }

    public List<XJXXWordBean> getQFYYWordData(String type, String secondLevel) {
        QueryBuilder qb = this.queryBuilder();
      if (!TextUtil.isNullOrEmpty(secondLevel)) {
          return qb.where(XJXXWordBeanDao.Properties.MMODULE.eq(type))
                  .where(XJXXWordBeanDao.Properties.MVALUE.like("%" + secondLevel + "-%"))
                  .list();
      } else {
          return qb.where(XJXXWordBeanDao.Properties.MMODULE.eq(type))
                  .list();
      }


    }

  /**
     * Properties of entity XJXXWordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MMODULE = new Property(1, String.class, "MMODULE", false, "MMODULE");
        public final static Property MVALUE = new Property(2, String.class, "MVALUE", false, "MVALUE");
        public final static Property MNAME = new Property(3, String.class, "MNAME", false, "MNAME");
    }


    public XJXXWordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public XJXXWordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"XJXXWORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MMODULE\" TEXT," + // 1: MMODULE
                "\"MVALUE\" TEXT," + // 2: MVALUE
                "\"MNAME\" TEXT);"); // 3: MNAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"XJXXWORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, XJXXWordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String MMODULE = entity.getMMODULE();
        if (MMODULE != null) {
            stmt.bindString(2, MMODULE);
        }
 
        String MVALUE = entity.getMVALUE();
        if (MVALUE != null) {
            stmt.bindString(3, MVALUE);
        }
 
        String MNAME = entity.getMNAME();
        if (MNAME != null) {
            stmt.bindString(4, MNAME);
        }
    }



    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public XJXXWordBean readEntity(Cursor cursor, int offset) {
        XJXXWordBean entity = new XJXXWordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MMODULE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MVALUE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // MNAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, XJXXWordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMMODULE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMVALUE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMNAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(XJXXWordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(XJXXWordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }


    public boolean hasKey(XJXXWordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
