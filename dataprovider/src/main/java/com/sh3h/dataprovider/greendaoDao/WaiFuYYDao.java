package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.sh3h.dataprovider.greendaoEntity.WaiFuYY;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PDA_WaiFuYY.
*/
public class WaiFuYYDao extends AbstractDao<WaiFuYY, Void> {

    public static final String TABLENAME = "PDA_WaiFuYY";

    /**
     * Properties of entity WaiFuYY.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property I_CANSHUBH = new Property(0, Integer.class, "I_CANSHUBH", false, "I_CANSHUBH");
        public final static Property S_CANSHUMC = new Property(1, String.class, "S_CANSHUMC", false, "S_CANSHUMC");
        public final static Property I_PAIXU = new Property(2, Integer.class, "I_PAIXU", false, "I_PAIXU");
    };


    public WaiFuYYDao(DaoConfig config) {
        super(config);
    }
    
    public WaiFuYYDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PDA_WaiFuYY' (" + //
                "'I_CANSHUBH' INTEGER," + // 0: I_CANSHUBH
                "'S_CANSHUMC' TEXT," + // 1: S_CANSHUMC
                "'I_PAIXU' INTEGER);"); // 2: I_PAIXU
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PDA_WaiFuYY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WaiFuYY entity) {
        stmt.clearBindings();
 
        Integer I_CANSHUBH = entity.getI_CANSHUBH();
        if (I_CANSHUBH != null) {
            stmt.bindLong(1, I_CANSHUBH);
        }
 
        String S_CANSHUMC = entity.getS_CANSHUMC();
        if (S_CANSHUMC != null) {
            stmt.bindString(2, S_CANSHUMC);
        }
 
        Integer I_PAIXU = entity.getI_PAIXU();
        if (I_PAIXU != null) {
            stmt.bindLong(3, I_PAIXU);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public WaiFuYY readEntity(Cursor cursor, int offset) {
        WaiFuYY entity = new WaiFuYY( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // I_CANSHUBH
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_CANSHUMC
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // I_PAIXU
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WaiFuYY entity, int offset) {
        entity.setI_CANSHUBH(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setS_CANSHUMC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setI_PAIXU(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WaiFuYY entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(WaiFuYY entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
