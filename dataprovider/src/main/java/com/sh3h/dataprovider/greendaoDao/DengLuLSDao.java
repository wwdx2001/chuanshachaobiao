package com.sh3h.dataprovider.greendaoDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.sh3h.dataprovider.greendaoEntity.DengLuLS;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table LG_DengLuLS.
 */
public class DengLuLSDao extends AbstractDao<DengLuLS, Void> {

    public static final String TABLENAME = "LG_DengLuLS";

    /**
     * Properties of entity DengLuLS.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserID = new Property(0, Integer.class, "UserID", false, "USER_ID");
        public final static Property S_YUANGONGZH = new Property(1, String.class, "S_YUANGONGZH", false, "S_YUANGONGZH");
        public final static Property D_DengLuSJ = new Property(2, Integer.class, "D_DengLuSJ", false, "D_DENGLUSJ");
        public final static Property I_DengLuFS = new Property(3, Integer.class, "I_DengLuFS", false, "I_DENGLUFS");
        public final static Property I_YanZhengFS = new Property(4, Integer.class, "I_YanZhengFS", false, "I_YANZHENGFS");
        public final static Property S_MiMa = new Property(5, String.class, "S_MiMa", false, "S_MIMA");
    }

    ;


    public DengLuLSDao(DaoConfig config) {
        super(config);
    }

    public DengLuLSDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'LG_DengLuLS' (" + //
                "'USER_ID' INTEGER," + // 0: UserID
                "'S_YUANGONGZH' TEXT," + // 1: S_YUANGONGZH
                "'D_DENGLUSJ' INTEGER," + // 2: D_DengLuSJ
                "'I_DENGLUFS' INTEGER," + // 3: I_DengLuFS
                "'I_YANZHENGFS' INTEGER," + // 4: I_YanZhengFS
                "'S_MIMA' TEXT);"); // 5: S_MiMa
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LG_DengLuLS'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, DengLuLS entity) {
        stmt.clearBindings();

        Integer UserID = entity.getUserID();
        if (UserID != null) {
            stmt.bindLong(1, UserID);
        }

        String S_YUANGONGZH = entity.getS_YUANGONGZH();
        if (S_YUANGONGZH != null) {
            stmt.bindString(2, S_YUANGONGZH);
        }

        Integer D_DengLuSJ = entity.getD_DengLuSJ();
        if (D_DengLuSJ != null) {
            stmt.bindLong(3, D_DengLuSJ);
        }

        Integer I_DengLuFS = entity.getI_DengLuFS();
        if (I_DengLuFS != null) {
            stmt.bindLong(4, I_DengLuFS);
        }

        Integer I_YanZhengFS = entity.getI_YanZhengFS();
        if (I_YanZhengFS != null) {
            stmt.bindLong(5, I_YanZhengFS);
        }

        String S_MiMa = entity.getS_MiMa();
        if (S_MiMa != null) {
            stmt.bindString(6, S_MiMa);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public DengLuLS readEntity(Cursor cursor, int offset) {
        DengLuLS entity = new DengLuLS( //
                cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // UserID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // S_YUANGONGZH
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // D_DengLuSJ
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // I_DengLuFS
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // I_YanZhengFS
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // S_MiMa
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, DengLuLS entity, int offset) {
        entity.setUserID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setS_YUANGONGZH(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setD_DengLuSJ(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setI_DengLuFS(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setI_YanZhengFS(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setS_MiMa(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Void updateKeyAfterInsert(DengLuLS entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Void getKey(DengLuLS entity) {
        return null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }


    /**
     * 本地认证，通过传入pwd，account判断本地是否存在这个数据，如果存在返回true，否则为false；
     *
     * @param mima    密码
     * @param account 用户名
     * @return boolean值
     */
    public int auth(String mima, String account) {

        if (account == null) {
            return -1;
        }

        QueryBuilder qb = this.queryBuilder();
        qb.where(Properties.S_MiMa.eq(mima), Properties.S_YUANGONGZH.eq(account));

        if (qb.list().size() > 0) {
            return 1; // 登录成功
        } else {
            QueryBuilder qb1 = this.queryBuilder();
            qb1.where(Properties.S_YUANGONGZH.eq(account));
            qb1.list();

            if (qb1.list().size() > 0) {
                return 0;
            } else {
                return -1;
            }

        }

    }

    /**
     * 返回dengluLS对象
     */
    public DengLuLS getDengLuLS(String account) {


        if (account == null || account.equals("")) {
            return null;
        }

        QueryBuilder qb = this.queryBuilder();

        qb.where(Properties.S_YUANGONGZH.eq(account));
        List<DengLuLS> dengLuLSes = qb.list();

        if (dengLuLSes.size() <= 0 || dengLuLSes == null) {
            return null;
        }

        return dengLuLSes.get(0);


    }

    /**
     * 更新登录数据
     *
     * @return boolean
     */
    public boolean updateDengLuLS(DengLuLS dengLuLS) {

        return insertOrReplace(dengLuLS) > 0 ? true : false;
    }

}
